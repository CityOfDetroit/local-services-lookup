{"id":"node_modules/geojson-flatten/index.js","dependencies":[{"name":"/Users/doit/Documents/REPOS/local-services-lookup/package.json","includedInParent":true,"mtime":1551813226973},{"name":"/Users/doit/Documents/REPOS/local-services-lookup/.babelrc","includedInParent":true,"mtime":1551812320599},{"name":"/Users/doit/Documents/REPOS/local-services-lookup/node_modules/geojson-flatten/package.json","includedInParent":true,"mtime":1551812396940}],"generated":{"js":"function flatten(gj) {\n    switch ((gj && gj.type) || null) {\n        case 'FeatureCollection':\n            gj.features = gj.features.reduce(function(mem, feature) {\n                return mem.concat(flatten(feature));\n            }, []);\n            return gj;\n        case 'Feature':\n            if (!gj.geometry) return gj;\n            return flatten(gj.geometry).map(function(geom) {\n                return {\n                    type: 'Feature',\n                    properties: JSON.parse(JSON.stringify(gj.properties)),\n                    geometry: geom\n                };\n            });\n        case 'MultiPoint':\n            return gj.coordinates.map(function(_) {\n                return { type: 'Point', coordinates: _ };\n            });\n        case 'MultiPolygon':\n            return gj.coordinates.map(function(_) {\n                return { type: 'Polygon', coordinates: _ };\n            });\n        case 'MultiLineString':\n            return gj.coordinates.map(function(_) {\n                return { type: 'LineString', coordinates: _ };\n            });\n        case 'GeometryCollection':\n            return gj.geometries.map(flatten).reduce(function(memo, geoms) {\n                return memo.concat(geoms);\n            }, []);\n        case 'Point':\n        case 'Polygon':\n        case 'LineString':\n            return [gj];\n    }\n}\n\nmodule.exports = flatten;\n","map":{"mappings":[{"source":"node_modules/geojson-flatten/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/geojson-flatten/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}}],"sources":{"node_modules/geojson-flatten/index.js":"function flatten(gj) {\n    switch ((gj && gj.type) || null) {\n        case 'FeatureCollection':\n            gj.features = gj.features.reduce(function(mem, feature) {\n                return mem.concat(flatten(feature));\n            }, []);\n            return gj;\n        case 'Feature':\n            if (!gj.geometry) return gj;\n            return flatten(gj.geometry).map(function(geom) {\n                return {\n                    type: 'Feature',\n                    properties: JSON.parse(JSON.stringify(gj.properties)),\n                    geometry: geom\n                };\n            });\n        case 'MultiPoint':\n            return gj.coordinates.map(function(_) {\n                return { type: 'Point', coordinates: _ };\n            });\n        case 'MultiPolygon':\n            return gj.coordinates.map(function(_) {\n                return { type: 'Polygon', coordinates: _ };\n            });\n        case 'MultiLineString':\n            return gj.coordinates.map(function(_) {\n                return { type: 'LineString', coordinates: _ };\n            });\n        case 'GeometryCollection':\n            return gj.geometries.map(flatten).reduce(function(memo, geoms) {\n                return memo.concat(geoms);\n            }, []);\n        case 'Point':\n        case 'Polygon':\n        case 'LineString':\n            return [gj];\n    }\n}\n\nmodule.exports = flatten;\n"},"lineCount":41}},"hash":"9427035facb180300d919d87c29d4edc","cacheData":{"env":{}}}