{"id":"node_modules/@mapbox/geojsonhint/lib/rhr.js","dependencies":[{"name":"/home/edgar/Documents/REPOS/local-services-lookup/package.json","includedInParent":true,"mtime":1562161593563},{"name":"/home/edgar/Documents/REPOS/local-services-lookup/.babelrc","includedInParent":true,"mtime":1562161593307},{"name":"/home/edgar/Documents/REPOS/local-services-lookup/node_modules/@mapbox/geojsonhint/package.json","includedInParent":true,"mtime":1562161610379}],"generated":{"js":"function rad(x) {\n    return x * Math.PI / 180;\n}\n\nfunction isRingClockwise (coords) {\n    var area = 0;\n    if (coords.length > 2) {\n        var p1, p2;\n        for (var i = 0; i < coords.length - 1; i++) {\n            p1 = coords[i];\n            p2 = coords[i + 1];\n            area += rad(p2[0] - p1[0]) * (2 + Math.sin(rad(p1[1])) + Math.sin(rad(p2[1])));\n        }\n    }\n\n    return area >= 0;\n}\n\nfunction isPolyRHR (coords) {\n    if (coords && coords.length > 0) {\n        if (isRingClockwise(coords[0]))\n            return false;\n        var interiorCoords = coords.slice(1, coords.length);\n        if (!interiorCoords.every(isRingClockwise))\n            return false;\n    }\n    return true;\n}\n\nfunction rightHandRule (geometry) {\n    if (geometry.type === 'Polygon') {\n        return isPolyRHR(geometry.coordinates);\n    } else if (geometry.type === 'MultiPolygon') {\n        return geometry.coordinates.every(isPolyRHR);\n    }\n}\n\nmodule.exports = function validateRightHandRule(geometry, errors) {\n    if (!rightHandRule(geometry)) {\n        errors.push({\n            message: 'Polygons and MultiPolygons should follow the right-hand rule',\n            level: 'message',\n            line: geometry.__line__\n        });\n    }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@mapbox/geojsonhint/lib/rhr.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}}],"sources":{"node_modules/@mapbox/geojsonhint/lib/rhr.js":"function rad(x) {\n    return x * Math.PI / 180;\n}\n\nfunction isRingClockwise (coords) {\n    var area = 0;\n    if (coords.length > 2) {\n        var p1, p2;\n        for (var i = 0; i < coords.length - 1; i++) {\n            p1 = coords[i];\n            p2 = coords[i + 1];\n            area += rad(p2[0] - p1[0]) * (2 + Math.sin(rad(p1[1])) + Math.sin(rad(p2[1])));\n        }\n    }\n\n    return area >= 0;\n}\n\nfunction isPolyRHR (coords) {\n    if (coords && coords.length > 0) {\n        if (isRingClockwise(coords[0]))\n            return false;\n        var interiorCoords = coords.slice(1, coords.length);\n        if (!interiorCoords.every(isRingClockwise))\n            return false;\n    }\n    return true;\n}\n\nfunction rightHandRule (geometry) {\n    if (geometry.type === 'Polygon') {\n        return isPolyRHR(geometry.coordinates);\n    } else if (geometry.type === 'MultiPolygon') {\n        return geometry.coordinates.every(isPolyRHR);\n    }\n}\n\nmodule.exports = function validateRightHandRule(geometry, errors) {\n    if (!rightHandRule(geometry)) {\n        errors.push({\n            message: 'Polygons and MultiPolygons should follow the right-hand rule',\n            level: 'message',\n            line: geometry.__line__\n        });\n    }\n};\n"},"lineCount":47}},"error":null,"hash":"4408e3c89228e54181e6bd754a0a16c1","cacheData":{"env":{}}}