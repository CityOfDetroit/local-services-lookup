{"version":3,"file":"assets/js/vendors.sentry-internal.js","mappings":"uwBAGA,SAASA,EAAmBC,GAC1B,MAAwB,kBAAVA,GAAsBC,SAASD,EAC/C,CAOA,SAASE,EAAYC,GAAa,eAAEC,KAAmBC,IAKrD,OAJID,GAAkBD,EAAYC,eAAiBA,IACjDD,EAAYC,eAAiBA,GAGxBD,EAAYG,WAAW,CAC5BF,oBACGC,GAEP,CCbA,MAAME,EAAmB,WAMzB,SAASC,EAAQC,GACf,OAAOA,EAAO,GAChB,CAEA,SAASC,IAEP,OAAO,EAAAC,QAAU,EAAAA,OAAOC,kBAAoB,EAAAD,OAAOE,WACrD,CAEA,IAGIC,EACAC,EAJAC,EAAqB,EAErBC,EAAgB,CAAC,EASrB,SAASC,IACP,MAAML,EAAcH,IACpB,GAAIG,GAAe,KAA8B,CAE3CA,EAAYM,MACd,EAAAR,OAAOE,YAAYM,KAAK,uBAE1B,MAAMC,GA+FD,SAA6B,EAAGC,aACrC,MAAMC,EAAQD,EAAOE,QAAQC,MAC7B,IAAKF,EACH,OAGF,MAAMG,EAAajB,EAAQ,MACrBkB,EAAYlB,EAAQc,EAAMI,WAChC,KAAeC,EAAA,GAAOC,IAAI,6BAC1BX,EAAmB,IAAI,CAAEjB,MAAOqB,EAAOrB,MAAO6B,KAAM,eACpDZ,EAAc,YAAc,CAAEjB,MAAOyB,EAAaC,EAAWG,KAAM,SAAU,IAxGvEC,GAkED,SAA6B,EAAGT,aACrC,MAAMC,EAAQD,EAAOE,QAAQC,MACxBF,IAIL,KAAeK,EAAA,GAAOC,IAAI,6BAC1BX,EAAmB,IAAI,CAAEjB,MAAOqB,EAAOrB,MAAO6B,KAAM,IACpDd,EAAYO,EAAM,IAzEZS,GA+ED,SAA6B,EAAGV,aACrC,MAAMC,EAAQD,EAAOE,QAAQC,MACxBF,IAIL,KAAeK,EAAA,GAAOC,IAAI,6BAC1BX,EAAmB,IAAI,CAAEjB,MAAOqB,EAAOrB,MAAO6B,KAAM,eACpDf,EAAYQ,EAAM,IArFlB,MAAO,KACLF,IACAU,IACAC,GAAa,CAEjB,CAEA,MAAO,KAAe,CACxB,CAkGA,SAASC,EAAsB7B,GAC7B,MAAMU,EAAcH,IACpB,IAAKG,IAAgB,EAAAF,OAAOE,YAAYoB,aAAe,KAErD,OAGF,KAAeN,EAAA,GAAOC,IAAI,4DAC1B,MAAMH,EAAajB,EAAQ,MAErB0B,EAAqBrB,EAAYoB,aAEvC,IAAIE,EACAC,EAoDJ,GAjDAF,EAAmBG,MAAMrB,GAAoBsB,SAAShB,IACpD,MAAMI,EAAYlB,EAAQc,EAAMI,WAC1Ba,EAAW/B,EAAQc,EAAMiB,UAE/B,KAAuB,eAAnBpC,EAAYqC,IAAuBf,EAAaC,EAAYvB,EAAYC,gBAI5E,OAAQkB,EAAMmB,WACZ,IAAK,cA4IX,SAA6BtC,EAAamB,EAAOG,GAC/C,CAAC,cAAe,WAAY,wBAAyB,YAAa,WAAWa,SAAQI,IACnFC,EAAgCxC,EAAamB,EAAOoB,EAAOjB,EAAW,IAExEkB,EAAgCxC,EAAamB,EAAO,mBAAoBG,EAAY,UAAW,cAC/FkB,EAAgCxC,EAAamB,EAAO,QAASG,EAAY,QAAS,qBAClFkB,EAAgCxC,EAAamB,EAAO,eAAgBG,EAAY,OA8BlF,SAAqBtB,EAAamB,EAAOG,GACvCvB,EAAYC,EAAa,CACvBqC,GAAI,UACJI,OAAQ,+BACRC,YAAa,UACbzC,eAAgBqB,EAAajB,EAAQc,EAAMwB,cAC3CC,aAActB,EAAajB,EAAQc,EAAM0B,eAG3C9C,EAAYC,EAAa,CACvBqC,GAAI,UACJI,OAAQ,+BACRC,YAAa,WACbzC,eAAgBqB,EAAajB,EAAQc,EAAM2B,eAC3CF,aAActB,EAAajB,EAAQc,EAAM0B,cAE7C,CA7CEE,CAAY/C,EAAamB,EAAOG,EAClC,CAnJQ0B,CAAoBhD,EAAamB,EAAOG,GACxCU,EAAyBV,EAAajB,EAAQc,EAAM2B,eACpDb,EAAwBX,EAAajB,EAAQc,EAAMwB,cACnD,MAEF,IAAK,OACL,IAAK,QACL,IAAK,UAAW,EA4GtB,SACE3C,EAEAmB,EACAI,EACAa,EACAd,GAEA,MAAM2B,EAAwB3B,EAAaC,EACrC2B,EAAsBD,EAAwBb,EAEpDrC,EAAYC,EAAa,CACvB0C,YAAavB,EAAMgC,KACnBP,aAAcM,EACdb,GAAIlB,EAAMmB,UACVG,OAAQ,gCACRxC,eAAgBgD,GAIpB,CA/HQG,CAAiBpD,EAAamB,EAAOI,EAAWa,EAAUd,GAG1D,MAAM+B,GAAc,EAAAC,EAAA,KAEdC,EAAepC,EAAMI,UAAY8B,EAAYG,gBAEhC,gBAAfrC,EAAMgC,MAA0BI,IAClC,KAAe/B,EAAA,GAAOC,IAAI,4BAC1BX,EAAkB,GAAI,CAAEjB,MAAOsB,EAAMI,UAAWG,KAAM,gBAErC,2BAAfP,EAAMgC,MAAqCI,IAC7C,KAAe/B,EAAA,GAAOC,IAAI,6BAC1BX,EAAmB,IAAI,CAAEjB,MAAOsB,EAAMI,UAAWG,KAAM,gBAEzD,KACF,CACA,IAAK,WAAY,CACf,MAAM+B,EAAgBtC,EAAW,KAAEuC,QAAQ,EAAAlD,OAAOmD,SAASlB,OAAQ,KAwK3E,SACEzC,EACAmB,EACAsC,EACAlC,EACAa,EACAd,GAIA,GAA4B,mBAAxBH,EAAMyC,eAA8D,UAAxBzC,EAAMyC,cACpD,OAIF,MAAMC,EAAO,CAAC,EACdC,EAAyBD,EAAM1C,EAAO,eAAgB,+BACtD2C,EAAyBD,EAAM1C,EAAO,kBAAmB,gCACzD2C,EAAyBD,EAAM1C,EAAO,kBAAmB,wCACrD,yBAA0BA,IAC5B0C,EAAK,mCAAqC1C,EAAM4C,sBAGlD,MAAM9D,EAAiBqB,EAAaC,EAC9BqB,EAAe3C,EAAiBmC,EAEtCrC,EAAYC,EAAa,CACvB0C,YAAae,EACbb,eACAP,GAAIlB,EAAMyC,cAAgB,YAAYzC,EAAMyC,gBAAkB,iBAC9DnB,OAAQ,gCACRxC,iBACA4D,QAEJ,CAzMQG,CAAkBhE,EAAamB,EAAOsC,EAAclC,EAAWa,EAAUd,GACzE,KACF,EAEF,IAGFT,EAAqBoD,KAAKC,IAAInC,EAAmBoC,OAAS,EAAG,GAuM/D,SAAyBnE,GACvB,MAAMoE,EAAY,EAAA5D,OAAO4D,UACzB,IAAKA,EACH,OAIF,MAAMC,EAAaD,EAAUC,WACzBA,IACEA,EAAWC,eACbtE,EAAYuE,OAAO,0BAA2BF,EAAWC,eAGvDD,EAAWG,MACbxE,EAAYuE,OAAO,iBAAkBF,EAAWG,MAG9C5E,EAAmByE,EAAWI,OAChC3D,EAAc,kBAAoB,CAAEjB,MAAOwE,EAAWI,IAAK/C,KAAM,iBAIjE9B,EAAmBwE,EAAUM,eAC/B1E,EAAYuE,OAAO,eAAgB,GAAGH,EAAUM,mBAG9C9E,EAAmBwE,EAAUO,sBAC/B3E,EAAYuE,OAAO,sBAAuBK,OAAOR,EAAUO,qBAE/D,CAlOEE,CAAgB7E,GAGO,aAAnBA,EAAYqC,GAAmB,CAGK,kBAA3BL,IACT,KAAeR,EAAA,GAAOC,IAAI,8BAC1BX,EAAoB,KAAI,CACtBjB,MAA+D,KAAvDmC,EAAyBhC,EAAYC,gBAC7CyB,KAAM,eAG6B,kBAA1BO,GAAsCA,GAAyBD,IAGxElB,EAAc,oBAAsB,CAClCjB,MAA0D,KAAlDmC,EAAyBC,GACjCP,KAAM,iBAKZ,CAAC,MAAO,KAAM,OAAOS,SAAQgB,IAC3B,IAAKrC,EAAcqC,IAAS7B,GAActB,EAAYC,eACpD,OAKF,MAAM6E,EAAWhE,EAAcqC,GAAMtD,MAC/BkF,EAAuBzD,EAAajB,EAAQyE,GAG5CE,EAAkBf,KAAKgB,IAA0D,KAArDF,EAAuB/E,EAAYC,iBAC/DiF,EAAQF,EAAkBF,EAEhC,KAAetD,EAAA,GAAOC,IAAI,6BAA6B0B,UAAa2B,QAAeE,MAAoBE,MACvGpE,EAAcqC,GAAMtD,MAAQmF,CAAe,IAG7C,MAAMG,EAAUrE,EAAc,YAC1BqE,GAAWrE,EAAmB,MAEhCf,EAAYC,EAAa,CACvB0C,YAAa,oBACbE,aAAcuC,EAAQtF,MAAQQ,EAAQS,EAAmB,IAAEjB,OAC3DwC,GAAI,YACJI,OAAQ,0BACRxC,eAAgBkF,EAAQtF,eAInBiB,EAAc,aAKjB,QAASA,UACNA,EAAcsE,IAGvBC,OAAOC,KAAKxE,GAAeqB,SAAQoD,IACjCvF,EAAYwF,eACVD,EACAzE,EAAcyE,GAAiB1F,MAC/BiB,EAAcyE,GAAiB7D,KAChC,IAkKP,SAAwB1B,GAClBW,IACF,KAAea,EAAA,GAAOC,IAAI,kCAItBd,EAAU8E,SACZzF,EAAYuE,OAAO,eAAe,QAAiB5D,EAAU8E,UAG3D9E,EAAU+E,IACZ1F,EAAYuE,OAAO,SAAU5D,EAAU+E,IAGrC/E,EAAUgF,KAEZ3F,EAAYuE,OAAO,UAAW5D,EAAUgF,IAAIC,OAAO1D,MAAM,EAAG,MAG9DlC,EAAYuE,OAAO,WAAY5D,EAAUkF,OAIvCjF,GAAaA,EAAUkF,UACzB,KAAetE,EAAA,GAAOC,IAAI,kCAC1Bb,EAAUkF,QAAQ3D,SAAQ,CAAC4D,EAAQC,IACjChG,EAAYuE,OAAO,cAAcyB,EAAQ,KAAK,QAAiBD,EAAOE,SAG5E,CA5LIC,CAAelG,EACjB,CAEAW,OAAYwF,EACZvF,OAAYuF,EACZrF,EAAgB,CAAC,CACnB,CAsCA,SAAS0B,EACPxC,EAEAmB,EACAoB,EACAjB,EACAoB,EACA0D,GAEA,MAAMC,EAAMD,EAAYjF,EAAMiF,GAAejF,EAAM,GAAGoB,QAChD+D,EAAQnF,EAAM,GAAGoB,UAClB+D,GAAUD,GAGftG,EAAYC,EAAa,CACvBqC,GAAI,UACJI,OAAQ,+BACRC,YAAaA,GAAeH,EAC5BtC,eAAgBqB,EAAajB,EAAQiG,GACrC1D,aAActB,EAAajB,EAAQgG,IAEvC,CA6HA,SAASvC,EACPD,EACA1C,EACAoF,EACAC,GAEA,MAAMC,EAAWtF,EAAMoF,GACP,MAAZE,GAAoBA,EAAWrG,IACjCyD,EAAK2C,GAAWC,EAEpB,C,mFC3dA,SAASC,EACPC,EACAC,EACAC,EACAC,EACAC,EAAa,qBAEb,KAAK,EAAAC,EAAA,OAAwBL,EAAYM,UACvC,OAGF,MAAMC,EAAyBN,EAAiBD,EAAYM,UAAUtB,KAEtE,GAAIgB,EAAY/D,cAAgBsE,EAAwB,CACtD,MAAMC,EAASR,EAAYM,UAAUG,OACrC,IAAKD,EAAQ,OAEb,MAAME,EAAOP,EAAMK,GACnB,GAAIE,EAAM,CACR,GAAIV,EAAYW,SAAU,CACxBD,EAAKE,cAAcZ,EAAYW,SAASE,QAExC,MAAMC,EACJd,EAAYW,UAAYX,EAAYW,SAASI,SAAWf,EAAYW,SAASI,QAAQC,IAAI,kBAE3F,GAAIF,EAAe,CACjB,MAAMG,EAAmBC,SAASJ,GAC9BG,EAAmB,GACrBP,EAAKS,QAAQ,+BAAgCF,EAEjD,CACF,MAAWjB,EAAYoB,OACrBV,EAAKW,UAAU,kBAEjBX,EAAKY,gBAGEnB,EAAMK,EACf,CACA,MACF,CAEA,MAAMe,GAAM,UACNC,EAAQD,EAAIE,WACZC,EAASH,EAAII,YACbC,EAAaJ,EAAMK,WAEnB,OAAEC,EAAM,IAAE9C,GAAQgB,EAAYM,UAE9BI,EACJH,GAA0BqB,EACtBA,EAAWpI,WAAW,CACpB0D,KAAM,CACJ8B,MACAnB,KAAM,QACN,cAAeiE,GAEjB/F,YAAa,GAAG+F,KAAU9C,IAC1BtD,GAAI,cACJI,OAAQsE,SAEVZ,EAON,GALIkB,IACFV,EAAYM,UAAUG,OAASC,EAAKF,OACpCL,EAAMO,EAAKF,QAAUE,GAGnBR,EAAoBF,EAAYM,UAAUtB,MAAQ0C,EAAQ,CAC5D,MAAMK,EAAU/B,EAAYgC,KAAK,GAGjChC,EAAYgC,KAAK,GAAKhC,EAAYgC,KAAK,IAAM,CAAC,EAG9C,MAAMC,EAAUjC,EAAYgC,KAAK,GAGjCC,EAAQlB,QASZ,SACEgB,EACAL,EACAF,EACAS,EAGAC,GAEA,MAAMxB,EAAOwB,GAAeV,EAAMK,UAE5BxI,EAAcqH,GAAQA,EAAKrH,aAE3B,QAAE8I,EAAO,QAAEC,EAAO,IAAEC,GAAQb,EAAMc,wBAElCC,EAAoB7B,EAAOA,EAAK8B,iBAAkB,QAA0BL,OAAS3C,EAAW4C,GAChGK,EAAyBpJ,EAC3BA,EAAYqJ,4BACZL,IAEE,OAAoCF,EAAST,EAAQF,GAErDmB,GAAsB,QAA4CF,GAElE1B,EACe,qBAAZ6B,UAA2B,EAAAC,EAAA,IAAad,EAASa,SAAW,EAAW7B,QAAUkB,EAAQlB,QAElG,GAAKA,EAEE,IAAuB,qBAAZ+B,UAA2B,EAAAD,EAAA,IAAa9B,EAAS+B,SAAU,CAC3E,MAAMC,EAAa,IAAID,QAAQ/B,GAU/B,OARAgC,EAAWC,OAAO,eAAgBT,GAE9BI,GAGFI,EAAWC,OAAO,KAAqBL,GAGlCI,CACT,CAAO,GAAIE,MAAMC,QAAQnC,GAAU,CACjC,MAAMgC,EAAa,IAAIhC,EAAS,CAAC,eAAgBwB,IAQjD,OANII,GAGFI,EAAWI,KAAK,CAAC,KAAqBR,IAGjCI,CACT,CAAO,CACL,MAAMK,EAAwB,YAAarC,EAAUA,EAAQsC,aAAU7D,EACjE8D,EAAoB,GAY1B,OAVIL,MAAMC,QAAQE,GAChBE,EAAkBH,QAAQC,GACjBA,GACTE,EAAkBH,KAAKC,GAGrBT,GACFW,EAAkBH,KAAKR,GAGlB,IACF,EACH,eAAgBJ,EAChBc,QAASC,EAAkB9F,OAAS,EAAI8F,EAAkBC,KAAK,UAAO/D,EAE1E,EA1CE,MAAO,CAAE,eAAgB+C,EAAmBc,QAASV,EA2CzD,CAhFsBa,CAAgCzB,EAASL,EAAQF,EAAOS,EAASvB,EACrF,CAEA,OAAOA,CACT,CCnFA,MAAM+C,EAAoC,CAAC,YAAa,aAIlDC,EAAuC,CAC3CC,YAAY,EACZC,UAAU,EACVC,mBAAmB,EAEnBC,eAAgBL,EAChBM,wBAAyBN,GAI3B,SAASO,EAA2BC,GAClC,MAAM,WACJN,EAAU,SACVC,EAAQ,wBAERG,EAAuB,eAEvBD,EAAc,2BACdI,EAA0B,kBAC1BL,GACE,CACFF,WAAYD,EAAqCC,WACjDC,SAAUF,EAAqCE,YAC5CK,GAGChE,EACkC,oBAA/BiE,EAA4CA,EAA8BC,IAAM,EAKnFC,EAAkCpF,GA4H1C,SAA6BA,EAAK+E,GAChC,OAAO,EAAAM,EAAA,IAAyBrF,EAAK+E,GAA2BN,EAClE,CA7HIvD,CAAoBlB,EAAK+E,GAA2BD,GAEhD3D,EAAQ,CAAC,EAEXwD,IACF,QAA+B3D,IAC7B,MAAMsE,EAAcvE,EAAuBC,EAAaC,EAAkBmE,EAAgCjE,GACtG0D,GAAqBS,GACvBC,EAAeD,EACjB,IAIAV,IACF,SAA6B5D,IAC3B,MAAMsE,EAsHZ,SACEtE,EACAC,EACAC,EACAC,GAEA,MAAMqE,EAAMxE,EAAYwE,IAClBC,EAAgBD,GAAOA,EAAI,MAEjC,KAAK,EAAAnE,EAAA,OAAwBmE,GAAOA,EAAIE,yBAA2BD,EACjE,OAGF,MAAMlE,EAAyBN,EAAiBwE,EAAczF,KAG9D,GAAIgB,EAAY/D,cAAgBsE,EAAwB,CACtD,MAAMC,EAASgE,EAAIG,uBACnB,IAAKnE,EAAQ,OAEb,MAAME,EAAOP,EAAMK,GAQnB,YAPIE,QAAsClB,IAA9BiF,EAAcG,cACxBlE,EAAKE,cAAc6D,EAAcG,aACjClE,EAAKY,gBAGEnB,EAAMK,IAGjB,CAEA,MAAMe,GAAM,UACNC,EAAQD,EAAIE,WACZG,EAAaJ,EAAMK,UAEnBnB,EACJH,GAA0BqB,EACtBA,EAAWpI,WAAW,CACpB0D,KAAM,CACJW,KAAM,MACN,cAAe4G,EAAc3C,OAC7B9C,IAAKyF,EAAczF,KAErBjD,YAAa,GAAG0I,EAAc3C,UAAU2C,EAAczF,MACtDtD,GAAI,cACJI,OAAQ,2BAEV0D,EAEFkB,IACF8D,EAAIG,uBAAyBjE,EAAKF,OAClCL,EAAMqE,EAAIG,wBAA0BjE,GAGtC,GAAI8D,EAAIK,kBAAoB3E,EAAoBuE,EAAczF,KAC5D,GAAI0B,EAAM,CACR,MAAMrH,EAAcqH,GAAQA,EAAKrH,YAC3BoJ,EAAyBpJ,GAAeA,EAAYqJ,4BACpDC,GAAsB,QAA4CF,GACxEqC,EAAeN,EAAK9D,EAAK8B,gBAAiBG,EAC5C,KAAO,CACL,MAAMjB,EAASH,EAAII,aACb,QAAEQ,EAAO,QAAEC,EAAO,IAAEC,GAAQb,EAAMc,wBAClCC,GAAoB,QAA0BJ,OAAS3C,EAAW4C,GAClEK,EACJJ,IAAQX,GAAS,OAAoCS,EAAST,EAAQF,QAAShC,GAEjFsF,EAAeN,EAAKjC,GADQ,QAA4CE,GAE1E,CAGF,OAAO/B,CACT,CA9L0BqE,CAAY/E,EAAaC,EAAkBmE,EAAgCjE,GAC3F0D,GAAqBS,GACvBC,EAAeD,EACjB,GAGN,CAiBA,SAASC,EAAe7D,GACtB,MAAM1B,EAAM0B,EAAKxD,KAAK8B,IAEtB,IAAKA,EACH,OAGF,MAAMgG,GAAU,QAAqC,YAAY,EAAGvK,cAClEA,EAAQe,SAAQhB,IACd,GAxBN,SAAqCA,GACnC,MACsB,aAApBA,EAAMmB,WACN,kBAAmBnB,GACiB,kBAA7B,EAASyK,kBACS,UAAxBzK,EAAMyC,eAAqD,mBAAxBzC,EAAMyC,cAE9C,CAiBUiI,CAA4B1K,IAAUA,EAAMgC,KAAK2I,SAASnG,GAAM,EA8C1E,SAAuCoG,GACrC,MAAM,KAAE5I,EAAI,QAAE6I,GA9BhB,SAAgCJ,GAC9B,IAAIzI,EAAO,UACP6I,EAAU,UACVC,EAAQ,GACZ,IAAK,MAAMC,KAAQN,EAAiB,CAElC,GAAa,MAATM,EAAc,EACf/I,EAAM6I,GAAWJ,EAAgBO,MAAM,KACxC,KACF,CAEA,IAAKC,MAAMC,OAAOH,IAAQ,CACxB/I,EAAiB,MAAV8I,EAAgB,OAASA,EAChCD,EAAUJ,EAAgBO,MAAMF,GAAO,GACvC,KACF,CACAA,GAASC,CACX,CACID,IAAUL,IAEZzI,EAAO8I,GAET,MAAO,CAAE9I,OAAM6I,UACjB,CAO4BM,CAAuBP,EAAeH,iBAE1DW,EAAiB,GAIvB,GAFAA,EAAezC,KAAK,CAAC,2BAA4BkC,GAAU,CAAC,wBAAyB7I,KAEhF,KACH,OAAOoJ,EAET,MAAO,IACFA,EACH,CAAC,8BAA+BC,EAAgBT,EAAeU,gBAC/D,CAAC,2BAA4BD,EAAgBT,EAAeW,aAC5D,CAAC,mCAAoCF,EAAgBT,EAAeY,oBACpE,CAAC,iCAAkCH,EAAgBT,EAAea,kBAClE,CAAC,6BAA8BJ,EAAgBT,EAAec,eAC9D,CAAC,uCAAwCL,EAAgBT,EAAee,wBACxE,CAAC,8BAA+BN,EAAgBT,EAAegB,aAC/D,CAAC,6BAA8BP,EAAgBT,EAAepJ,eAC9D,CAAC,8BAA+B6J,EAAgBT,EAAejJ,gBAC/D,CAAC,4BAA6B0J,EAAgBT,EAAelJ,cAEjE,EApEyBmK,CAA8B7L,GACtCgB,SAAQ0B,GAAQwD,EAAKS,WAAWjE,KAGzCoJ,WAAWtB,EACb,IACA,GAEN,CAiCA,SAASa,EAAgBlM,EAAO,GAC9B,QAAS,MAAgCI,YAAYY,YAAchB,GAAQ,GAC7E,CAoHA,SAASmL,EACPN,EACAjC,EACAI,GAEA,IAEE6B,EAAIK,iBAAiB,eAAgBtC,GACjCI,GAKF6B,EAAIK,iBAAiB,KAAqBlC,EAE9C,CAAE,MAAOwB,GAET,CACF,C,aCpQA,MAIMoC,EAAkC,IACnC,KACHC,4BAA4B,EAC5BC,uBCTF,SACEC,EACAC,GAA6B,EAC7BC,GAAmC,GAEnC,IAAK,EAAA/M,SAAW,EAAAA,OAAOmD,SAErB,YADA,KAAenC,EAAA,GAAOgM,KAAK,yEAI7B,IAEIC,EAFAC,EAAc,EAAAlN,OAAOmD,SAASgK,KAG9BL,IACFG,EAAoBJ,EAAuB,CACzClK,KAAM,EAAA3C,OAAOmD,SAASiK,SAEtB3N,eAAgB,KAA+B,KAA+B,SAAOkG,EACrF9D,GAAI,WACJI,OAAQ,wBACRoL,SAAU,CAAE9H,OAAQ,UAIpBwH,IACF,IAAAO,IAAiC,EAAGC,KAAIC,gBAUzB7H,IAAT6H,GAAsBN,IAA4C,IAA7BA,EAAYO,QAAQF,GAC3DL,OAAcvH,EAIZ6H,IAASD,IACXL,OAAcvH,EACVsH,IACF,KAAejM,EAAA,GAAOC,IAAI,oDAAoDgM,EAAkBpL,MAEhGoL,EAAkBxF,UAEpBwF,EAAoBJ,EAAuB,CACzClK,KAAM,EAAA3C,OAAOmD,SAASiK,SACtBvL,GAAI,aACJI,OAAQ,0BACRoL,SAAU,CAAE9H,OAAQ,SAExB,GAGN,ED9CEwH,kCAAkC,EAClCD,4BAA4B,EAC5BY,gBAAgB,EAChBC,aAAc,CAAC,KACZ9D,GAUL,MAAM+D,EAYH,WAAAC,CAAYzD,GACX0D,KAAKnL,KAnC8B,iBAoCnCmL,KAAKC,gCAAiC,GAEtC,SAEI,MACFD,KAAKC,kCACH3D,IAECA,EAASF,0BAA2BE,EAASH,iBAIlD6D,KAAK1F,QAAU,IACVsE,KACAtC,QAK4CzE,IAA7CmI,KAAK1F,QAAQuF,aAAaD,iBAC5BI,KAAK1F,QAAQsF,eAAiBI,KAAK1F,QAAQuF,aAAaD,gBAOtDtD,IAAaA,EAASF,yBAA2BE,EAASH,iBAE5D6D,KAAK1F,QAAQ8B,wBAA0BE,EAASH,gBAGlD6D,KAAKE,kBAAoBzN,IACrBuN,KAAK1F,QAAQsF,iBHnBnB,QAAqC,YAAY,EAAG9M,cAClD,IAAK,MAAMD,KAASC,EAAS,CAC3B,MAAMpB,GAAc,UACpB,IAAKA,EACH,OAEF,MAAMuB,EAAYlB,EAAS,EAA6B,GAAIc,EAAMI,WAC5Da,EAAW/B,EAAQc,EAAMiB,UAE/BpC,EAAYG,WAAW,CACrBuC,YAAa,yBACbL,GAAI,eACJI,OAAQ,0BACRxC,eAAgBsB,EAChBqB,aAAcrB,EAAYa,GAE9B,KGMIkM,KAAK1F,QAAQuF,aAAaM,qBHEhC,QAAqC,SAAS,EAAGrN,cAC/C,IAAK,MAAMD,KAASC,EAAS,CAC3B,MAAMpB,GAAc,UACpB,IAAKA,EACH,OAGF,GAAmB,UAAfmB,EAAMgC,KAAkB,CAC1B,MAAM5B,EAAYlB,EAAS,EAA6B,GAAIc,EAAMI,WAC5Da,EAAW/B,EAAQc,EAAMiB,UAE/BpC,EAAYG,WAAW,CACrBuC,aAAa,QAAiBvB,EAAMuN,QACpCrM,GAAI,kBAAkBlB,EAAMgC,OAC5BV,OAAQ,0BACRxC,eAAgBsB,EAChBqB,aAAcrB,EAAYa,GAE9B,CACF,IGlBF,CAKC,SAAAuM,CAAU7D,EAAG8D,GACZN,KAAKO,eAAiBD,EACtB,MACMvG,EADMuG,IACOtG,YACbwG,EAAgBzG,GAAUA,EAAO0G,cAGrC3B,uBAAwB4B,EAAiB,iCACzCzB,EAAgC,2BAChCD,EAA0B,2BAC1BH,EAA0B,WAC1B7C,EAAU,SACVC,EAAQ,2BACRM,EAA0B,kBAC1BL,EAAiB,aACjB2D,GACEG,KAAK1F,QAEHqG,EAAuCH,GAAiBA,EAAcpE,wBAYtEA,EAA0BuE,GAAwCX,KAAK1F,QAAQ8B,wBACjF,KAAe4D,KAAKC,gCAAkCU,GACxDzN,EAAA,GAAOgM,KACL,0KAIJwB,GACGE,IACC,MAAMlP,EAAcsO,KAAKa,wBAAwBD,GAKjD,OAHAZ,KAAK1F,QAAQuF,aAAaiB,yBACxBd,KAAK1F,QAAQuF,aAAaiB,wBAAwBpP,EAAakP,EAASN,GAEnE5O,CAAW,GAEpBsN,EACAC,GAGEJ,IEjIF,EAAA3M,QAAU,EAAAA,OAAO6O,SACnB,EAAA7O,OAAO6O,SAAS5O,iBAAiB,oBAAoB,KACnD,MAAMgN,GAAoB,UAC1B,GAAI,EAAAjN,OAAO6O,SAASC,QAAU7B,EAAmB,CAC/C,MAAM8B,EAAa,YAEnB,KACE/N,EAAA,GAAOC,IACL,0BAA0B8N,+CAAwD9B,EAAkBpL,MAInGoL,EAAkBjG,QACrBiG,EAAkBzF,UAAUuH,GAE9B9B,EAAkBlJ,OAAO,mBAAoB,mBAC7CkJ,EAAkBxF,QACpB,KAGF,KAAezG,EAAA,GAAOgM,KAAK,uFFiHvBW,EAAaM,oBACfH,KAAKkB,+BAGP7E,EAA2B,CACzBL,aACAC,WACAG,0BACAG,6BACAL,qBAEJ,CAGC,uBAAA2E,CAAwBD,GACvB,IAAKZ,KAAKO,eAGR,YAFA,KACErN,EAAA,GAAOgM,KAAK,4BAA4B0B,EAAQ7M,sDAIpD,MAAM6F,EAAMoG,KAAKO,kBAEX,eAAEY,EAAc,YAAEC,EAAW,aAAEC,EAAY,kBAAEC,GAAsBtB,KAAK1F,QAExEiH,EAAuC,aAAfX,EAAQ7M,GAEhCyN,EAAcD,EAAwBE,EAAe,gBAAkB,GACvE/F,EAAU6F,EAAwBE,EAAe,WAAa,IAC9D,gBAAEC,EAAe,uBAAE5G,EAAsB,mBAAE6G,IAAuB,EAAAC,EAAA,IACtEJ,EACA9F,GAGImG,EAAkB,IACnBjB,KACAc,EACHnC,SAAU,IACLqB,EAAQrB,SACXzE,uBAAwB4G,IAAoB5G,EAAyB,CAAC,EAAIA,GAE5EgH,SAAS,GAGLC,EAA4C,oBAAnBZ,EAAgCA,EAAeU,GAAmBA,EAI3FG,OAAmCnK,IAApBkK,EAAgC,IAAKF,EAAiBpH,SAAS,GAAUsH,EAG9FC,EAAazC,SACXyC,EAAanN,OAASgN,EAAgBhN,KAClC,IAAKmN,EAAazC,SAAU9H,OAAQ,UACpCuK,EAAazC,SAEnBS,KAAKiC,iBAAmBD,EAAanN,KACrCmL,KAAKkC,mBAAqBF,EAAazC,UAAYyC,EAAazC,SAAS9H,QAE5C,IAAzBuK,EAAavH,SACf,KAAevH,EAAA,GAAOC,IAAI,2BAA2B6O,EAAajO,6CAGpE,KAAeb,EAAA,GAAOC,IAAI,sBAAsB6O,EAAajO,2BAE7D,MAAM,SAAEsB,GAAa,EAAAnD,OAEfiQ,GAAkB,OACtBvI,EACAoI,EACAZ,EACAC,GACA,EACA,CAAEhM,YACFiM,GAGIzH,EAAQD,EAAIE,WAsBlB,OAlBIyH,GAAyBG,EAC3B7H,EAAMuI,sBAAsBT,GAI5B9H,EAAMuI,sBAAsB,CAC1B5H,QAAS2H,EAAgB3H,QACzB3B,OAAQsJ,EAAgBtJ,OACxBwJ,aAAcF,EAAgBE,aAC9B5H,QAAS0H,EAAgB1H,UAI7B0H,EAAgBG,8BAA6B5Q,IAC3CsO,KAAKE,oBACL3M,EAAsB7B,EAAY,IAG7ByQ,CACT,CAGC,4BAAAjB,GACC,IAAIqB,EACJ,MAAMC,EAAiC,KACrC,MAAM,YAAEpB,EAAW,aAAEC,EAAY,kBAAEC,GAAsBtB,KAAK1F,QACxDvG,EAAK,kBAEL0O,GAAqB,UAC3B,GAAIA,GAAsBA,EAAmB1O,IAAM,CAAC,aAAc,YAAY2O,SAASD,EAAmB1O,IAKxG,YAJA,KACEb,EAAA,GAAOgM,KACL,4BAA4BnL,+EAWlC,GANIwO,IACFA,EAA+BI,gBAAgB,0BAC/CJ,EAA+B5I,SAC/B4I,OAAiC1K,IAG9BmI,KAAKO,eAER,YADA,KAAerN,EAAA,GAAOgM,KAAK,4BAA4BnL,qDAIzD,IAAKiM,KAAKiC,iBAER,YADA,KAAe/O,EAAA,GAAOgM,KAAK,4BAA4BnL,uDAIzD,MAAM6F,EAAMoG,KAAKO,kBACX,SAAElL,GAAa,EAAAnD,OAEf0O,EAAU,CACd/L,KAAMmL,KAAKiC,iBACXlO,KACA+N,SAAS,EACTvC,SAAU,CACR9H,OAAQuI,KAAKkC,oBAAsB,QAIvCK,GAAiC,OAC/B3I,EACAgH,EACAQ,EACAC,GACA,EACA,CAAEhM,YACFiM,EACD,EAGH,CAAC,SAASzN,SAAQqC,IAChB/D,iBAAiB+D,EAAMsM,EAAgC,CAAEI,MAAM,EAAOC,SAAS,GAAO,GAE1F,EAIF,SAASpB,EAAeqB,GAItB,MAAMC,GAAU,QAAc,aAAaD,MAE3C,OAAOC,EAAUA,EAAQC,aAAa,gBAAanL,CACrD,C,+FG1TA,MAAMoL,EAAe,CACnBC,EACAtQ,EACAuQ,KAEA,IAAIC,EACAxM,EACJ,OAAQyM,IACFzQ,EAAOrB,OAAS,IACd8R,GAAeF,KACjBvM,EAAQhE,EAAOrB,OAAS6R,GAAa,IAMjCxM,QAAuBiB,IAAduL,KACXA,EAAYxQ,EAAOrB,MACnBqB,EAAOgE,MAAQA,EACfsM,EAAStQ,IAGf,CACD,E,cCFH,MCkBM0Q,EAAqB,IACrB,EAAApR,OAAOqR,wBAEP,EAAArR,OAAOE,cACLA,YAAYoR,kBAAoBpR,YAAYoR,iBAAiB,cAAc,IAzBnC,MAE9C,MAAMC,EAAS,EAAAvR,OAAOE,YAAYqR,OAE5BvN,EAAO,EAAAhE,OAAOE,YAAYsR,WAAWxN,KAErCyN,EAAkB,CACtB3P,UAAW,aACXf,UAAW,EACXiD,KAAc,GAARA,EAAY,eAA0B,IAATA,EAAa,SAAW,YAG7D,IAAK,MAAM+B,KAAOwL,EACJ,oBAARxL,GAAqC,WAARA,IAE/B0L,EAAgB1L,GAAOtC,KAAKC,IAAK6N,EAAOxL,GAAUwL,EAAOG,gBAAiB,IAG9E,OAAOD,CAAgB,EAQjBE,IAGG,EAAA3R,OAAOE,aAAeA,YAAYoR,kBAAoBpR,YAAYoR,iBAAiB,cAAc,GC7BtGM,EAAqB,KACzB,MAAMC,EAAWT,IACjB,OAAQS,GAAYA,EAASC,iBAAoB,CAAC,ECC9CC,EAAa,CAACpP,EAAMtD,KACxB,MAAMwS,EAAWT,IACjB,IAAIY,EAAiB,WAUrB,OARIH,IAEAG,EADE,EAAAhS,OAAO6O,SAASoD,cAAgBL,IAAuB,EACxC,YAEAC,EAAS7N,KAAKd,QAAQ,KAAM,MAI1C,CACLP,OACAtD,MAAwB,qBAAVA,GAAyB,EAAIA,EAC3C6S,OAAQ,OACRxN,MAAO,EACP9D,QAAS,GACTsE,GHjBK,MAAMiN,KAAKC,SAAS3O,KAAK4O,MAAsB,cAAhB5O,KAAK6O,UAAyB,OGkBlEN,iBACD,ECjCGO,EAAU,CACdvO,EACAgN,EACAwB,KAEA,IACE,GAAIC,oBAAoBC,oBAAoBlC,SAASxM,GAAO,CAC1D,MAAM2O,EAAK,IAAIF,qBAAoBG,IACjC5B,EAAS4B,EAAKtR,aAAc,IAW9B,OATAqR,EAAGJ,QACD1N,OAAOgO,OACL,CACE7O,OACA8O,UAAU,GAEZN,GAAQ,CAAC,IAGNG,CACT,CACF,CAAE,MAAOI,GAET,CACM,E,aCUR,MAAMC,EAASC,IACb,MAAMvS,EAASqR,EAAW,MAAO,GACjC,IAAImB,EAEAC,EAAe,EACfC,EAAiB,GAGrB,MAAMC,EAAiBzS,IACrBA,EAAQe,SAAQhB,IAEd,IAAKA,EAAM2S,eAAgB,CACzB,MAAMC,EAAoBH,EAAe,GACnCI,EAAmBJ,EAAeA,EAAezP,OAAS,GAM9DwP,GAC0B,IAA1BC,EAAezP,QACfhD,EAAMI,UAAYyS,EAAiBzS,UAAY,KAC/CJ,EAAMI,UAAYwS,EAAkBxS,UAAY,KAEhDoS,GAAgBxS,EAAMtB,MACtB+T,EAAe9J,KAAK3I,KAEpBwS,EAAexS,EAAMtB,MACrB+T,EAAiB,CAACzS,IAKhBwS,EAAezS,EAAOrB,QACxBqB,EAAOrB,MAAQ8T,EACfzS,EAAOE,QAAUwS,EACbF,GACFA,IAGN,IACA,EAGEP,EAAKJ,EAAQ,eAAgBc,GACnC,GAAIV,EAAI,CACNO,EAASnC,EAAakC,EAAUvS,GAEhC,MAAM+S,EAAgB,KACpBJ,EAAcV,EAAGe,eACjBR,GAAO,EAAK,EAKd,OAFA,EAAAS,EAAA,GAASF,GAEFA,CACT,CAEM,E,cCrER,MAAMG,EAASX,IACb,MAAMY,GAAoB,EAAA/Q,EAAA,KACpBpC,EAASqR,EAAW,OAE1B,IAAImB,EAEJ,MAAMY,EAAenT,IAEfA,EAAMI,UAAY8S,EAAkB7Q,kBACtCtC,EAAOrB,MAAQsB,EAAMoT,gBAAkBpT,EAAMI,UAC7CL,EAAOE,QAAQ0I,KAAK3I,GACpBuS,GAAO,GACT,EAGIG,EAAiBzS,IACrB,EAAWe,QAAQmS,EAAY,EAG3BnB,EAAKJ,EAAQ,cAAec,GAClCH,EAASnC,EAAakC,EAAUvS,GAE5BiS,IACF,EAAAgB,EAAA,IAAS,KACPN,EAAcV,EAAGe,eACjBf,EAAGqB,YAAY,IACd,EACL,ECnCIC,EAAoB,CAAC,EAQrBC,EAASjB,IACb,MAAMY,GAAoB,EAAA/Q,EAAA,KACpBpC,EAASqR,EAAW,OAC1B,IAAImB,EAEJ,MAAMG,EAAiBzS,IACrB,MAAMuT,EAAYvT,EAAQA,EAAQ+C,OAAS,GAC3C,GAAIwQ,EAAW,CAKb,MAAM9U,EAAQoE,KAAKC,IAAIyQ,EAAUpT,UAAY6Q,IAAsB,GAG/DvS,EAAQwU,EAAkB7Q,kBAC5BtC,EAAOrB,MAAQA,EACfqB,EAAOE,QAAU,CAACuT,GAClBjB,IAEJ,GAGIP,EAAKJ,EAAQ,2BAA4Bc,GAE/C,GAAIV,EAAI,CACNO,EAASnC,EAAakC,EAAUvS,GAEhC,MAAM+S,EAAgB,KACfQ,EAAkBvT,EAAOwE,MAC5BmO,EAAcV,EAAGe,eACjBf,EAAGqB,aACHC,EAAkBvT,EAAOwE,KAAM,EAC/BgO,GAAO,GACT,EAYF,MANA,CAAC,UAAW,SAASvR,SAAQqC,IAC3B/D,iBAAiB+D,EAAMyP,EAAe,CAAE/C,MAAM,EAAMC,SAAS,GAAO,KAGtE,EAAAgD,EAAA,GAASF,GAAe,GAEjBA,CACT,CAEM,ECzEFW,EAAW,CAAC,EACZC,EAAe,CAAC,EAEtB,IAAIC,EACAC,EACAC,EAMJ,SAASC,EAA6BzD,GACpC,OAAO0D,EAAkB,MAAO1D,EAAU2D,EAAeL,EAC3D,CAMA,SAASM,EAA6B5D,GACpC,OAAO0D,EAAkB,MAAO1D,EAAU6D,EAAeL,EAC3D,CAMA,SAASM,EAA6B9D,GACpC,OAAO0D,EAAkB,MAAO1D,EAAU+D,EAAeR,EAC3D,CAOA,SAASS,EACPhR,EACAgN,GASA,OAPAiE,EAAWjR,EAAMgN,GAEZqD,EAAarQ,MA4EpB,SAAuCA,GACrC,MAAMoE,EAAU,CAAC,EAGJ,UAATpE,IACFoE,EAAQ8M,kBAAoB,GAG9B3C,EACEvO,GACApD,IACEuU,EAAgBnR,EAAM,CAAEpD,WAAU,GAEpCwH,EAEJ,CA1FIgN,CAA8BpR,GAC9BqQ,EAAarQ,IAAQ,GAGhBqR,EAAmBrR,EAAMgN,EAClC,CAGA,SAASmE,EAAgBnR,EAAMX,GAC7B,MAAMiS,EAAelB,EAASpQ,GAE9B,GAAKsR,GAAiBA,EAAa3R,OAInC,IAAK,MAAM4R,KAAWD,EACpB,IACEC,EAAQlS,EACV,CAAE,MAAO0P,GACP,KACE/R,EAAA,GAAOuG,MACL,0DAA0DvD,aAAe,QAAgBuR,aACzFxC,EAEN,CAEJ,CAEA,SAAS4B,IACP3B,GAAMtS,IACJyU,EAAgB,MAAO,CACrBzU,WAEF4T,EAAe5T,CAAM,GAEzB,CAEA,SAASqU,IACPnB,GAAMlT,IACJyU,EAAgB,MAAO,CACrBzU,WAEF6T,EAAe7T,CAAM,GAEzB,CAEA,SAASmU,IACPX,GAAMxT,IACJyU,EAAgB,MAAO,CACrBzU,WAEF8T,EAAe9T,CAAM,GAEzB,CAEA,SAASgU,EACP1Q,EACAgN,EACAwE,EACAC,GAaA,OAXAR,EAAWjR,EAAMgN,GAEZqD,EAAarQ,KAChBwR,IACAnB,EAAarQ,IAAQ,GAGnByR,GACFzE,EAAS,CAAEtQ,OAAQ+U,IAGdJ,EAAmBrR,EAAMgN,EAClC,CAmBA,SAASiE,EAAWjR,EAAMuR,GACxBnB,EAASpQ,GAAQoQ,EAASpQ,IAAS,GAClCoQ,EAASpQ,GAAQsF,KAAKiM,EACzB,CAGA,SAASF,EAAmBrR,EAAMgN,GAChC,MAAO,KACL,MAAMsE,EAAelB,EAASpQ,GAE9B,IAAKsR,EACH,OAGF,MAAM9P,EAAQ8P,EAAa7H,QAAQuD,IACpB,IAAXxL,GACF8P,EAAaI,OAAOlQ,EAAO,EAC7B,CAEJ,C,uCC/JA,MAAMxF,E,QAAS,E,yDCiBf,IAAIgD,GAAmB,EAEvB,MAaMF,EAAuB,KAGvBE,EAAkB,IAKpBA,EAlByC,WAApC,EAAAhD,OAAO6O,SAAS8G,iBAAiC,EAAA3V,OAAO6O,SAASoD,aAAmB2D,IAAJ,GAKvF,QAAS,EAAGC,gBACV7S,EAAkB6S,CAAS,IAC1B,IAcI,CACL,mBAAI7S,GACF,OAAOA,CACT,G,+CC9BJ,MAAM2Q,EAAW,CAACmC,EAAIpF,KACpB,MAAMqF,EAAsBhU,IACP,aAAfA,EAAMiC,MAA2D,WAApC,EAAAhE,OAAO6O,SAAS8G,kBAC/CG,EAAG/T,GACC2O,IACFsF,oBAAoB,mBAAoBD,GAAoB,GAC5DC,oBAAoB,WAAYD,GAAoB,IAExD,EAEF9V,iBAAiB,mBAAoB8V,GAAoB,GAGzD9V,iBAAiB,WAAY8V,GAAoB,EAAK,C,kCC1BxD,MAAME,EAA2C,qBAArBC,kBAAoCA,gB","sources":["webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/metrics/utils.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/metrics/index.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/common/fetch.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/request.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/browsertracing.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/router.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/backgroundtab.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/bindReporter.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/generateUniqueID.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getNavigationEntry.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getActivationStart.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/initMetric.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/observe.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getCLS.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getFID.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getLCP.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/instrument.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/types.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/onHidden.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/common/debug-build.js"],"sourcesContent":["/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nfunction _startChild(transaction, { startTimestamp, ...ctx }) {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n\nexport { _startChild, isMeasurementValue };\n//# sourceMappingURL=utils.js.map\n","import { getActiveTransaction } from '@sentry/core';\nimport { browserPerformanceTimeOrigin, htmlTreeAsString, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../../common/debug-build.js';\nimport { addPerformanceInstrumentationHandler, addClsInstrumentationHandler, addLcpInstrumentationHandler, addFidInstrumentationHandler } from '../instrument.js';\nimport { WINDOW } from '../types.js';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher.js';\nimport { _startChild, isMeasurementValue } from './utils.js';\n\nconst MAX_INT_AS_BYTES = 2147483647;\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time) {\n  return time / 1000;\n}\n\nfunction getBrowserPerformanceAPI() {\n  // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\n\nlet _performanceCursor = 0;\n\nlet _measurements = {};\nlet _lcpEntry;\nlet _clsEntry;\n\n/**\n * Start tracking web vitals\n *\n * @returns A function that forces web vitals collection\n */\nfunction startTrackingWebVitals() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    const fidCallback = _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n\n    return () => {\n      fidCallback();\n      clsCallback();\n      lcpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nfunction startTrackingLongTasks() {\n  addPerformanceInstrumentationHandler('longtask', ({ entries }) => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction() ;\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec((browserPerformanceTimeOrigin ) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration,\n      });\n    }\n  });\n}\n\n/**\n * Start tracking interaction events.\n */\nfunction startTrackingInteractions() {\n  addPerformanceInstrumentationHandler('event', ({ entries }) => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction() ;\n      if (!transaction) {\n        return;\n      }\n\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin ) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        transaction.startChild({\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          origin: 'auto.ui.browser.metrics',\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration,\n        });\n      }\n    }\n  });\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS() {\n  return addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry ;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP() {\n  return addLcpInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry ;\n  });\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID() {\n  return addFidInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin );\n    const startTime = msToSec(entry.startTime);\n    DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\n/** Add performance related spans to a transaction */\nfunction addPerformanceEntries(transaction) {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  let responseStartTimestamp;\n  let requestStartTimestamp;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n        requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        const resourceName = (entry.name ).replace(WINDOW.location.origin, '');\n        _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n        break;\n      }\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond',\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond',\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      DEBUG_BUILD && logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: fidMark.value,\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      transaction.setMeasurement(\n        measurementName,\n        _measurements[measurementName].value,\n        _measurements[measurementName].unit,\n      );\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nfunction _addMeasureSpans(\n  transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry,\n  startTime,\n  duration,\n  timeOrigin,\n) {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name ,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType ,\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry,\n  event,\n  timeOrigin,\n  description,\n  eventEnd,\n) {\n  const end = eventEnd ? (entry[eventEnd] ) : (entry[`${event}End`] );\n  const start = entry[`${event}Start`] ;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    origin: 'auto.browser.browser.metrics',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    origin: 'auto.browser.browser.metrics',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart ),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd ),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    origin: 'auto.browser.browser.metrics',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart ),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd ),\n  });\n}\n\n/** Create resource-related spans */\nfunction _addResourceSpans(\n  transaction,\n  entry,\n  resourceName,\n  startTime,\n  duration,\n  timeOrigin,\n) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data = {};\n  setResourceEntrySizeData(data, entry, 'transferSize', 'http.response_transfer_size');\n  setResourceEntrySizeData(data, entry, 'encodedBodySize', 'http.response_content_length');\n  setResourceEntrySizeData(data, entry, 'decodedBodySize', 'http.decoded_response_content_length');\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction) {\n  const navigator = WINDOW.navigator ;\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction) {\n  if (_lcpEntry) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n\nfunction setResourceEntrySizeData(\n  data,\n  entry,\n  key,\n  dataKey,\n) {\n  const entryVal = entry[key];\n  if (entryVal != null && entryVal < MAX_INT_AS_BYTES) {\n    data[dataKey] = entryVal;\n  }\n}\n\nexport { _addMeasureSpans, _addResourceSpans, addPerformanceEntries, startTrackingInteractions, startTrackingLongTasks, startTrackingWebVitals };\n//# sourceMappingURL=index.js.map\n","import { hasTracingEnabled, getCurrentHub, getDynamicSamplingContextFromClient } from '@sentry/core';\nimport { generateSentryTraceHeader, dynamicSamplingContextToSentryBaggageHeader, isInstanceOf, BAGGAGE_HEADER_NAME } from '@sentry/utils';\n\n/**\n * Create and track fetch request spans for usage in combination with `addInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction instrumentFetchRequest(\n  handlerData,\n  shouldCreateSpan,\n  shouldAttachHeaders,\n  spans,\n  spanOrigin = 'auto.http.browser',\n) {\n  if (!hasTracingEnabled() || !handlerData.fetchData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(handlerData.fetchData.url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        span.setHttpStatus(handlerData.response.status);\n\n        const contentLength =\n          handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n\n        if (contentLength) {\n          const contentLengthNum = parseInt(contentLength);\n          if (contentLengthNum > 0) {\n            span.setData('http.response_content_length', contentLengthNum);\n          }\n        }\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  const client = hub.getClient();\n  const parentSpan = scope.getSpan();\n\n  const { method, url } = handlerData.fetchData;\n\n  const span =\n    shouldCreateSpanResult && parentSpan\n      ? parentSpan.startChild({\n          data: {\n            url,\n            type: 'fetch',\n            'http.method': method,\n          },\n          description: `${method} ${url}`,\n          op: 'http.client',\n          origin: spanOrigin,\n        })\n      : undefined;\n\n  if (span) {\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n  }\n\n  if (shouldAttachHeaders(handlerData.fetchData.url) && client) {\n    const request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = handlerData.args[1];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    options.headers = addTracingHeadersToFetchRequest(request, client, scope, options, span);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nfunction addTracingHeadersToFetchRequest(\n  request, // unknown is actually type Request but we can't export DOM types from this package,\n  client,\n  scope,\n  options\n\n,\n  requestSpan,\n) {\n  const span = requestSpan || scope.getSpan();\n\n  const transaction = span && span.transaction;\n\n  const { traceId, sampled, dsc } = scope.getPropagationContext();\n\n  const sentryTraceHeader = span ? span.toTraceparent() : generateSentryTraceHeader(traceId, undefined, sampled);\n  const dynamicSamplingContext = transaction\n    ? transaction.getDynamicSamplingContext()\n    : dsc\n      ? dsc\n      : getDynamicSamplingContextFromClient(traceId, client, scope);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n  const headers =\n    typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request ).headers : options.headers;\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers );\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders ;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders ;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers ),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nexport { addTracingHeadersToFetchRequest, instrumentFetchRequest };\n//# sourceMappingURL=fetch.js.map\n","import { hasTracingEnabled, getCurrentHub, getDynamicSamplingContextFromClient } from '@sentry/core';\nimport { addFetchInstrumentationHandler, addXhrInstrumentationHandler, SENTRY_XHR_DATA_KEY, dynamicSamplingContextToSentryBaggageHeader, generateSentryTraceHeader, BAGGAGE_HEADER_NAME, browserPerformanceTimeOrigin, stringMatchesSomePattern } from '@sentry/utils';\nimport { instrumentFetchRequest } from '../common/fetch.js';\nimport { addPerformanceInstrumentationHandler } from './instrument.js';\n\n/* eslint-disable max-lines */\n\nconst DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\n\nconst defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  enableHTTPTimings: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nfunction instrumentOutgoingRequests(_options) {\n  const {\n    traceFetch,\n    traceXHR,\n    // eslint-disable-next-line deprecation/deprecation\n    tracePropagationTargets,\n    // eslint-disable-next-line deprecation/deprecation\n    tracingOrigins,\n    shouldCreateSpanForRequest,\n    enableHTTPTimings,\n  } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_) => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = (url) =>\n    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n\n  const spans = {};\n\n  if (traceFetch) {\n    addFetchInstrumentationHandler(handlerData => {\n      const createdSpan = instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n\n  if (traceXHR) {\n    addXhrInstrumentationHandler(handlerData => {\n      const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n}\n\nfunction isPerformanceResourceTiming(entry) {\n  return (\n    entry.entryType === 'resource' &&\n    'initiatorType' in entry &&\n    typeof (entry ).nextHopProtocol === 'string' &&\n    (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest')\n  );\n}\n\n/**\n * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n * so that when timings hit their per-browser limit they don't need to be removed.\n *\n * @param span A span that has yet to be finished, must contain `url` on data.\n */\nfunction addHTTPTimings(span) {\n  const url = span.data.url;\n\n  if (!url) {\n    return;\n  }\n\n  const cleanup = addPerformanceInstrumentationHandler('resource', ({ entries }) => {\n    entries.forEach(entry => {\n      if (isPerformanceResourceTiming(entry) && entry.name.endsWith(url)) {\n        const spanData = resourceTimingEntryToSpanData(entry);\n        spanData.forEach(data => span.setData(...data));\n        // In the next tick, clean this handler up\n        // We have to wait here because otherwise this cleans itself up before it is fully done\n        setTimeout(cleanup);\n      }\n    });\n  });\n}\n\n/**\n * Converts ALPN protocol ids to name and version.\n *\n * (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)\n * @param nextHopProtocol PerformanceResourceTiming.nextHopProtocol\n */\nfunction extractNetworkProtocol(nextHopProtocol) {\n  let name = 'unknown';\n  let version = 'unknown';\n  let _name = '';\n  for (const char of nextHopProtocol) {\n    // http/1.1 etc.\n    if (char === '/') {\n      [name, version] = nextHopProtocol.split('/');\n      break;\n    }\n    // h2, h3 etc.\n    if (!isNaN(Number(char))) {\n      name = _name === 'h' ? 'http' : _name;\n      version = nextHopProtocol.split(_name)[1];\n      break;\n    }\n    _name += char;\n  }\n  if (_name === nextHopProtocol) {\n    // webrtc, ftp, etc.\n    name = _name;\n  }\n  return { name, version };\n}\n\nfunction getAbsoluteTime(time = 0) {\n  return ((browserPerformanceTimeOrigin || performance.timeOrigin) + time) / 1000;\n}\n\nfunction resourceTimingEntryToSpanData(resourceTiming) {\n  const { name, version } = extractNetworkProtocol(resourceTiming.nextHopProtocol);\n\n  const timingSpanData = [];\n\n  timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n\n  if (!browserPerformanceTimeOrigin) {\n    return timingSpanData;\n  }\n  return [\n    ...timingSpanData,\n    ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)],\n    ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)],\n    ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)],\n    ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)],\n    ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)],\n    ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)],\n    ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)],\n    ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)],\n    ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)],\n    ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)],\n  ];\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nfunction shouldAttachHeaders(url, tracePropagationTargets) {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track xhr request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\n// eslint-disable-next-line complexity\nfunction xhrCallback(\n  handlerData,\n  shouldCreateSpan,\n  shouldAttachHeaders,\n  spans,\n) {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n\n  if (!hasTracingEnabled() || !xhr || xhr.__sentry_own_request__ || !sentryXhrData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(sentryXhrData.url);\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span && sentryXhrData.status_code !== undefined) {\n      span.setHttpStatus(sentryXhrData.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  const parentSpan = scope.getSpan();\n\n  const span =\n    shouldCreateSpanResult && parentSpan\n      ? parentSpan.startChild({\n          data: {\n            type: 'xhr',\n            'http.method': sentryXhrData.method,\n            url: sentryXhrData.url,\n          },\n          description: `${sentryXhrData.method} ${sentryXhrData.url}`,\n          op: 'http.client',\n          origin: 'auto.http.browser',\n        })\n      : undefined;\n\n  if (span) {\n    xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n  }\n\n  if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {\n    if (span) {\n      const transaction = span && span.transaction;\n      const dynamicSamplingContext = transaction && transaction.getDynamicSamplingContext();\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      setHeaderOnXhr(xhr, span.toTraceparent(), sentryBaggageHeader);\n    } else {\n      const client = hub.getClient();\n      const { traceId, sampled, dsc } = scope.getPropagationContext();\n      const sentryTraceHeader = generateSentryTraceHeader(traceId, undefined, sampled);\n      const dynamicSamplingContext =\n        dsc || (client ? getDynamicSamplingContextFromClient(traceId, client, scope) : undefined);\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      setHeaderOnXhr(xhr, sentryTraceHeader, sentryBaggageHeader);\n    }\n  }\n\n  return span;\n}\n\nfunction setHeaderOnXhr(\n  xhr,\n  sentryTraceHeader,\n  sentryBaggageHeader,\n) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    xhr.setRequestHeader('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n      // We can therefore simply set a baggage header without checking what was there before\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      xhr.setRequestHeader(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n  } catch (_) {\n    // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n  }\n}\n\nexport { DEFAULT_TRACE_PROPAGATION_TARGETS, defaultRequestInstrumentationOptions, extractNetworkProtocol, instrumentOutgoingRequests, shouldAttachHeaders, xhrCallback };\n//# sourceMappingURL=request.js.map\n","import { TRACING_DEFAULTS, addTracingExtensions, startIdleTransaction, getActiveTransaction } from '@sentry/core';\nimport { logger, tracingContextFromHeaders, getDomElement } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../common/debug-build.js';\nimport { registerBackgroundTabDetection } from './backgroundtab.js';\nimport { startTrackingWebVitals, startTrackingLongTasks, startTrackingInteractions, addPerformanceEntries } from './metrics/index.js';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request.js';\nimport { instrumentRoutingWithDefaults } from './router.js';\nimport { WINDOW } from './types.js';\n\nconst BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nclass BrowserTracing  {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n\n  /**\n   * @inheritDoc\n   */\n\n   constructor(_options) {\n    this.name = BROWSER_TRACING_INTEGRATION_ID;\n    this._hasSetTracePropagationTargets = false;\n\n    addTracingExtensions();\n\n    if (DEBUG_BUILD) {\n      this._hasSetTracePropagationTargets = !!(\n        _options &&\n        // eslint-disable-next-line deprecation/deprecation\n        (_options.tracePropagationTargets || _options.tracingOrigins)\n      );\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce(_, getCurrentHub) {\n    this._getCurrentHub = getCurrentHub;\n    const hub = getCurrentHub();\n    const client = hub.getClient();\n    const clientOptions = client && client.getOptions();\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n      _experiments,\n    } = this.options;\n\n    const clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n    // There are three ways to configure tracePropagationTargets:\n    // 1. via top level client option `tracePropagationTargets`\n    // 2. via BrowserTracing option `tracePropagationTargets`\n    // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n    //\n    // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n    // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n    // This is done as it minimizes bundle size (we don't have to have undefined checks).\n    //\n    // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n    // eslint-disable-next-line deprecation/deprecation\n    const tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n    if (DEBUG_BUILD && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n      logger.warn(\n        '[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.',\n      );\n    }\n\n    instrumentRouting(\n      (context) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n    });\n  }\n\n  /** Create routing idle transaction. */\n   _createRouteTransaction(context) {\n    if (!this._getCurrentHub) {\n      DEBUG_BUILD &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const hub = this._getCurrentHub();\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    const sentryTrace = isPageloadTransaction ? getMetaContent('sentry-trace') : '';\n    const baggage = isPageloadTransaction ? getMetaContent('baggage') : '';\n    const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n      sentryTrace,\n      baggage,\n    );\n\n    const expandedContext = {\n      ...context,\n      ...traceparentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n      trimEnd: true,\n    };\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n\n    if (finalContext.sampled === false) {\n      DEBUG_BUILD && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    DEBUG_BUILD && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n    );\n\n    const scope = hub.getScope();\n\n    // If it's a pageload and there is a meta tag set\n    // use the traceparentData as the propagation context\n    if (isPageloadTransaction && traceparentData) {\n      scope.setPropagationContext(propagationContext);\n    } else {\n      // Navigation transactions should set a new propagation context based on the\n      // created idle transaction.\n      scope.setPropagationContext({\n        traceId: idleTransaction.traceId,\n        spanId: idleTransaction.spanId,\n        parentSpanId: idleTransaction.parentSpanId,\n        sampled: idleTransaction.sampled,\n      });\n    }\n\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction ;\n  }\n\n  /** Start listener for interaction transactions */\n   _registerInteractionListener() {\n    let inflightInteractionTransaction;\n    const registerInteractionTransaction = () => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n      const op = 'ui.action.click';\n\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        DEBUG_BUILD &&\n          logger.warn(\n            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,\n          );\n        return undefined;\n      }\n\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        DEBUG_BUILD && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRouteName) {\n        DEBUG_BUILD && logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nfunction getMetaContent(metaName) {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : undefined;\n}\n\nexport { BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, getMetaContent };\n//# sourceMappingURL=browsertracing.js.map\n","import { logger, browserPerformanceTimeOrigin, addHistoryInstrumentationHandler } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../common/debug-build.js';\nimport { WINDOW } from './types.js';\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nfunction instrumentRoutingWithDefaults(\n  customStartTransaction,\n  startTransactionOnPageLoad = true,\n  startTransactionOnLocationChange = true,\n) {\n  if (!WINDOW || !WINDOW.location) {\n    DEBUG_BUILD && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl = WINDOW.location.href;\n\n  let activeTransaction;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: WINDOW.location.pathname,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n      op: 'pageload',\n      origin: 'auto.pageload.browser',\n      metadata: { source: 'url' },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addHistoryInstrumentationHandler(({ to, from }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          DEBUG_BUILD && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: WINDOW.location.pathname,\n          op: 'navigation',\n          origin: 'auto.navigation.browser',\n          metadata: { source: 'url' },\n        });\n      }\n    });\n  }\n}\n\nexport { instrumentRoutingWithDefaults };\n//# sourceMappingURL=router.js.map\n","import { getActiveTransaction } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../common/debug-build.js';\nimport { WINDOW } from './types.js';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nfunction registerBackgroundTabDetection() {\n  if (WINDOW && WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() ;\n      if (WINDOW.document.hidden && activeTransaction) {\n        const statusType = 'cancelled';\n\n        DEBUG_BUILD &&\n          logger.log(\n            `[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`,\n          );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    DEBUG_BUILD && logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n\nexport { registerBackgroundTabDetection };\n//# sourceMappingURL=backgroundtab.js.map\n","const bindReporter = (\n  callback,\n  metric,\n  reportAllChanges,\n) => {\n  let prevValue;\n  let delta;\n  return (forceReport) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n\nexport { bindReporter };\n//# sourceMappingURL=bindReporter.js.map\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nconst generateUniqueID = () => {\n  return `v3-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n\nexport { generateUniqueID };\n//# sourceMappingURL=generateUniqueID.js.map\n","import { WINDOW } from '../../types.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst getNavigationEntryFromPerformanceTiming = () => {\n  // eslint-disable-next-line deprecation/deprecation\n  const timing = WINDOW.performance.timing;\n  // eslint-disable-next-line deprecation/deprecation\n  const type = WINDOW.performance.navigation.type;\n\n  const navigationEntry = {\n    entryType: 'navigation',\n    startTime: 0,\n    type: type == 2 ? 'back_forward' : type === 1 ? 'reload' : 'navigate',\n  };\n\n  for (const key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      // eslint-disable-next-line deprecation/deprecation\n      navigationEntry[key] = Math.max((timing[key ] ) - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry ;\n};\n\nconst getNavigationEntry = () => {\n  if (WINDOW.__WEB_VITALS_POLYFILL__) {\n    return (\n      WINDOW.performance &&\n      ((performance.getEntriesByType && performance.getEntriesByType('navigation')[0]) ||\n        getNavigationEntryFromPerformanceTiming())\n    );\n  } else {\n    return WINDOW.performance && performance.getEntriesByType && performance.getEntriesByType('navigation')[0];\n  }\n};\n\nexport { getNavigationEntry };\n//# sourceMappingURL=getNavigationEntry.js.map\n","import { getNavigationEntry } from './getNavigationEntry.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst getActivationStart = () => {\n  const navEntry = getNavigationEntry();\n  return (navEntry && navEntry.activationStart) || 0;\n};\n\nexport { getActivationStart };\n//# sourceMappingURL=getActivationStart.js.map\n","import { WINDOW } from '../../types.js';\nimport { generateUniqueID } from './generateUniqueID.js';\nimport { getActivationStart } from './getActivationStart.js';\nimport { getNavigationEntry } from './getNavigationEntry.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst initMetric = (name, value) => {\n  const navEntry = getNavigationEntry();\n  let navigationType = 'navigate';\n\n  if (navEntry) {\n    if (WINDOW.document.prerendering || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else {\n      navigationType = navEntry.type.replace(/_/g, '-') ;\n    }\n  }\n\n  return {\n    name,\n    value: typeof value === 'undefined' ? -1 : value,\n    rating: 'good', // Will be updated if the value changes.\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n    navigationType,\n  };\n};\n\nexport { initMetric };\n//# sourceMappingURL=initMetric.js.map\n","/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nconst observe = (\n  type,\n  callback,\n  opts,\n) => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        callback(list.getEntries() );\n      });\n      po.observe(\n        Object.assign(\n          {\n            type,\n            buffered: true,\n          },\n          opts || {},\n        ) ,\n      );\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n\nexport { observe };\n//# sourceMappingURL=observe.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nconst onCLS = (onReport) => {\n  const metric = initMetric('CLS', 0);\n  let report;\n\n  let sessionValue = 0;\n  let sessionEntries = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  const handleEntries = (entries) => {\n    entries.forEach(entry => {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        const firstSessionEntry = sessionEntries[0];\n        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (\n          sessionValue &&\n          sessionEntries.length !== 0 &&\n          entry.startTime - lastSessionEntry.startTime < 1000 &&\n          entry.startTime - firstSessionEntry.startTime < 5000\n        ) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n\n  const po = observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = () => {\n      handleEntries(po.takeRecords() );\n      report(true);\n    };\n\n    onHidden(stopListening);\n\n    return stopListening;\n  }\n\n  return;\n};\n\nexport { onCLS };\n//# sourceMappingURL=getCLS.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nconst onFID = (onReport) => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  let report;\n\n  const handleEntry = (entry) => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const handleEntries = (entries) => {\n    (entries ).forEach(handleEntry);\n  };\n\n  const po = observe('first-input', handleEntries);\n  report = bindReporter(onReport, metric);\n\n  if (po) {\n    onHidden(() => {\n      handleEntries(po.takeRecords() );\n      po.disconnect();\n    }, true);\n  }\n};\n\nexport { onFID };\n//# sourceMappingURL=getFID.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst reportedMetricIDs = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nconst onLCP = (onReport) => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report;\n\n  const handleEntries = (entries) => {\n    const lastEntry = entries[entries.length - 1] ;\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n\n  const po = observe('largest-contentful-paint', handleEntries);\n\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = () => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords() );\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n\n    return stopListening;\n  }\n\n  return;\n};\n\nexport { onLCP };\n//# sourceMappingURL=getLCP.js.map\n","import { logger, getFunctionName } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../common/debug-build.js';\nimport { onCLS } from './web-vitals/getCLS.js';\nimport { onFID } from './web-vitals/getFID.js';\nimport { onLCP } from './web-vitals/getLCP.js';\nimport { observe } from './web-vitals/lib/observe.js';\n\nconst handlers = {};\nconst instrumented = {};\n\nlet _previousCls;\nlet _previousFid;\nlet _previousLcp;\n\n/**\n * Add a callback that will be triggered when a CLS metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nfunction addClsInstrumentationHandler(callback) {\n  return addMetricObserver('cls', callback, instrumentCls, _previousCls);\n}\n\n/**\n * Add a callback that will be triggered when a LCP metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nfunction addLcpInstrumentationHandler(callback) {\n  return addMetricObserver('lcp', callback, instrumentLcp, _previousLcp);\n}\n\n/**\n * Add a callback that will be triggered when a FID metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nfunction addFidInstrumentationHandler(callback) {\n  return addMetricObserver('fid', callback, instrumentFid, _previousFid);\n}\n\n/**\n * Add a callback that will be triggered when a performance observer is triggered,\n * and receives the entries of the observer.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nfunction addPerformanceInstrumentationHandler(\n  type,\n  callback,\n) {\n  addHandler(type, callback);\n\n  if (!instrumented[type]) {\n    instrumentPerformanceObserver(type);\n    instrumented[type] = true;\n  }\n\n  return getCleanupCallback(type, callback);\n}\n\n/** Trigger all handlers of a given type. */\nfunction triggerHandlers(type, data) {\n  const typeHandlers = handlers[type];\n\n  if (!typeHandlers || !typeHandlers.length) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\nfunction instrumentCls() {\n  onCLS(metric => {\n    triggerHandlers('cls', {\n      metric,\n    });\n    _previousCls = metric;\n  });\n}\n\nfunction instrumentFid() {\n  onFID(metric => {\n    triggerHandlers('fid', {\n      metric,\n    });\n    _previousFid = metric;\n  });\n}\n\nfunction instrumentLcp() {\n  onLCP(metric => {\n    triggerHandlers('lcp', {\n      metric,\n    });\n    _previousLcp = metric;\n  });\n}\n\nfunction addMetricObserver(\n  type,\n  callback,\n  instrumentFn,\n  previousValue,\n) {\n  addHandler(type, callback);\n\n  if (!instrumented[type]) {\n    instrumentFn();\n    instrumented[type] = true;\n  }\n\n  if (previousValue) {\n    callback({ metric: previousValue });\n  }\n\n  return getCleanupCallback(type, callback);\n}\n\nfunction instrumentPerformanceObserver(type) {\n  const options = {};\n\n  // Special per-type options we want to use\n  if (type === 'event') {\n    options.durationThreshold = 0;\n  }\n\n  observe(\n    type,\n    entries => {\n      triggerHandlers(type, { entries });\n    },\n    options,\n  );\n}\n\nfunction addHandler(type, handler) {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] ).push(handler);\n}\n\n// Get a callback which can be called to remove the instrumentation handler\nfunction getCleanupCallback(type, callback) {\n  return () => {\n    const typeHandlers = handlers[type];\n\n    if (!typeHandlers) {\n      return;\n    }\n\n    const index = typeHandlers.indexOf(callback);\n    if (index !== -1) {\n      typeHandlers.splice(index, 1);\n    }\n  };\n}\n\nexport { addClsInstrumentationHandler, addFidInstrumentationHandler, addLcpInstrumentationHandler, addPerformanceInstrumentationHandler };\n//# sourceMappingURL=instrument.js.map\n","import { GLOBAL_OBJ } from '@sentry/utils';\n\nconst WINDOW = GLOBAL_OBJ ;\n\nexport { WINDOW };\n//# sourceMappingURL=types.js.map\n","import { WINDOW } from '../../types.js';\nimport { onHidden } from './onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = () => {\n  // If the document is hidden and not prerendering, assume it was always\n  // hidden and the page was loaded in the background.\n  return WINDOW.document.visibilityState === 'hidden' && !WINDOW.document.prerendering ? 0 : Infinity;\n};\n\nconst trackChanges = () => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nconst getVisibilityWatcher = (\n\n) => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n\nexport { getVisibilityWatcher };\n//# sourceMappingURL=getVisibilityWatcher.js.map\n","import { WINDOW } from '../../types.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst onHidden = (cb, once) => {\n  const onHiddenOrPageHide = (event) => {\n    if (event.type === 'pagehide' || WINDOW.document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n\nexport { onHidden };\n//# sourceMappingURL=onHidden.js.map\n","/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexport { DEBUG_BUILD };\n//# sourceMappingURL=debug-build.js.map\n"],"names":["isMeasurementValue","value","isFinite","_startChild","transaction","startTimestamp","ctx","startChild","MAX_INT_AS_BYTES","msToSec","time","getBrowserPerformanceAPI","WINDOW","addEventListener","performance","_lcpEntry","_clsEntry","_performanceCursor","_measurements","startTrackingWebVitals","mark","fidCallback","metric","entry","entries","pop","timeOrigin","startTime","logger","log","unit","clsCallback","lcpCallback","addPerformanceEntries","getEntries","performanceEntries","responseStartTimestamp","requestStartTimestamp","slice","forEach","duration","op","entryType","event","_addPerformanceNavigationTiming","origin","description","requestStart","endTimestamp","responseEnd","responseStart","_addRequest","_addNavigationSpans","measureStartTimestamp","measureEndTimestamp","name","_addMeasureSpans","firstHidden","getVisibilityWatcher","shouldRecord","firstHiddenTime","resourceName","replace","location","initiatorType","data","setResourceEntrySizeData","renderBlockingStatus","_addResourceSpans","Math","max","length","navigator","connection","effectiveType","setTag","type","rtt","deviceMemory","hardwareConcurrency","String","_trackNavigator","oldValue","measurementTimestamp","normalizedValue","abs","delta","fidMark","cls","Object","keys","measurementName","setMeasurement","element","id","url","trim","size","sources","source","index","node","_tagMetricInfo","undefined","eventEnd","end","start","key","dataKey","entryVal","instrumentFetchRequest","handlerData","shouldCreateSpan","shouldAttachHeaders","spans","spanOrigin","hasTracingEnabled","fetchData","shouldCreateSpanResult","spanId","__span","span","response","setHttpStatus","status","contentLength","headers","get","contentLengthNum","parseInt","setData","error","setStatus","finish","hub","scope","getScope","client","getClient","parentSpan","getSpan","method","request","args","options","requestSpan","traceId","sampled","dsc","getPropagationContext","sentryTraceHeader","toTraceparent","dynamicSamplingContext","getDynamicSamplingContext","sentryBaggageHeader","Request","is","Headers","newHeaders","append","Array","isArray","push","existingBaggageHeader","baggage","newBaggageHeaders","join","addTracingHeadersToFetchRequest","DEFAULT_TRACE_PROPAGATION_TARGETS","defaultRequestInstrumentationOptions","traceFetch","traceXHR","enableHTTPTimings","tracingOrigins","tracePropagationTargets","instrumentOutgoingRequests","_options","shouldCreateSpanForRequest","_","shouldAttachHeadersWithTargets","string","createdSpan","addHTTPTimings","xhr","sentryXhrData","__sentry_own_request__","__sentry_xhr_span_id__","status_code","setRequestHeader","setHeaderOnXhr","xhrCallback","cleanup","nextHopProtocol","isPerformanceResourceTiming","endsWith","resourceTiming","version","_name","char","split","isNaN","Number","extractNetworkProtocol","timingSpanData","getAbsoluteTime","redirectStart","fetchStart","domainLookupStart","domainLookupEnd","connectStart","secureConnectionStart","connectEnd","resourceTimingEntryToSpanData","setTimeout","DEFAULT_BROWSER_TRACING_OPTIONS","markBackgroundTransactions","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","warn","activeTransaction","startingUrl","href","pathname","metadata","a","to","from","indexOf","enableLongTask","_experiments","BrowserTracing","constructor","this","_hasSetTracePropagationTargets","_collectWebVitals","enableInteractions","target","setupOnce","getCurrentHub","_getCurrentHub","clientOptions","getOptions","instrumentRouting","clientOptionsTracePropagationTargets","context","_createRouteTransaction","onStartRouteTransaction","document","hidden","statusType","_registerInteractionListener","beforeNavigate","idleTimeout","finalTimeout","heartbeatInterval","isPageloadTransaction","sentryTrace","getMetaContent","traceparentData","propagationContext","tracing","expandedContext","trimEnd","modifiedContext","finalContext","_latestRouteName","_latestRouteSource","idleTransaction","setPropagationContext","parentSpanId","registerBeforeFinishCallback","inflightInteractionTransaction","registerInteractionTransaction","currentTransaction","includes","setFinishReason","once","capture","metaName","metaTag","getAttribute","bindReporter","callback","reportAllChanges","prevValue","forceReport","getNavigationEntry","__WEB_VITALS_POLYFILL__","getEntriesByType","timing","navigation","navigationEntry","navigationStart","getNavigationEntryFromPerformanceTiming","getActivationStart","navEntry","activationStart","initMetric","navigationType","prerendering","rating","Date","now","floor","random","observe","opts","PerformanceObserver","supportedEntryTypes","po","list","assign","buffered","e","onCLS","onReport","report","sessionValue","sessionEntries","handleEntries","hadRecentInput","firstSessionEntry","lastSessionEntry","stopListening","takeRecords","onHidden","onFID","visibilityWatcher","handleEntry","processingStart","disconnect","reportedMetricIDs","onLCP","lastEntry","handlers","instrumented","_previousCls","_previousFid","_previousLcp","addClsInstrumentationHandler","addMetricObserver","instrumentCls","addLcpInstrumentationHandler","instrumentLcp","addFidInstrumentationHandler","instrumentFid","addPerformanceInstrumentationHandler","addHandler","durationThreshold","triggerHandlers","instrumentPerformanceObserver","getCleanupCallback","typeHandlers","handler","instrumentFn","previousValue","splice","visibilityState","Infinity","timeStamp","cb","onHiddenOrPageHide","removeEventListener","DEBUG_BUILD","__SENTRY_DEBUG__"],"sourceRoot":""}