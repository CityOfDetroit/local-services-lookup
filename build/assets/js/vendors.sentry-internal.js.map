{"version":3,"file":"assets/js/vendors.sentry-internal.js","mappings":"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","sources":["webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/types.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/bindReporter.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getNavigationEntry.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getActivationStart.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/initMetric.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/generateUniqueID.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/observe.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/onHidden.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getCLS.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/lib/getVisibilityWatcher.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getFID.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/web-vitals/getLCP.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/metrics/utils.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/metrics/index.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/request.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/browsertracing.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/router.js","webpack://local-services-lookup/./node_modules/@sentry-internal/tracing/esm/browser/backgroundtab.js"],"sourcesContent":["import { GLOBAL_OBJ } from '@sentry/utils';\n\nconst WINDOW = GLOBAL_OBJ ;\n\nexport { WINDOW };\n//# sourceMappingURL=types.js.map\n","const bindReporter = (\n  callback,\n  metric,\n  reportAllChanges,\n) => {\n  let prevValue;\n  let delta;\n  return (forceReport) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n\nexport { bindReporter };\n//# sourceMappingURL=bindReporter.js.map\n","import { WINDOW } from '../../types.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst getNavigationEntryFromPerformanceTiming = () => {\n  // eslint-disable-next-line deprecation/deprecation\n  const timing = WINDOW.performance.timing;\n  // eslint-disable-next-line deprecation/deprecation\n  const type = WINDOW.performance.navigation.type;\n\n  const navigationEntry = {\n    entryType: 'navigation',\n    startTime: 0,\n    type: type == 2 ? 'back_forward' : type === 1 ? 'reload' : 'navigate',\n  };\n\n  for (const key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      // eslint-disable-next-line deprecation/deprecation\n      navigationEntry[key] = Math.max((timing[key ] ) - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry ;\n};\n\nconst getNavigationEntry = () => {\n  if (WINDOW.__WEB_VITALS_POLYFILL__) {\n    return (\n      WINDOW.performance &&\n      ((performance.getEntriesByType && performance.getEntriesByType('navigation')[0]) ||\n        getNavigationEntryFromPerformanceTiming())\n    );\n  } else {\n    return WINDOW.performance && performance.getEntriesByType && performance.getEntriesByType('navigation')[0];\n  }\n};\n\nexport { getNavigationEntry };\n//# sourceMappingURL=getNavigationEntry.js.map\n","import { getNavigationEntry } from './getNavigationEntry.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst getActivationStart = () => {\n  const navEntry = getNavigationEntry();\n  return (navEntry && navEntry.activationStart) || 0;\n};\n\nexport { getActivationStart };\n//# sourceMappingURL=getActivationStart.js.map\n","import { WINDOW } from '../../types.js';\nimport { generateUniqueID } from './generateUniqueID.js';\nimport { getActivationStart } from './getActivationStart.js';\nimport { getNavigationEntry } from './getNavigationEntry.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst initMetric = (name, value) => {\n  const navEntry = getNavigationEntry();\n  let navigationType = 'navigate';\n\n  if (navEntry) {\n    if (WINDOW.document.prerendering || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else {\n      navigationType = navEntry.type.replace(/_/g, '-') ;\n    }\n  }\n\n  return {\n    name,\n    value: typeof value === 'undefined' ? -1 : value,\n    rating: 'good', // Will be updated if the value changes.\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n    navigationType,\n  };\n};\n\nexport { initMetric };\n//# sourceMappingURL=initMetric.js.map\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nconst generateUniqueID = () => {\n  return `v3-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n\nexport { generateUniqueID };\n//# sourceMappingURL=generateUniqueID.js.map\n","/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nconst observe = (\n  type,\n  callback,\n  opts,\n) => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        callback(list.getEntries() );\n      });\n      po.observe(\n        Object.assign(\n          {\n            type,\n            buffered: true,\n          },\n          opts || {},\n        ) ,\n      );\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n\nexport { observe };\n//# sourceMappingURL=observe.js.map\n","import { WINDOW } from '../../types.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst onHidden = (cb, once) => {\n  const onHiddenOrPageHide = (event) => {\n    if (event.type === 'pagehide' || WINDOW.document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n\nexport { onHidden };\n//# sourceMappingURL=onHidden.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nconst onCLS = (onReport) => {\n  const metric = initMetric('CLS', 0);\n  let report;\n\n  let sessionValue = 0;\n  let sessionEntries = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  const handleEntries = (entries) => {\n    entries.forEach(entry => {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        const firstSessionEntry = sessionEntries[0];\n        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (\n          sessionValue &&\n          sessionEntries.length !== 0 &&\n          entry.startTime - lastSessionEntry.startTime < 1000 &&\n          entry.startTime - firstSessionEntry.startTime < 5000\n        ) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n\n  const po = observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = () => {\n      handleEntries(po.takeRecords() );\n      report(true);\n    };\n\n    onHidden(stopListening);\n\n    return stopListening;\n  }\n\n  return;\n};\n\nexport { onCLS };\n//# sourceMappingURL=getCLS.js.map\n","import { WINDOW } from '../../types.js';\nimport { onHidden } from './onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = () => {\n  // If the document is hidden and not prerendering, assume it was always\n  // hidden and the page was loaded in the background.\n  return WINDOW.document.visibilityState === 'hidden' && !WINDOW.document.prerendering ? 0 : Infinity;\n};\n\nconst trackChanges = () => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nconst getVisibilityWatcher = (\n\n) => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n\nexport { getVisibilityWatcher };\n//# sourceMappingURL=getVisibilityWatcher.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nconst onFID = (onReport) => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  let report;\n\n  const handleEntry = (entry) => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const handleEntries = (entries) => {\n    (entries ).forEach(handleEntry);\n  };\n\n  const po = observe('first-input', handleEntries);\n  report = bindReporter(onReport, metric);\n\n  if (po) {\n    onHidden(() => {\n      handleEntries(po.takeRecords() );\n      po.disconnect();\n    }, true);\n  }\n};\n\nexport { onFID };\n//# sourceMappingURL=getFID.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst reportedMetricIDs = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nconst onLCP = (onReport) => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report;\n\n  const handleEntries = (entries) => {\n    const lastEntry = entries[entries.length - 1] ;\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n\n  const po = observe('largest-contentful-paint', handleEntries);\n\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = () => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords() );\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n\n    return stopListening;\n  }\n\n  return;\n};\n\nexport { onLCP };\n//# sourceMappingURL=getLCP.js.map\n","/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nfunction _startChild(transaction, { startTimestamp, ...ctx }) {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n\nexport { _startChild, isMeasurementValue };\n//# sourceMappingURL=utils.js.map\n","import { getActiveTransaction } from '@sentry/core';\nimport { browserPerformanceTimeOrigin, logger, htmlTreeAsString } from '@sentry/utils';\nimport { WINDOW } from '../types.js';\nimport { onCLS } from '../web-vitals/getCLS.js';\nimport { onFID } from '../web-vitals/getFID.js';\nimport { onLCP } from '../web-vitals/getLCP.js';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher.js';\nimport { observe } from '../web-vitals/lib/observe.js';\nimport { _startChild, isMeasurementValue } from './utils.js';\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time) {\n  return time / 1000;\n}\n\nfunction getBrowserPerformanceAPI() {\n  // @ts-ignore we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\n\nlet _performanceCursor = 0;\n\nlet _measurements = {};\nlet _lcpEntry;\nlet _clsEntry;\n\n/**\n * Start tracking web vitals\n *\n * @returns A function that forces web vitals collection\n */\nfunction startTrackingWebVitals() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-ignore we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n\n    return () => {\n      if (clsCallback) {\n        clsCallback();\n      }\n      if (lcpCallback) {\n        lcpCallback();\n      }\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nfunction startTrackingLongTasks() {\n  const entryHandler = (entries) => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction() ;\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec((browserPerformanceTimeOrigin ) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration,\n      });\n    }\n  };\n\n  observe('longtask', entryHandler);\n}\n\n/**\n * Start tracking interaction events.\n */\nfunction startTrackingInteractions() {\n  const entryHandler = (entries) => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction() ;\n      if (!transaction) {\n        return;\n      }\n\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin ) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        transaction.startChild({\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration,\n        });\n      }\n    }\n  };\n\n  observe('event', entryHandler, { durationThreshold: 0 });\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS() {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  return onCLS(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry ;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP() {\n  return onLCP(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry ;\n  });\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID() {\n  onFID(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin );\n    const startTime = msToSec(entry.startTime);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\n/** Add performance related spans to a transaction */\nfunction addPerformanceEntries(transaction) {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  let responseStartTimestamp;\n  let requestStartTimestamp;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n        requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        const resourceName = (entry.name ).replace(WINDOW.location.origin, '');\n        _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n        break;\n      }\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond',\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond',\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n        logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        startTimestamp: fidMark.value,\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      transaction.setMeasurement(\n        measurementName,\n        _measurements[measurementName].value,\n        _measurements[measurementName].unit,\n      );\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nfunction _addMeasureSpans(\n  transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry,\n  startTime,\n  duration,\n  timeOrigin,\n) {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name ,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType ,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry,\n  event,\n  timeOrigin,\n  description,\n  eventEnd,\n) {\n  const end = eventEnd ? (entry[eventEnd] ) : (entry[`${event}End`] );\n  const start = entry[`${event}Start`] ;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart ),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd ),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart ),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd ),\n  });\n}\n\n/** Create resource-related spans */\nfunction _addResourceSpans(\n  transaction,\n  entry,\n  resourceName,\n  startTime,\n  duration,\n  timeOrigin,\n) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data = {};\n  if ('transferSize' in entry) {\n    data['http.response_transfer_size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['http.response_content_length'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['http.decoded_response_content_length'] = entry.decodedBodySize;\n  }\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction) {\n  const navigator = WINDOW.navigator ;\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction) {\n  if (_lcpEntry) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n\nexport { _addMeasureSpans, _addResourceSpans, addPerformanceEntries, startTrackingInteractions, startTrackingLongTasks, startTrackingWebVitals };\n//# sourceMappingURL=index.js.map\n","import { hasTracingEnabled, getCurrentHub, getDynamicSamplingContextFromClient } from '@sentry/core';\nimport { addInstrumentationHandler, browserPerformanceTimeOrigin, generateSentryTraceHeader, dynamicSamplingContextToSentryBaggageHeader, isInstanceOf, BAGGAGE_HEADER_NAME, SENTRY_XHR_DATA_KEY, stringMatchesSomePattern } from '@sentry/utils';\n\n/* eslint-disable max-lines */\n\nconst DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\n\nconst defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  enableHTTPTimings: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nfunction instrumentOutgoingRequests(_options) {\n  const {\n    traceFetch,\n    traceXHR,\n    tracePropagationTargets,\n    // eslint-disable-next-line deprecation/deprecation\n    tracingOrigins,\n    shouldCreateSpanForRequest,\n    enableHTTPTimings,\n  } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_) => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = (url) =>\n    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n\n  const spans = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData) => {\n      const createdSpan = fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData) => {\n      const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n}\n\n/**\n * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n * so that when timings hit their per-browser limit they don't need to be removed.\n *\n * @param span A span that has yet to be finished, must contain `url` on data.\n */\nfunction addHTTPTimings(span) {\n  const url = span.data.url;\n  const observer = new PerformanceObserver(list => {\n    const entries = list.getEntries() ;\n    entries.forEach(entry => {\n      if ((entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest') && entry.name.endsWith(url)) {\n        const spanData = resourceTimingEntryToSpanData(entry);\n        spanData.forEach(data => span.setData(...data));\n        observer.disconnect();\n      }\n    });\n  });\n  observer.observe({\n    entryTypes: ['resource'],\n  });\n}\n\n/**\n * Converts ALPN protocol ids to name and version.\n *\n * (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)\n * @param nextHopProtocol PerformanceResourceTiming.nextHopProtocol\n */\nfunction extractNetworkProtocol(nextHopProtocol) {\n  let name = 'unknown';\n  let version = 'unknown';\n  let _name = '';\n  for (const char of nextHopProtocol) {\n    // http/1.1 etc.\n    if (char === '/') {\n      [name, version] = nextHopProtocol.split('/');\n      break;\n    }\n    // h2, h3 etc.\n    if (!isNaN(Number(char))) {\n      name = _name === 'h' ? 'http' : _name;\n      version = nextHopProtocol.split(_name)[1];\n      break;\n    }\n    _name += char;\n  }\n  if (_name === nextHopProtocol) {\n    // webrtc, ftp, etc.\n    name = _name;\n  }\n  return { name, version };\n}\n\nfunction getAbsoluteTime(time) {\n  return ((browserPerformanceTimeOrigin || performance.timeOrigin) + time) / 1000;\n}\n\nfunction resourceTimingEntryToSpanData(resourceTiming) {\n  const { name, version } = extractNetworkProtocol(resourceTiming.nextHopProtocol);\n\n  const timingSpanData = [];\n\n  timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n\n  if (!browserPerformanceTimeOrigin) {\n    return timingSpanData;\n  }\n  return [\n    ...timingSpanData,\n    ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)],\n    ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)],\n    ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)],\n    ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)],\n    ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)],\n    ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)],\n    ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)],\n    ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)],\n    ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)],\n    ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)],\n  ];\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nfunction shouldAttachHeaders(url, tracePropagationTargets) {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track fetch request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction fetchCallback(\n  handlerData,\n  shouldCreateSpan,\n  shouldAttachHeaders,\n  spans,\n) {\n  if (!hasTracingEnabled() || !handlerData.fetchData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(handlerData.fetchData.url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n\n        const contentLength =\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n\n        const contentLengthNum = parseInt(contentLength);\n        if (contentLengthNum > 0) {\n          span.setData('http.response_content_length', contentLengthNum);\n        }\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  const client = hub.getClient();\n  const parentSpan = scope.getSpan();\n\n  const { method, url } = handlerData.fetchData;\n\n  const span =\n    shouldCreateSpanResult && parentSpan\n      ? parentSpan.startChild({\n          data: {\n            url,\n            type: 'fetch',\n            'http.method': method,\n          },\n          description: `${method} ${url}`,\n          op: 'http.client',\n        })\n      : undefined;\n\n  if (span) {\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n  }\n\n  if (shouldAttachHeaders(handlerData.fetchData.url) && client) {\n    const request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = handlerData.args[1];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    options.headers = addTracingHeadersToFetchRequest(request, client, scope, options, span);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nfunction addTracingHeadersToFetchRequest(\n  request, // unknown is actually type Request but we can't export DOM types from this package,\n  client,\n  scope,\n  options\n\n,\n  requestSpan,\n) {\n  const span = requestSpan || scope.getSpan();\n\n  const transaction = span && span.transaction;\n\n  const { traceId, sampled, dsc } = scope.getPropagationContext();\n\n  const sentryTraceHeader = span ? span.toTraceparent() : generateSentryTraceHeader(traceId, undefined, sampled);\n  const dynamicSamplingContext = transaction\n    ? transaction.getDynamicSamplingContext()\n    : dsc\n    ? dsc\n    : getDynamicSamplingContextFromClient(traceId, client, scope);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n  const headers =\n    typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request ).headers : options.headers;\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers );\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders ;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders ;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers ),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\n/**\n * Create and track xhr request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\n// eslint-disable-next-line complexity\nfunction xhrCallback(\n  handlerData,\n  shouldCreateSpan,\n  shouldAttachHeaders,\n  spans,\n) {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n\n  if (!hasTracingEnabled() || (xhr && xhr.__sentry_own_request__) || !xhr || !sentryXhrData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(sentryXhrData.url);\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(sentryXhrData.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  const parentSpan = scope.getSpan();\n\n  const span =\n    shouldCreateSpanResult && parentSpan\n      ? parentSpan.startChild({\n          data: {\n            ...sentryXhrData.data,\n            type: 'xhr',\n            'http.method': sentryXhrData.method,\n            url: sentryXhrData.url,\n          },\n          description: `${sentryXhrData.method} ${sentryXhrData.url}`,\n          op: 'http.client',\n        })\n      : undefined;\n\n  if (span) {\n    xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n  }\n\n  if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {\n    if (span) {\n      const transaction = span && span.transaction;\n      const dynamicSamplingContext = transaction && transaction.getDynamicSamplingContext();\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      setHeaderOnXhr(xhr, span.toTraceparent(), sentryBaggageHeader);\n    } else {\n      const client = hub.getClient();\n      const { traceId, sampled, dsc } = scope.getPropagationContext();\n      const sentryTraceHeader = generateSentryTraceHeader(traceId, undefined, sampled);\n      const dynamicSamplingContext =\n        dsc || (client ? getDynamicSamplingContextFromClient(traceId, client, scope) : undefined);\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      setHeaderOnXhr(xhr, sentryTraceHeader, sentryBaggageHeader);\n    }\n  }\n\n  return span;\n}\n\nfunction setHeaderOnXhr(\n  xhr,\n  sentryTraceHeader,\n  sentryBaggageHeader,\n) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    xhr.setRequestHeader('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n      // We can therefore simply set a baggage header without checking what was there before\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      xhr.setRequestHeader(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n  } catch (_) {\n    // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n  }\n}\n\nexport { DEFAULT_TRACE_PROPAGATION_TARGETS, addTracingHeadersToFetchRequest, defaultRequestInstrumentationOptions, extractNetworkProtocol, fetchCallback, instrumentOutgoingRequests, shouldAttachHeaders, xhrCallback };\n//# sourceMappingURL=request.js.map\n","import { TRACING_DEFAULTS, addTracingExtensions, startIdleTransaction, getActiveTransaction } from '@sentry/core';\nimport { logger, tracingContextFromHeaders, getDomElement } from '@sentry/utils';\nimport { registerBackgroundTabDetection } from './backgroundtab.js';\nimport { startTrackingWebVitals, startTrackingLongTasks, startTrackingInteractions, addPerformanceEntries } from './metrics/index.js';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request.js';\nimport { instrumentRoutingWithDefaults } from './router.js';\nimport { WINDOW } from './types.js';\n\nconst BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nclass BrowserTracing  {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n\n  /**\n   * @inheritDoc\n   */\n\n   constructor(_options) {\n    this.name = BROWSER_TRACING_INTEGRATION_ID;\n    this._hasSetTracePropagationTargets = false;\n\n    addTracingExtensions();\n\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {\n      this._hasSetTracePropagationTargets = !!(\n        _options &&\n        // eslint-disable-next-line deprecation/deprecation\n        (_options.tracePropagationTargets || _options.tracingOrigins)\n      );\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setupOnce(_, getCurrentHub) {\n    this._getCurrentHub = getCurrentHub;\n    const hub = getCurrentHub();\n    const client = hub.getClient();\n    const clientOptions = client && client.getOptions();\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n      _experiments,\n    } = this.options;\n\n    const clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n    // There are three ways to configure tracePropagationTargets:\n    // 1. via top level client option `tracePropagationTargets`\n    // 2. via BrowserTracing option `tracePropagationTargets`\n    // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n    //\n    // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n    // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n    // This is done as it minimizes bundle size (we don't have to have undefined checks).\n    //\n    // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n    const tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n      logger.warn(\n        '[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.',\n      );\n    }\n\n    instrumentRouting(\n      (context) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n    });\n  }\n\n  /** Create routing idle transaction. */\n   _createRouteTransaction(context) {\n    if (!this._getCurrentHub) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const hub = this._getCurrentHub();\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    const sentryTrace = isPageloadTransaction ? getMetaContent('sentry-trace') : '';\n    const baggage = isPageloadTransaction ? getMetaContent('baggage') : '';\n    const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n      sentryTrace,\n      baggage,\n    );\n\n    const expandedContext = {\n      ...context,\n      ...traceparentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n      trimEnd: true,\n    };\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n\n    if (finalContext.sampled === false) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n        logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n    );\n\n    const scope = hub.getScope();\n\n    // If it's a pageload and there is a meta tag set\n    // use the traceparentData as the propagation context\n    if (isPageloadTransaction && traceparentData) {\n      scope.setPropagationContext(propagationContext);\n    } else {\n      // Navigation transactions should set a new propagation context based on the\n      // created idle transaction.\n      scope.setPropagationContext({\n        traceId: idleTransaction.traceId,\n        spanId: idleTransaction.spanId,\n        parentSpanId: idleTransaction.parentSpanId,\n        sampled: !!idleTransaction.sampled,\n      });\n    }\n\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction ;\n  }\n\n  /** Start listener for interaction transactions */\n   _registerInteractionListener() {\n    let inflightInteractionTransaction;\n    const registerInteractionTransaction = () => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n      const op = 'ui.action.click';\n\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n          logger.warn(\n            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,\n          );\n        return undefined;\n      }\n\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRouteName) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n          logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nfunction getMetaContent(metaName) {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : undefined;\n}\n\nexport { BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, getMetaContent };\n//# sourceMappingURL=browsertracing.js.map\n","import { logger, browserPerformanceTimeOrigin, addInstrumentationHandler } from '@sentry/utils';\nimport { WINDOW } from './types.js';\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nfunction instrumentRoutingWithDefaults(\n  customStartTransaction,\n  startTransactionOnPageLoad = true,\n  startTransactionOnLocationChange = true,\n) {\n  if (!WINDOW || !WINDOW.location) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl = WINDOW.location.href;\n\n  let activeTransaction;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: WINDOW.location.pathname,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n      op: 'pageload',\n      metadata: { source: 'url' },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: WINDOW.location.pathname,\n          op: 'navigation',\n          metadata: { source: 'url' },\n        });\n      }\n    });\n  }\n}\n\nexport { instrumentRoutingWithDefaults };\n//# sourceMappingURL=router.js.map\n","import { getActiveTransaction } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport { WINDOW } from './types.js';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nfunction registerBackgroundTabDetection() {\n  if (WINDOW && WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() ;\n      if (WINDOW.document.hidden && activeTransaction) {\n        const statusType = 'cancelled';\n\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n          logger.log(\n            `[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${activeTransaction.op}`,\n          );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n      logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n\nexport { registerBackgroundTabDetection };\n//# sourceMappingURL=backgroundtab.js.map\n"],"names":["WINDOW","bindReporter","callback","metric","reportAllChanges","prevValue","delta","forceReport","value","undefined","getNavigationEntry","__WEB_VITALS_POLYFILL__","performance","getEntriesByType","timing","type","navigation","navigationEntry","entryType","startTime","key","Math","max","navigationStart","getNavigationEntryFromPerformanceTiming","getActivationStart","navEntry","activationStart","initMetric","name","navigationType","document","prerendering","replace","rating","entries","id","Date","now","floor","random","observe","opts","PerformanceObserver","supportedEntryTypes","includes","po","list","getEntries","Object","assign","buffered","e","onHidden","cb","once","onHiddenOrPageHide","event","visibilityState","removeEventListener","addEventListener","onCLS","onReport","report","sessionValue","sessionEntries","handleEntries","forEach","entry","hadRecentInput","firstSessionEntry","lastSessionEntry","length","push","stopListening","takeRecords","firstHiddenTime","getVisibilityWatcher","Infinity","timeStamp","onFID","visibilityWatcher","handleEntry","processingStart","disconnect","reportedMetricIDs","onLCP","lastEntry","capture","isMeasurementValue","isFinite","_startChild","transaction","startTimestamp","ctx","startChild","msToSec","time","getBrowserPerformanceAPI","_lcpEntry","_clsEntry","_performanceCursor","_measurements","startTrackingWebVitals","mark","pop","timeOrigin","__SENTRY_DEBUG__","logger","log","unit","clsCallback","lcpCallback","addPerformanceEntries","performanceEntries","responseStartTimestamp","requestStartTimestamp","slice","duration","op","_addPerformanceNavigationTiming","description","requestStart","endTimestamp","responseEnd","responseStart","_addRequest","_addNavigationSpans","measureStartTimestamp","measureEndTimestamp","_addMeasureSpans","firstHidden","shouldRecord","resourceName","location","origin","initiatorType","data","transferSize","encodedBodySize","decodedBodySize","renderBlockingStatus","_addResourceSpans","navigator","connection","effectiveType","setTag","rtt","deviceMemory","hardwareConcurrency","String","_trackNavigator","oldValue","measurementTimestamp","normalizedValue","abs","fidMark","cls","keys","measurementName","setMeasurement","element","url","trim","size","sources","source","index","node","_tagMetricInfo","eventEnd","end","start","DEFAULT_TRACE_PROPAGATION_TARGETS","defaultRequestInstrumentationOptions","traceFetch","traceXHR","enableHTTPTimings","tracingOrigins","tracePropagationTargets","instrumentOutgoingRequests","_options","shouldCreateSpanForRequest","shouldCreateSpan","_","shouldAttachHeadersWithTargets","string","shouldAttachHeaders","spans","handlerData","createdSpan","hasTracingEnabled","fetchData","shouldCreateSpanResult","spanId","__span","span","response","setHttpStatus","status","contentLength","headers","get","contentLengthNum","parseInt","setData","error","setStatus","finish","hub","scope","getScope","client","getClient","parentSpan","getSpan","method","request","args","options","requestSpan","traceId","sampled","dsc","getPropagationContext","sentryTraceHeader","toTraceparent","dynamicSamplingContext","getDynamicSamplingContext","sentryBaggageHeader","Request","is","Headers","newHeaders","append","Array","isArray","existingBaggageHeader","baggage","newBaggageHeaders","join","addTracingHeadersToFetchRequest","fetchCallback","addHTTPTimings","xhr","sentryXhrData","__sentry_own_request__","__sentry_xhr_span_id__","status_code","setRequestHeader","setHeaderOnXhr","xhrCallback","observer","endsWith","resourceTiming","version","nextHopProtocol","_name","char","split","isNaN","Number","extractNetworkProtocol","timingSpanData","getAbsoluteTime","redirectStart","fetchStart","domainLookupStart","domainLookupEnd","connectStart","secureConnectionStart","connectEnd","resourceTimingEntryToSpanData","entryTypes","DEFAULT_BROWSER_TRACING_OPTIONS","markBackgroundTransactions","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","activeTransaction","startingUrl","href","pathname","metadata","to","from","indexOf","enableLongTask","_experiments","BrowserTracing","constructor","this","_hasSetTracePropagationTargets","_collectWebVitals","enableInteractions","target","durationThreshold","setupOnce","getCurrentHub","_getCurrentHub","clientOptions","getOptions","instrumentRouting","clientOptionsTracePropagationTargets","context","_createRouteTransaction","onStartRouteTransaction","hidden","statusType","_registerInteractionListener","beforeNavigate","idleTimeout","finalTimeout","heartbeatInterval","isPageloadTransaction","sentryTrace","getMetaContent","traceparentData","propagationContext","tracing","expandedContext","trimEnd","modifiedContext","finalContext","_latestRouteName","_latestRouteSource","idleTransaction","setPropagationContext","parentSpanId","registerBeforeFinishCallback","inflightInteractionTransaction","registerInteractionTransaction","currentTransaction","setFinishReason","metaName","metaTag","getAttribute"],"sourceRoot":""}