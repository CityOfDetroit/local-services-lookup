{"version":3,"sources":["node_modules/moment/moment.js","js/panel.class.js","node_modules/@turf/turf/turf.min.js","node_modules/terraformer/terraformer.js","node_modules/terraformer-arcgis-parser/terraformer-arcgis-parser.js","js/data-manager.class.js","js/geocoder.class.js","js/controller.class.js","index.js"],"names":["moment","require","Panel","state","document","querySelector","innerHTML","getElementById","className","data","controller","markup","panel","createMarkup","value","title","loaderToggle","address","toggle","siteURL","window","location","hostname","tempHTML","districtURL","district","council","url","name","phone","dmanager","ddmanager","bliaision","email","enforcement","Object","keys","length","constructor","features","attributes","NHood_Name","Name","Year_Enacted","format","precinct","precinct_location","police_officer","phone_number","contractorInfo","next_pickups","trash","contractor","next_pickup","recycling","bulk","detail","property","year","floor","buildingClass","ownercity","ownerstate","ownerstreetaddr","ownerzip","resb_bldgclass","cib_yearbuilt","cib_value","resb_yearbuilt","resb_value","resb_floorarea","pnum","toLocaleString","forEach","date","values","ticket_number","fine_amount","agency_name","disposition","violation_description","hearing_date","hearing_time","record_id","permit_type","type_of_construction","status","permit_issue_date","date_expiration","permit_description","demolish_by_date","commercial_building","parseInt","price","parcel_id","contractor_name","council_district","neighborhood","web_url","id","request_type_title","created_at","entries","key","buildCouncil","councilData","buildNeighborhood","buildAssessors","buildPermit","buildRental","buildBlight","buildDemosNear","buildDemoStatus","buildNPO","buildImproveDet","buildRecycling","buildHistoricDistrict","root","factory","module","exports","Terraformer","EarthRadius","DegreesPerRadian","RadiansPerDegree","MercatorCRS","isArray","obj","prototype","toString","call","extend","destination","source","k","hasOwnProperty","calculateBounds","geojson","type","coordinates","calculateBoundsFromArray","calculateBoundsFromNestedArrays","calculateBoundsFromNestedArrayOfArrays","array","x1","x2","y1","y2","i","inner","j","innerinner","lonlat","lon","lat","geometry","calculateBoundsForFeatureCollection","featureCollection","extents","extent","push","calculateBoundsForGeometryCollection","geometryCollection","geometries","Error","calculateEnvelope","bounds","x","y","w","Math","abs","h","radToDeg","rad","degToRad","deg","positionToGeographic","position","PI","atan","exp","positionToMercator","lng","max","min","log","sin","applyConverter","converter","noCrs","f","g","eachPosition","func","crs","toMercator","toGeographic","compSort","p1","p2","turn","p","q","r","cmp","a","b","euclideanDistance","dx","dy","nextHullPoint","points","t","convexHull","hull","sort","coordinatesContainPoint","point","contains","l","polygonContainsPoint","polygon","edgeIntersectsEdge","a1","a2","b1","b2","ua_t","ub_t","u_b","ua","ub","isNumber","n","isNaN","parseFloat","isFinite","arraysIntersectArrays","closedPolygon","outer","slice","pointsEqual","coordinatesEqual","na","nb","excludeFromJSON","Primitive","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","Feature","FeatureCollection","GeometryCollection","input","args","Array","arguments","createCircle","center","radius","interpolate","mercatorPosition","steps","radians","cos","Circle","properties","envelope","bbox","concat","primitive","toJSON","indexOf","within","linestring","ls","lines","mpoly","intersects","warn","apply","undefined","console","addPoint","insertPoint","index","splice","removePoint","remove","get","addVertex","insertVertex","removeVertex","close","hasHoles","holes","found","feature","recalculate","output","Tools","isConvex","ltz","p3","v","res","GeographicCRS","turf","arcGIS","DataManager","Promise","resolve","reject","fetch","then","resp","json","councilInfo","catch","err","districtManagers","districtInspectors","councilMembers","neighborhoods","assessorsData","User_fld","permitData","rentalData","rentalCertData","blightData","salesHistoryData","demosData","buffer","units","simplePolygon","simplify","tolerance","highQuality","arcsimplePolygon","convert","defaultSettings","startDate","endDate","encodeURI","JSON","stringify","demoStatus","npo","improveDet","todaysMonth","month","todaysYear","FID","historicDistrict","filters","split","callList","all","dataSets","initialLoadChecker","includes","buildCouncilData","creatPanel","reason","Geocoder","container","form","user","init","geocoder","createElement","label","list","icon","addEventListener","ev","submit","innerText","setAttribute","placeholder","inputChange","appendChild","userId","pass","firebase","database","ref","set","username","password","tempAddr","newTempAddr","size","item","candidates","sugg","onclick","selectSuggestion","childNodes","city","createErrorPanel","parcel","checkParcelValid","needGeocode","clearSuggestions","clearPanel","dataManager","buildData","error","selection","target","tagName","parentNode","supplementGeocoder","firstChild","removeChild","params","request","Request","access_token","encodeURIComponent","method","body","headers","Headers","mode","cache","preventDefault","Controller","initialLoad","add","test","_controller","tid","field_organization_head_name","field_phone","field_contact_position","field_telephone","field_email_address","field_responsibilities","cleanPhone","replace"],"mappings":"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AAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,IAAA,GAAA,GAAA,EAAA,EAAA,IAAA,KAAA,EAAA,CAAA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,KAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,E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GAAA,SAAA,GAAA,EAAA,EAAA,GAAA,EAAA,KAAA,IAAA,OAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,QAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,EAAA,GAAA,IAAA,EAAA,KAAA,EAAA,IAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,KAAA,EAAA,EAAA,KAAA,OAAA,EAAA,CAAA,GAAA,EAAA,GAAA,GAAA,CAAA,MAAA,MAAA,MAAA,QAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,OAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,GAAA,IAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,OAAA,GAAA,EAAA,KAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,CAAA,IAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,IAAA,GAAA,KAAA,IAAA,EAAA,EAAA,KAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,SAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,GAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,GAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,GAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,OAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,CAAA,KAAA,EAAA,KAAA,IAAA,KAAA,EAAA,SAAA,EAAA,OAAA,KAAA,UAAA,CAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,SAAA,EAAA,EAAA,MAAA,OAAA,KAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,KAAA,KAAA,IAAA,GAAA,EAAA,GAAA,GAAA,EAAA,KAAA,IAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,OAAA,GAAA,EAAA,OAAA,GAAA,EAAA,OAAA,GAAA,IAAA,EAAA,OAAA,GAAA,EAAA,SAAA,EAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,EAAA,WAAA,IAAA,GAAA,OAAA,EAAA,KAAA,EAAA,GAAA,EAAA,SAAA,GAAA,EAAA,GAAA,OAAA,EAAA,KAAA,EAAA,KAAA,SAAA,GAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAAA,SAAA,GAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,OAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,GAAA,IAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,GAAA,KAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,EAAA,SAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,KAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,GAAA,IAAA,EAAA,CAAA,EAAA,EAAA,KAAA,KAAA,KAAA,KAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,GAAA,OAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,KAAA,IAAA,EAAA,KAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,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,EAAA,KAAA,GAAA,OAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,CAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,SAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,QAAA,EAAA,OAAA,EAAA,IAAA,OAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,CAAA,EAAA,IAAA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,GAAA,GAAA,IAAA,EAAA,KAAA,GAAA,EAAA,GAAA,OAAA,IAAA,GAAA,EAAA,KAAA,GAAA,EAAA,CAAA,EAAA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AAA,IAAA,EAAA,OAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,IAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,KAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,GAAA,IAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,IAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,MAAA,OAAA,EAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,OAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,IAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,EAAA,WAAA,IAAA,GAAA,EAAA,MAAA,MAAA,KAAA,EAAA,MAAA,KAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,OAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,MAAA,MAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,GAAA,QAAA,EAAA,GAAA,CAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,MAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,GAAA,EAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,EAAA,GAAA,GAAA,CAAA,GAAA,IAAA,EAAA,MAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,E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A,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,IAAA,EAAA,SAAA,EAAA,IAAA,KAAA,GAAA,SAAA,GAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,SAAA,GAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,SAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,EAAA,CAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,KAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,CAAA,CAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,CAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,KAAA,GAAA,EAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,OAAA,IAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,SAAA,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,CAAA,GAAA,SAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,IAAA,CAAA,EAAA,GAAA,CAAA,EAAA,IAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,IAAA,EAAA,OAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,IAAA,EAAA,SAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA,EAAA,EAAA,YAAA,SAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,KAAA,KAAA,EAAA,EAAA,EAAA,GAAA,SAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,YAAA,GAAA,MAAA,SAAA,GAAA,OAAA,GAAA,EAAA,GAAA,KAAA,SAAA,GAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,EAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,GAAA,IAAA,KAAA,IAAA,IAAA,KAAA,IAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAAA,EAAA,YAAA,GAAA,EAAA,YAAA,EAAA,GAAA,EAAA,aAAA,OAAA,EAAA,OAAA,EAAA,SAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,IAAA,SAAA,OAAA,EAAA,SAAA,GAAA,EAAA,GAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,SAAA,GAAA,EAAA,GAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,SAAA,GAAA,EAAA,GAAA,IAAA,IAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,YAAA,OAAA,EAAA,EAAA,EAAA,IAAA,IAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,EAAA,IAAA,CAAA,IAAA,GAAA,EAAA,IAAA,GAAA,IAAA,EAAA,YAAA,OAAA,IAAA,GAAA,GAAA,GAAA,EAAA,YAAA,GAAA,EAAA,YAAA,EAAA,GAAA,EAAA,YAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,OAAA,GAAA,EAAA,SAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,IAAA,SAAA,OAAA,EAAA,SAAA,GAAA,EAAA,GAAA,IAAA,IAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,YAAA,GAAA,OAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,YAAA,GAAA,IAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,OAAA,GAAA,EAAA,SAAA,GAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,IAAA,IAAA,KAAA,IAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,KAAA,IAAA,IAAA,KAAA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,SAAA,GAAA,GAAA,OAAA,EAAA,YAAA,IAAA,SAAA,GAAA,MAAA,CAAA,KAAA,EAAA,KAAA,QAAA,QAAA,IAAA,YAAA,KAAA,SAAA,GAAA,EAAA,GAAA,OAAA,EAAA,eAAA,eAAA,EAAA,YAAA,SAAA,EAAA,YAAA,OAAA,EAAA,SAAA,EAAA,OAAA,SAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,CAAA,QAAA,IAAA,SAAA,GAAA,EAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,IAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,IAAA,EAAA,EAAA,GAAA,GAAA,IAAA,EAAA,GAAA,MAAA,IAAA,MAAA,qCAAA,GAAA,UAAA,EAAA,MAAA,IAAA,MAAA,gCAAA,GAAA,IAAA,GAAA,CAAA,UAAA,IAAA,QAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAAA,GAAA,IAAA,aAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,QAAA,SAAA,GAAA,EAAA,QAAA,SAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,QAAA,MAAA,IAAA,aAAA,IAAA,kBAAA,EAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,GAAA,GAAA,EAAA,GAAA,SAAA,QAAA,QAAA,MAAA,IAAA,UAAA,IAAA,eAAA,EAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,GAAA,GAAA,EAAA,GAAA,SAAA,QAAA,QAAA,OAAA,EAAA,EAAA,SAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,SAAA,GAAA,EAAA,GAAA,GAAA,EAAA,UAAA,EAAA,SAAA,KAAA,OAAA,EAAA,SAAA,KAAA,GAAA,EAAA,KAAA,OAAA,EAAA,KAAA,MAAA,IAAA,MAAA,8BAAA,GAAA,SAAA,GAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,QAAA,GAAA,EAAA,EAAA,OAAA,OAAA,EAAA,SAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,KAAA,MAAA,GAAA,KAAA,WAAA,EAAA,SAAA,KAAA,KAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,KAAA,KAAA,GAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,IAAA,GAAA,EAAA,EAAA,EAAA,IAAA,KAAA,KAAA,GAAA,GAAA,EAAA,KAAA,MAAA,KAAA,IAAA,KAAA,OAAA,SAAA,GAAA,EAAA,EAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,OAAA,EAAA,SAAA,GAAA,GAAA,KAAA,QAAA,GAAA,KAAA,cAAA,EAAA,SAAA,GAAA,GAAA,OAAA,EAAA,GAAA,SAAA,GAAA,GAAA,OAAA,EAAA,GAAA,SAAA,KAAA,KAAA,EAAA,KAAA,SAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,SAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,SAAA,GAAA,GAAA,KAAA,EAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,SAAA,GAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,CAAA,KAAA,MAAA,EAAA,GAAA,KAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,EAAA,MAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,OAAA,UAAA,KAAA,GAAA,GAAA,EAAA,OAAA,UAAA,KAAA,GAAA,EAAA,SAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,CAAA,EAAA,GAAA,OAAA,EAAA,KAAA,EAAA,EAAA,SAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,CAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,CAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,CAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,CAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,QAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,OAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,IAAA,EAAA,CAAA,GAAA,EAAA,GAAA,GAAA,EAAA,OAAA,GAAA,EAAA,EAAA,CAAA,GAAA,GAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,OAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,YAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,SAAA,GAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,CAAA,GAAA,GAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,GAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,OAAA,CAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,YAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,SAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,OAAA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,KAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,SAAA,GAAA,EAAA,GAAA,OAAA,IAAA,EAAA,OAAA,EAAA,OAAA,SAAA,GAAA,EAAA,GAAA,OAAA,IAAA,EAAA,OAAA,EAAA,OAAA,SAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,IAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,IAAA,WAAA,GAAA,MAAA,KAAA,EAAA,KAAA,EAAA,KAAA,IAAA,KAAA,KAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,KAAA,KAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,MAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,GAAA,IAAA,GAAA,MAAA,SAAA,GA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,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,SAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,SAAA,GAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,SAAA,GAAA,GAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,SAAA,GAAA,EAAA,EAAA,GAAA,OAAA,GAAA,IAAA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,SAAA,GAAA,GAAA,OAAA,SAAA,EAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,SAAA,GAAA,GAAA,IAAA,EAAA,GAAA,GAAA,OAAA,EAAA,OAAA,IAAA,GAAA,EAAA,SAAA,GAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,CAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,OAAA,EAAA,OAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,CAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA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AA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,MAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAAA,IAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,MAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,IAAA,KAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,MAAA,EAAA,KAAA,GAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,IAAA,OAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,KAAA,GAAA,IAAA,EAAA,KAAA,GAAA,EAAA,OAAA,EAAA,GAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,IAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,OAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,GAAA,EAAA,GAAA,GAAA,OAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,IAAA,EAAA,IAAA,MAAA,EAAA,GAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,IAAA,IAAA,EAAA,KAAA,GAAA,EAAA,OAAA,EAAA,GAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,OAAA,GAAA,IAAA,GAAA,IAAA,EAAA,OAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,GAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,MAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,OAAA,GAAA,EAAA,IA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AA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,GAAA,EAAA,GAAA,OAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,KAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,GAAA,OAAA,IAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,IAAA,EAAA,IAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EA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AA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,MAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,MAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,EAAA,IAAA,GAAA,SAAA,GAAA,MAAA,CAAA,CAAA,EAAA,WAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,EAAA,cAAA,GAAA,SAAA,GAAA,MAAA,CAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,GAAA,CAAA,EAAA,YAAA,KAAA,GAAA,SAAA,GAAA,MAAA,CAAA,CAAA,EAAA,SAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,EAAA,YAAA,GAAA,SAAA,GAAA,MAAA,CAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,GAAA,CAAA,EAAA,QAAA,KAAA,GAAA,SAAA,GAAA,MAAA,CAAA,CAAA,EAAA,YAAA,GAAA,CAAA,EAAA,WAAA,GAAA,CAAA,EAAA,EAAA,YAAA,CAAA,EAAA,EAAA,WAAA,GAAA,SAAA,GAAA,MAAA,CAAA,CAAA,EAAA,YAAA,GAAA,CAAA,EAAA,WAAA,GAAA,CAAA,EAAA,EAAA,UAAA,CAAA,EAAA,EAAA,eAAA,GAAA,SAAA,GAAA,MAAA,CAAA,CAAA,EAAA,EAAA,UAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,QAAA,GAAA,CAAA,EAAA,SAAA,KAAA,GAAA,SAAA,GAAA,MAAA,CAAA,CAAA,EAAA,EAAA,YAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,QAAA,GAAA,CAAA,EAAA,SAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,EAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,EAAA,GAAA,IAAA,GAAA,IAAA,GAAA,GAAA,IA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,EAAA,EAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,IAAA,IAAA,EAAA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,GAAA,IAAA,EAAA,KAAA,EAAA,EAAA,GAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,GAAA,EAAA,OAAA,GAAA,CAAA,IAAA,EAAA,KAAA,MAAA,KAAA,SAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA,GAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,KAAA,IAAA,EAAA,GAAA,EAAA,MAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,IAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA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,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,GAAA,sBAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,GAAA,EAAA,IAAA,GAAA,cAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GAAA,EAAA,EAAA,SAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,GAAA,OAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,KAAA,KAAA,GAAA,GAAA,GAAA,SAAA,SAAA,EAAA,EAAA,GAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAA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OAAA,EAAA,WAAA,OAAA,WAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,KAAA,GAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,CAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,CAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,CAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,GAAA,CAAA,GAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,GAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,GAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,QAAA,SAAA,GAAA,MAAA,EAAA,EAAA,OAAA,IAAA,GAAA,CAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,CAAA,IAAA,EAAA,YAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,eAAA,EAAA,KAAA,EAAA,IAAA,GAAA,EAAA,EAAA,MAAA,IAAA,EAAA,KAAA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,GAAA,IAAA,EAAA,KAAA,EAAA,IAAA,GAAA,EAAA,EAAA,MAAA,IAAA,EAAA,KAAA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,GAAA,OAAA,EAAA,OAAA,CAAA,IAAA,EAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,CAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,YAAA,EAAA,CAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,MAAA,CAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,aAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,IAAA,SAAA,GAAA,IAAA,EAAA,SAAA,EAAA,SAAA,GAAA,OAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,OAAA,IAAA,EAAA,IAAA,MAAA,KAAA,GAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,SAAA,GAAA,GAAA,IAAA,GAAA,EAAA,GAAA,OAAA,IAAA,GAAA,IAAA,IAAA,GAAA,GAAA,KAAA,IAAA,KAAA,SAAA,GAAA,OAAA,IAAA,IAAA,KAAA,KAAA,EAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,CAAA,MAAA,SAAA,EAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,KAAA,GAAA,IAAA,UAAA,GAAA,QAAA,GAAA,aAAA,GAAA,WAAA,GAAA,OAAA,WAAA,IAAA,EAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,KAAA,OAAA,GAAA,KAAA,GAAA,GAAA,EAAA,GAAA,IAAA,IAAA,KAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,SAAA,IAAA,EAAA,MAAA,EAAA,EAAA,YAAA,SAAA,IAAA,EAAA,MAAA,EAAA,EAAA,UAAA,SAAA,EAAA,EAAA,GAAA,EAAA,KAAA,CAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,SAAA,IAAA,EAAA,YAAA,EAAA,GAAA,SAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,UAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,EAAA,EAAA,SAAA,EAAA,EAAA,OAAA,GAAA,EAAA,MAAA,EAAA,KAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,OAAA,GAAA,EAAA,CAAA,IAAA,IAAA,EAAA,eAAA,GAAA,GAAA,EAAA,YAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,gBAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,OAAA,EAAA,UAAA,EAAA,KAAA,EAAA,OAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAA,aAAA,WAAA,EAAA,MAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,IAAA,WAAA,WAAA,EAAA,MAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,GAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,IAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,IAAA,OAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,IAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,IAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,GAAA,IAAA,IAAA,EAAA,IAAA,EAAA,OAAA,GAAA,EAAA,GAAA,EAAA,GAAA,IAAA,OAAA,GAAA,IAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,QAAA,IAAA,EAAA,eAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,eAAA,GAAA,GAAA,EAAA,YAAA,EAAA,KAAA,KAAA,EAAA,GAAA,EAAA,WAAA,IAAA,EAAA,aAAA,GAAA,GAAA,EAAA,EAAA,MAAA,OAAA,WAAA,EAAA,eAAA,EAAA,YAAA,EAAA,KAAA,KAAA,EAAA,GAAA,EAAA,UAAA,EAAA,eaAAA,QAAA,WAAA,KAAA,OAAA,WAAA,aAAA,WAAA,KAAA,OAAA,gBAAA,WAAA,WAAA,KAAA,OAAA,eaAAA,WAAA,EAAA,eAAA,EAAA,UAAA,GAAA,WAAA,WAAA,EAAA,aAAA,EAAA,UAAA,IAAA,OAAA,GAAA,CAAA,EAAA,GAAA,SAAA,GAAA,OAAA,GAAA,CAAA,MAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,KAAA,OAAA,MAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,GAAA,GAAA,CAAA,MAAA,SAAA,EAAA,GAAA,KAAA,OAAA,MAAA,EAAA,GAAA,EAAA,OAAA,GAAA,OAAA,SAAA,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,GAAA,GAAA,IAAA,KAAA,GAAA,OAAA,SAAA,EAAA,GAAA,MAAA,EAAA,EAAA,EAAA,GAAA,GAAA,IAAA,KAAA,IAAA,GAAA,WAAA,IAAA,EAAA,SAAA,GAAA,SAAA,IAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,CAAA,EAAA,KAAA,OAAA,EAAA,MAAA,EAAA,CAAA,CAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,CAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,IAAA,GAAA,CAAA,CAAA,KAAA,IAAA,EAAA,GAAA,EAAA,GAAA,GAAA,CAAA,KAAA,IAAA,EAAA,GAAA,EAAA,GAAA,IAAA,CAAA,CAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,MAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,MAAA,EAAA,EAAA,UAAA,EAAA,EAAA,WAAA,EAAA,KAAA,OAAA,EAAA,MAAA,SAAA,GAAA,OAAA,UAAA,QAAA,EAAA,GAAA,KAAA,KAAA,EAAA,UAAA,SAAA,GAAA,OAAA,UAAA,QAAA,EAAA,GAAA,KAAA,KAAA,EAAA,OAAA,SAAA,GAAA,OAAA,UAAA,QAAA,EAAA,GAAA,KAAA,KAAA,EAAA,WAAA,SAAA,GAAA,OAAA,UAAA,QAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,KAAA,MAAA,EAAA,KAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,KAAA,IAAA,CAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,OAAA,EAAA,OAAA,SAAA,GAAA,OAAA,UAAA,OAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,KAAA,IAAA,EAAA,KAAA,EAAA,OAAA,SAAA,GAAA,OAAA,UAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,GAAA,GAAA,KAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,KAAA,EAAA,CAAA,EAAA,EAAA,KAAA,MAAA,UAAA,EAAA,WAAA,GAAA,EAAA,OAAA,GAAA,EAAA,SAAA,GAAA,EAAA,QAAA,GAAA,EAAA,UAAA,GAAA,EAAA,KAAA,GAAA,EAAA,SAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,WAAA,YAAA,EAAA,EAAA,kBAAA,GAAA,EAAA,EAAA,kBAAA,GAAA,GAAA,EAAA,EAAA,QAAA,8BAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,MAAA,QAAA,GAAA,MAAA,IAAA,MAAA,2BAAA,IAAA,EAAA,GAAA,MAAA,IAAA,MAAA,sCAAA,IAAA,MAAA,QAAA,GAAA,MAAA,IAAA,MAAA,qCAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,WAAA,YAAA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,QAAA,6BAAA,IAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,KAAA,OAAA,KAAA,GAAA,IAAA,SAAA,GAAA,OAAA,EAAA,GAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,GAAA,GAAA,EAAA,GAAA,OAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,GAAA,EAAA,KAAA,EAAA,WAAA,IAAA,EAAA,KAAA,IAAA,IAAA,IAAA,EAAA,WAAA,eAAA,CAAA,EAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,UAAA,EAAA,MAAA,IAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,SAAA,GAAA,EAAA,EAAA,KAAA,EAAA,CAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,OAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,OAAA,GAAA,EAAA,oBAAA,GAAA,EAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,IAAA,EAAA,GAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,GAAA,SAAA,GAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,GAAA,GAAA,EAAA,SAAA,CAAA,IAAA,EAAA,EAAA,SAAA,YAAA,KAAA,KAAA,EAAA,eAAA,KAAA,EAAA,KAAA,GAAA,EAAA,IAAA,MAAA,EAAA,GAAA,CAAA,IAAA,GAAA,EAAA,SAAA,EAAA,SAAA,OAAA,SAAA,GAAA,IAAA,EAAA,EAAA,SAAA,YAAA,GAAA,GAAA,EAAA,EAAA,SAAA,YAAA,GAAA,GAAA,EAAA,EAAA,SAAA,YAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,EAAA,SAAA,OAAA,EAAA,OAAA,KAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,IAAA,EAAA,YAAA,SAAA,EAAA,YAAA,EAAA,YAAA,GAAA,EAAA,KAAA,WAAA,EAAA,IAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,SAAA,IAAA,SAAA,GAAA,MAAA,CAAA,KAAA,EAAA,SAAA,YAAA,GAAA,KAAA,EAAA,SAAA,YAAA,GAAA,KAAA,EAAA,SAAA,YAAA,GAAA,KAAA,EAAA,SAAA,YAAA,GAAA,SAAA,EAAA,WAAA,MAAA,OAAA,EAAA,KAAA,GAAA,EAAA,SAAA,QAAA,SAAA,GAAA,EAAA,aAAA,EAAA,WAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,CAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,KAAA,QAAA,SAAA,GAAA,GAAA,CAAA,EAAA,KAAA,EAAA,MAAA,IAAA,EAAA,KAAA,EAAA,YAAA,EAAA,WAAA,GAAA,IAAA,GAAA,EAAA,KAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,OAAA,IAAA,EAAA,MAAA,IAAA,MAAA,uBAAA,OAAA,IAAA,QAAA,IAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAAA,GAAA,EAAA,SAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,EAAA,EAAA,cAAA,EAAA,EAAA,EAAA,SAAA,EAAA,IAAA,EAAA,MAAA,IAAA,MAAA,uBAAA,GAAA,GAAA,EAAA,EAAA,MAAA,IAAA,MAAA,qBAAA,OAAA,IAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,SAAA,IAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,GAAA,UAAA,GAAA,eAAA,EAAA,OAAA,EAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,YAAA,OAAA,GAAA,IAAA,aAAA,EAAA,YAAA,GAAA,EAAA,EAAA,GAAA,MAAA,IAAA,kBAAA,EAAA,YAAA,EAAA,IAAA,SAAA,GAAA,OAAA,GAAA,EAAA,EAAA,KAAA,MAAA,IAAA,UAAA,EAAA,YAAA,GAAA,EAAA,EAAA,GAAA,MAAA,IAAA,eAAA,EAAA,YAAA,EAAA,IAAA,SAAA,GAAA,OAAA,GAAA,EAAA,EAAA,MAAA,CAAA,EAAA,EAAA,KAAA,GAAA,EAAA,aAAA,GAAA,EAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,SAAA,GAAA,EAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,SAAA,QAAA,IAAA,EAAA,WAAA,IAAA,GAAA,EAAA,KAAA,EAAA,WAAA,GAAA,EAAA,WAAA,QAAA,GAAA,EAAA,OAAA,SAAA,EAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,iCAAA,GAAA,MAAA,EAAA,MAAA,IAAA,MAAA,mBAAA,GAAA,iBAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,EAAA,KAAA,OAAA,EAAA,GAAA,KAAA,WAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,MAAA,GAAA,CAAA,EAAA,SAAA,KAAA,EAAA,SAAA,GAAA,EAAA,OAAA,GAAA,EAAA,OAAA,GAAA,EAAA,SAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,OAAA,GAAA,EAAA,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,IAAA,QAAA,OAAA,EAAA,IAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,GAAA,EAAA,KAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,SAAA,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,SAAA,GAAA,MAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,QAAA,IAAA,EAAA,GAAA,GAAA,OAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,SAAA,GAAA,EAAA,QAAA,SAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,YAAA,EAAA,GAAA,YAAA,OAAA,EAAA,SAAA,aAAA,EAAA,GAAA,YAAA,KAAA,EAAA,SAAA,aAAA,EAAA,GAAA,WAAA,KAAA,EAAA,YAAA,IAAA,EAAA,CAAA,WAAA,CAAA,YAAA,GAAA,WAAA,IAAA,gBAAA,CAAA,YAAA,GAAA,WAAA,IAAA,aAAA,CAAA,YAAA,GAAA,WAAA,KAAA,EAAA,OAAA,KAAA,GAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,EAAA,QAAA,QAAA,KAAA,EAAA,GAAA,IAAA,OAAA,EAAA,EAAA,SAAA,GAAA,EAAA,WAAA,EAAA,EAAA,SAAA,MAAA,EAAA,EAAA,EAAA,SAAA,MAAA,GAAA,EAAA,EAAA,SAAA,OAAA,EAAA,EAAA,EAAA,EAAA,SAAA,OAAA,MAAA,EAAA,OAAA,KAAA,GAAA,OAAA,SAAA,GAAA,OAAA,EAAA,GAAA,YAAA,SAAA,OAAA,IAAA,SAAA,GAAA,OAAA,EAAA,CAAA,KAAA,EAAA,YAAA,EAAA,GAAA,aAAA,CAAA,oBAAA,EAAA,GAAA,iBAAA,EAAA,SAAA,GAAA,EAAA,QAAA,GAAA,EAAA,KAAA,EAAA,EAAA,UAAA,SAAA,GAAA,IAAA,EAAA,UAAA,YAAA,EAAA,SAAA,MAAA,iBAAA,EAAA,SAAA,KAAA,MAAA,IAAA,MAAA,2CAAA,IAAA,EAAA,CAAA,KAAA,oBAAA,SAAA,IAAA,MAAA,YAAA,EAAA,SAAA,KAAA,EAAA,SAAA,GAAA,EAAA,SAAA,aAAA,EAAA,SAAA,YAAA,QAAA,SAAA,GAAA,EAAA,SAAA,EAAA,SAAA,OAAA,GAAA,MAAA,GAAA,EAAA,YAAA,GAAA,EAAA,sBAAA,GAAA,EAAA,aAAA,GAAA,EAAA,mBAAA,GAAA,EAAA,mBAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,YAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,KAAA,EAAA,SAAA,GAAA,IAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,SAAA,KAAA,EAAA,MAAA,IAAA,qBAAA,OAAA,EAAA,EAAA,SAAA,GAAA,UAAA,EAAA,MAAA,EAAA,KAAA,CAAA,KAAA,UAAA,WAAA,GAAA,SAAA,MAAA,CAAA,KAAA,oBAAA,SAAA,GAAA,IAAA,oBAAA,OAAA,EAAA,SAAA,EAAA,SAAA,OAAA,SAAA,GAAA,MAAA,UAAA,EAAA,SAAA,OAAA,EAAA,QAAA,MAAA,IAAA,MAAA,sCAAA,CAAA,IAAA,SAAA,OAAA,MAAA,IAAA,MAAA,gCAAA,IAAA,EAAA,MAAA,IAAA,MAAA,oBAAA,GAAA,eAAA,EAAA,GAAA,MAAA,IAAA,MAAA,6BAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,OAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,CAAA,MAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,IAAA,EAAA,WAAA,OAAA,OAAA,CAAA,KAAA,GAAA,EAAA,WAAA,IAAA,GAAA,EAAA,WAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,YAAA,GAAA,GAAA,EAAA,OAAA,EAAA,MAAA,IAAA,MAAA,yoBAAA,SAAA,IAAA,GAAA,gBAAA,EAAA,YAAA,EAAA,KAAA,EAAA,SAAA,GAAA,KAAA,EAAA,CAAA,EAAA,kBAAA,GAAA,oBAAA,EAAA,KAAA,EAAA,EAAA,iBAAA,GAAA,iBAAA,EAAA,KAAA,EAAA,GAAA,OAAA,MAAA,GAAA,EAAA,iBAAA,CAAA,GAAA,YAAA,EAAA,KAAA,MAAA,IAAA,MAAA,6FAAA,EAAA,EAAA,YAAA,OAAA,EAAA,QAAA,SAAA,GAAA,EAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,CAAA,GAAA,IAAA,EAAA,CAAA,GAAA,IAAA,KAAA,IAAA,EAAA,GAAA,SAAA,GAAA,IAAA,GAAA,IAAA,EAAA,OAAA,GAAA,EAAA,GAAA,KAAA,EAAA,EAAA,OAAA,GAAA,IAAA,EAAA,GAAA,KAAA,EAAA,EAAA,OAAA,GAAA,GAAA,SAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,SAAA,EAAA,SAAA,GAAA,OAAA,IAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,OAAA,EAAA,GAAA,OAAA,EAAA,GAAA,GAAA,GAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IAAA,EAAA,SAAA,GAAA,GAAA,GAAA,GAAA,IAAA,EAAA,SAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,CAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,IAAA,GAAA,EAAA,SAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,WAAA,GAAA,EAAA,eAAA,GAAA,EAAA,KAAA,GAAA,EAAA,MAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,GAAA,YAAA,EAAA,KAAA,EAAA,EAAA,SAAA,gBAAA,CAAA,GAAA,eAAA,EAAA,KAAA,MAAA,IAAA,MAAA,kDAAA,EAAA,EAAA,YAAA,IAAA,EAAA,GAAA,MAAA,IAAA,MAAA,6BAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,GAAA,GAAA,IAAA,EAAA,OAAA,GAAA,IAAA,CAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,IAAA,IAAA,OAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,IAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,OAAA,EAAA,EAAA,EAAA,OAAA,KAAA,EAAA,OAAA,GAAA,EAAA,UAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,eAAA,EAAA,GAAA,MAAA,IAAA,MAAA,6BAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,WAAA,OAAA,EAAA,WAAA,MAAA,CAAA,EAAA,GAAA,CAAA,EAAA,IAAA,GAAA,SAAA,aAAA,EAAA,EAAA,GAAA,WAAA,MAAA,EAAA,EAAA,EAAA,GAAA,WAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,OAAA,EAAA,KAAA,EAAA,GAAA,SAAA,aAAA,EAAA,EAAA,EAAA,aAAA,EAAA,eAAA,GAAA,EAAA,UAAA,GAAA,EAAA,SAAA,GAAA,EAAA,QAAA,SAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,uBAAA,IAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,GAAA,EAAA,KAAA,KAAA,EAAA,IAAA,EAAA,cAAA,GAAA,EAAA,UAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,MAAA,uBAAA,GAAA,GAAA,EAAA,MAAA,IAAA,MAAA,wCAAA,IAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,SAAA,YAAA,EAAA,SAAA,YAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,EAAA,CAAA,MAAA,IAAA,GAAA,GAAA,EAAA,OAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,OAAA,UAAA,KAAA,EAAA,KAAA,MAAA,GAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,CAAA,MAAA,MAAA,CAAA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,KAAA,OAAA,EAAA,IAAA,EAAA,cAAA,SAAA,GAAA,IAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,GAAA,YAAA,EAAA,SAAA,MAAA,EAAA,GAAA,GAAA,SAAA,GAAA,EAAA,KAAA,EAAA,EAAA,SAAA,YAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,YAAA,SAAA,EAAA,EAAA,GAAA,GAAA,iBAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,WAAA,EAAA,EAAA,QAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,IAAA,GAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,GAAA,IAAA,EAAA,CAAA,OAAA,IAAA,QAAA,EAAA,YAAA,GAAA,EAAA,UAAA,SAAA,EAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,oBAAA,IAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,GAAA,eAAA,EAAA,MAAA,IAAA,MAAA,2BAAA,GAAA,sBAAA,EAAA,MAAA,IAAA,MAAA,0CAAA,GAAA,uBAAA,EAAA,MAAA,IAAA,MAAA,2CAAA,IAAA,EAAA,GAAA,EAAA,CAAA,UAAA,IAAA,OAAA,GAAA,IAAA,QAAA,OAAA,GAAA,EAAA,GAAA,IAAA,aAAA,OAAA,GAAA,EAAA,GAAA,IAAA,aAAA,IAAA,kBAAA,IAAA,UAAA,IAAA,eAAA,OAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,GAAA,EAAA,cAAA,GAAA,EAAA,cAAA,GAAA,EAAA,SAAA,SAAA,EAAA,GAAA,IAAA,EAAA,SAAA,GAAA,OAAA,EAAA,SAAA,EAAA,SAAA,KAAA,EAAA,KAAA,CAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,WAAA,OAAA,GAAA,IAAA,aAAA,IAAA,kBAAA,IAAA,EAAA,GAAA,MAAA,eAAA,IAAA,EAAA,CAAA,IAAA,EAAA,QAAA,SAAA,GAAA,GAAA,EAAA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,IAAA,UAAA,OAAA,EAAA,GAAA,EAAA,GAAA,GAAA,IAAA,eAAA,OAAA,EAAA,EAAA,IAAA,SAAA,GAAA,OAAA,GAAA,EAAA,KAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,oBAAA,EAAA,YAAA,GAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,GAAA,MAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,GAAA,MAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,IAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,GAAA,iBAAA,EAAA,MAAA,IAAA,MAAA,6BAAA,GAAA,GAAA,KAAA,GAAA,GAAA,OAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,CAAA,IAAA,OAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,SAAA,GAAA,EAAA,GAAA,KAAA,KAAA,EAAA,GAAA,KAAA,GAAA,EAAA,IAAA,EAAA,aAAA,GAAA,EAAA,cAAA,GAAA,EAAA,iBAAA,GAAA,EAAA,gBAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,IAAA,UAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,GAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,IAAA,eAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,OAAA,GAAA,GAAA,EAAA,QAAA,SAAA,GAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,EAAA,SAAA,EAAA,IAAA,EAAA,MAAA,IAAA,MAAA,yBAAA,GAAA,kBAAA,EAAA,MAAA,IAAA,MAAA,+BAAA,GAAA,kBAAA,EAAA,MAAA,IAAA,MAAA,+BAAA,IAAA,IAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,qBAAA,OAAA,EAAA,EAAA,SAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,oBAAA,OAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GAAA,EAAA,GAAA,SAAA,GAAA,EAAA,KAAA,OAAA,EAAA,GAAA,OAAA,GAAA,EAAA,IAAA,EAAA,SAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,WAAA,YAAA,EAAA,EAAA,kBAAA,GAAA,EAAA,EAAA,kBAAA,GAAA,GAAA,EAAA,EAAA,QAAA,8BAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,MAAA,QAAA,GAAA,MAAA,IAAA,MAAA,0BAAA,IAAA,EAAA,GAAA,MAAA,IAAA,MAAA,qCAAA,IAAA,MAAA,QAAA,GAAA,MAAA,IAAA,MAAA,oCAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,WAAA,YAAA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,QAAA,6BAAA,IAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,GAAA,IAAA,EAAA,GAAA,KAAA,KAAA,OAAA,KAAA,GAAA,IAAA,SAAA,GAAA,OAAA,EAAA,GAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,GAAA,GAAA,EAAA,GAAA,OAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,GAAA,EAAA,EAAA,IAAA,KAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,GAAA,EAAA,KAAA,EAAA,WAAA,IAAA,EAAA,KAAA,IAAA,IAAA,IAAA,EAAA,WAAA,eAAA,CAAA,EAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,UAAA,EAAA,MAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,SAAA,GAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,SAAA,GAAA,IAAA,EAAA,GAAA,EAAA,CAAA,KAAA,EAAA,KAAA,GAAA,EAAA,KAAA,CAAA,KAAA,EAAA,KAAA,MAAA,EAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,IAAA,EAAA,GAAA,OAAA,EAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,EAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,GAAA,MAAA,EAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,IAAA,SAAA,GAAA,MAAA,CAAA,cAAA,EAAA,SAAA,KAAA,EAAA,IAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,IAAA,IAAA,EAAA,GAAA,QAAA,OAAA,EAAA,OAAA,EAAA,CAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,IAAA,EAAA,GAAA,QAAA,CAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,eAAA,EAAA,GAAA,SAAA,EAAA,IAAA,IAAA,EAAA,EAAA,CAAA,EAAA,GAAA,gBAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,IAAA,EAAA,GAAA,QAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,GAAA,iBAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,SAAA,OAAA,IAAA,IAAA,GAAA,EAAA,SAAA,GAAA,GAAA,OAAA,EAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,eAAA,EAAA,GAAA,SAAA,GAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,aAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,SAAA,GAAA,EAAA,aAAA,QAAA,SAAA,GAAA,EAAA,QAAA,SAAA,GAAA,EAAA,QAAA,SAAA,EAAA,CAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,EAAA,IAAA,MAAA,IAAA,MAAA,mDAAA,IAAA,EAAA,OAAA,OAAA,GAAA,EAAA,EAAA,IAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,aAAA,OAAA,EAAA,gBAAA,GAAA,EAAA,eAAA,GAAA,EAAA,mBAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,aAAA,EAAA,EAAA,OAAA,IAAA,EAAA,MAAA,IAAA,MAAA,uBAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,wBAAA,GAAA,GAAA,iBAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,gCAAA,GAAA,OAAA,IAAA,EAAA,EAAA,EAAA,IAAA,GAAA,IAAA,EAAA,OAAA,EAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,yBAAA,OAAA,EAAA,IAAA,GAAA,EAAA,GAAA,IAAA,IAAA,QAAA,IAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,MAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,IAAA,EAAA,SAAA,EAAA,IAAA,KAAA,GAAA,EAAA,WAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,MAAA,IAAA,EAAA,MAAA,IAAA,MAAA,uBAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,IAAA,MAAA,wBAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,WAAA,OAAA,GAAA,IAAA,aAAA,OAAA,GAAA,EAAA,EAAA,GAAA,IAAA,kBAAA,IAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,GAAA,EAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,eAAA,EAAA,EAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,uBAAA,EAAA,WAAA,SAAA,GAAA,IAAA,EAAA,GAAA,YAAA,GAAA,EAAA,gBAAA,EAAA,iBAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,eAAA,OAAA,SAAA,GAAA,OAAA,EAAA,YAAA,QAAA,SAAA,GAAA,EAAA,SAAA,EAAA,KAAA,GAAA,EAAA,KAAA,KAAA,EAAA,QAAA,SAAA,GAAA,GAAA,uBAAA,EAAA,IAAA,EAAA,KAAA,KAAA,EAAA,EAAA,IAAA,SAAA,GAAA,OAAA,EAAA,gBAAA,EAAA,gBAAA,SAAA,EAAA,GAAA,IAAA,EAAA,OAAA,EAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,GAAA,IAAA,IAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,QAAA,OAAA,EAAA,MAAA,IAAA,QAAA,OAAA,SAAA,EAAA,GAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,CAAA,EAAA,YAAA,EAAA,aAAA,IAAA,aAAA,OAAA,GAAA,EAAA,GAAA,IAAA,UAAA,OAAA,GAAA,EAAA,GAAA,MAAA,IAAA,aAAA,OAAA,EAAA,MAAA,IAAA,QAAA,OAAA,GAAA,EAAA,GAAA,IAAA,aAAA,OAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,SAAA,OAAA,EAAA,CAAA,EAAA,GAAA,IAAA,UAAA,OAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,OAAA,EAAA,MAAA,IAAA,QAAA,OAAA,GAAA,EAAA,GAAA,IAAA,aAAA,OAAA,GAAA,EAAA,GAAA,IAAA,UAAA,OAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,GAAA,OAAA,IAAA,GAAA,GAAA,EAAA,YAAA,GAAA,GAAA,GAAA,OAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,GAAA,OAAA,IAAA,GAAA,GAAA,EAAA,YAAA,GAAA,GAAA,GAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,SAAA,EAAA,cAAA,GAAA,EAAA,gBAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,GAAA,IAAA,QAAA,OAAA,GAAA,IAAA,QAAA,OAAA,GAAA,EAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,2BAAA,IAAA,aAAA,OAAA,GAAA,IAAA,QAAA,OAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,IAAA,GAAA,GAAA,EAAA,YAAA,GAAA,EAAA,aAAA,CAAA,GAAA,EAAA,MAAA,OAAA,EAAA,CAAA,EAAA,GAAA,IAAA,aAAA,OAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,IAAA,CAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,IAAA,GAAA,GAAA,EAAA,YAAA,GAAA,EAAA,YAAA,IAAA,CAAA,GAAA,EAAA,MAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,2BAAA,IAAA,aAAA,OAAA,GAAA,IAAA,QAAA,OAAA,GAAA,EAAA,EAAA,CAAA,mBAAA,IAAA,IAAA,aAAA,OAAA,SAAA,EAAA,GAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,IAAA,GAAA,GAAA,CAAA,KAAA,QAAA,YAAA,EAAA,YAAA,IAAA,EAAA,CAAA,mBAAA,MAAA,GAAA,IAAA,GAAA,CAAA,KAAA,QAAA,YAAA,EAAA,YAAA,IAAA,EAAA,CAAA,mBAAA,IAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,IAAA,aAAA,OAAA,SAAA,EAAA,GAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,IAAA,GAAA,GAAA,EAAA,YAAA,GAAA,EAAA,CAAA,mBAAA,MAAA,GAAA,IAAA,GAAA,EAAA,YAAA,GAAA,GAAA,OAAA,EAAA,QAAA,EAAA,CAAA,EAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,2BAAA,IAAA,UAAA,OAAA,GAAA,IAAA,QAAA,OAAA,GAAA,EAAA,EAAA,CAAA,gBAAA,IAAA,IAAA,aAAA,OAAA,SAAA,EAAA,GAAA,IAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,KAAA,EAAA,EAAA,YAAA,OAAA,EAAA,IAAA,CAAA,GAAA,GAAA,CAAA,KAAA,QAAA,YAAA,SAAA,EAAA,GAAA,MAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,CAAA,EAAA,YAAA,GAAA,EAAA,YAAA,EAAA,KAAA,EAAA,CAAA,gBAAA,IAAA,CAAA,GAAA,EAAA,OAAA,OAAA,EAAA,CAAA,EAAA,GAAA,IAAA,UAAA,OAAA,SAAA,EAAA,GAAA,IAAA,GAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,GAAA,OAAA,IAAA,IAAA,GAAA,EAAA,YAAA,GAAA,GAAA,GAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,IAAA,aAAA,OAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,IAAA,IAAA,GAAA,EAAA,YAAA,GAAA,EAAA,CAAA,gBAAA,IAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,2BAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,6BAAA,EAAA,eAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,GAAA,IAAA,aAAA,OAAA,GAAA,IAAA,aAAA,OAAA,GAAA,EAAA,GAAA,IAAA,UAAA,OAAA,GAAA,EAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,2BAAA,IAAA,aAAA,OAAA,GAAA,IAAA,aAAA,OAAA,GAAA,EAAA,GAAA,IAAA,aAAA,OAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,SAAA,OAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,OAAA,EAAA,IAAA,CAAA,IAAA,GAAA,EAAA,GAAA,IAAA,GAAA,IAAA,EAAA,YAAA,OAAA,IAAA,GAAA,GAAA,GAAA,EAAA,YAAA,GAAA,EAAA,YAAA,EAAA,GAAA,EAAA,YAAA,GAAA,GAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,IAAA,UAAA,OAAA,GAAA,EAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,2BAAA,IAAA,UAAA,OAAA,GAAA,IAAA,aAAA,OAAA,GAAA,EAAA,GAAA,IAAA,aAAA,OAAA,GAAA,EAAA,GAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,2BAAA,QAAA,MAAA,IAAA,MAAA,YAAA,EAAA,6BAAA,EAAA,iBAAA,GAAA,EAAA,eAAA,GAAA,EAAA,mBAAA,GAAA,EAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,IAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,OAAA,EAAA,KAAA,EAAA,IAAA,IAAA,GAAA,CAAA,UAAA,IAAA,QAAA,GAAA,GAAA,GAAA,KAAA,EAAA,cAAA,GAAA,EAAA,MAAA,GAAA,EAAA,YAAA,GAAA,EAAA,eAAA,SAAA,EAAA,EAAA,GAAA,GAAA,iBAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,QAAA,6BAAA,MAAA,EAAA,MAAA,IAAA,MAAA,2BAAA,KAAA,KAAA,KAAA,GAAA,GAAA,MAAA,IAAA,MAAA,uBAAA,KAAA,MAAA,GAAA,KAAA,KAAA,GAAA,GAAA,MAAA,IAAA,MAAA,qBAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,GAAA,OAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,QAAA,SAAA,GAAA,IAAA,EAAA,QAAA,SAAA,GAAA,IAAA,EAAA,EAAA,SAAA,GAAA,EAAA,aAAA,EAAA,WAAA,IAAA,EAAA,WAAA,QAAA,EAAA,EAAA,WAAA,OAAA,WAAA,EAAA,MAAA,QAAA,SAAA,GAAA,IAAA,EAAA,EAAA,SAAA,GAAA,EAAA,aAAA,EAAA,WAAA,IAAA,EAAA,WAAA,QAAA,EAAA,WAAA,OAAA,OAAA,EAAA,WAAA,OAAA,UAAA,GAAA,EAAA,eAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,iBAAA,EAAA,EAAA,OAAA,EAAA,EAAA,QAAA,6BAAA,IAAA,EAAA,EAAA,SAAA,QAAA,EAAA,GAAA,KAAA,MAAA,KAAA,KAAA,EAAA,KAAA,IAAA,EAAA,IAAA,IAAA,QAAA,IAAA,IAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,UAAA,QAAA,SAAA,EAAA,GAAA,EAAA,GAAA,IAAA,EAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,GAAA,EAAA,WAAA,QAAA,EAAA,EAAA,WAAA,SAAA,EAAA,KAAA,GAAA,EAAA,oBAAA,GAAA,EAAA,gBAAA,SAAA,EAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,qBAAA,IAAA,EAAA,MAAA,IAAA,MAAA,qBAAA,GAAA,eAAA,GAAA,EAAA,SAAA,MAAA,IAAA,MAAA,8BAAA,GAAA,eAAA,GAAA,EAAA,SAAA,MAAA,IAAA,MAAA,8BAAA,IAAA,IAAA,EAAA,GAAA,GAAA,IAAA,SAAA,EAAA,GAAA,GAAA,IAAA,SAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,SAAA,YAAA,IAAA,EAAA,GAAA,MAAA,IAAA,SAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,CAAA,EAAA,EAAA,GAAA,SAAA,aAAA,OAAA,EAAA,OAAA,GAAA,EAAA,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,WAAA,EAAA,EAAA,YAAA,EAAA,EAAA,WAAA,EAAA,IAAA,IAAA,EAAA,MAAA,IAAA,MAAA,qBAAA,IAAA,EAAA,MAAA,IAAA,MAAA,mBAAA,GAAA,IAAA,EAAA,IAAA,GAAA,EAAA,MAAA,IAAA,MAAA,uDAAA,GAAA,EAAA,MAAA,IAAA,MAAA,8CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,IAAA,oBAAA,GAAA,IAAA,EAAA,SAAA,OAAA,OAAA,EAAA,CAAA,EAAA,IAAA,MAAA,IAAA,UAAA,EAAA,EAAA,CAAA,EAAA,EAAA,MAAA,MAAA,QAAA,MAAA,IAAA,MAAA,qBAAA,IAAA,EAAA,EAAA,EAAA,SAAA,KAAA,GAAA,EAAA,SAAA,KAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,OAAA,IAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,GAAA,EAAA,IAAA,GAAA,KAAA,EAAA,SAAA,MAAA,EAAA,SAAA,MAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,MAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,MAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,CAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,OAAA,IAAA,GAAA,GAAA,EAAA,EAAA,SAAA,IAAA,OAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,IAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,EAAA,IAAA,IAAA,EAAA,IAAA,GAAA,EAAA,CAAA,UAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,GAAA,OAAA,GAAA,OAAA,EAAA,EAAA,GAAA,QAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,MAAA,KAAA,EAAA,KAAA,EAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,GAAA,GAAA,EAAA,KAAA,EAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,MAAA,EAAA,KAAA,GAAA,IAAA,IAAA,IAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,MAAA,QAAA,GAAA,MAAA,IAAA,MAAA,mBAAA,OAAA,EAAA,EAAA,QAAA,UAAA,EAAA,WAAA,SAAA,EAAA,GAAA,OAAA,IAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,CAAA,KAAA,MAAA,EAAA,EAAA,EAAA,GAAA,IAAA,GAAA,KAAA,MAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,OAAA,EAAA,MAAA,EAAA,EAAA,KAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,OAAA,EAAA,SAAA,SAAA,GAAA,OAAA,EAAA,GAAA,YAAA,EAAA,MAAA,SAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,UAAA,SAAA,GAAA,OAAA,EAAA,GAAA,aAAA,EAAA,EAAA,SAAA,GAAA,OAAA,UAAA,QAAA,EAAA,mBAAA,EAAA,EAAA,IAAA,GAAA,GAAA,GAAA,EAAA,EAAA,SAAA,GAAA,OAAA,UAAA,QAAA,EAAA,maAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,GAAA,MAAA,IAAA,MAAA,4BAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,CAAA,OAAA,EAAA,SAAA,EAAA,EAAA,IAAA,OAAA,EAAA,EAAA,SAAA,GAAA,EAAA,SAAA,KAAA,GAAA,EAAA,CAAA,OAAA,EAAA,WAAA,QAAA,EAAA,WAAA,CAAA,UAAA,EAAA,UAAA,iBAAA,IAAA,GAAA,EAAA,SAAA,YAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,2BAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,OAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,YAAA,GAAA,IAAA,EAAA,GAAA,MAAA,IAAA,MAAA,0BAAA,IAAA,EAAA,GAAA,MAAA,IAAA,MAAA,+BAAA,IAAA,EAAA,EAAA,GAAA,OAAA,EAAA,GAAA,EAAA,CAAA,OAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,EAAA,WAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,KAAA,KAAA,IAAA,EAAA,GAAA,EAAA,KAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,MAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,KAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,EAAA,WAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,GAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,GAAA,GAAA,EAAA,GAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,KAAA,IAAA,GAAA,GAAA,EAAA,GAAA,IAAA,IAAA,EAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,MAAA,UAAA,MAAA,EAAA,MAAA,EAAA,WAAA,IAAA,EAAA,GAAA,EAAA,EAAA,CAAA,KAAA,EAAA,CAAA,sBAAA,EAAA,GAAA,cAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,wBAAA,IAAA,EAAA,GAAA,OAAA,GAAA,OAAA,EAAA,WAAA,2BAAA,EAAA,GAAA,EAAA,WAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,YAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,IAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,IAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,UAAA,KAAA,GAAA,IAAA,IAAA,MAAA,GAAA,IAAA,EAAA,OAAA,SAAA,EAAA,EAAA,GAAA,IAAA,GAAA,EAAA,GAAA,IAAA,MAAA,EAAA,EAAA,OAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,uBAAA,GAAA,iBAAA,EAAA,MAAA,IAAA,MAAA,6BAAA,GAAA,iBAAA,EAAA,MAAA,IAAA,MAAA,2BAAA,QAAA,IAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,GAAA,GAAA,EAAA,MAAA,IAAA,MAAA,gCAAA,EAAA,GAAA,GAAA,EAAA,GAAA,aAAA,IAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,qBAAA,OAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,KAAA,EAAA,GAAA,IAAA,oBAAA,OAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,SAAA,GAAA,GAAA,EAAA,KAAA,OAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,GAAA,EAAA,UAAA,GAAA,EAAA,SAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,aAAA,EAAA,EAAA,UAAA,YAAA,IAAA,EAAA,GAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,EAAA,QAAA,SAAA,EAAA,GAAA,EAAA,WAAA,kBAAA,IAAA,IAAA,EAAA,KAAA,IAAA,IAAA,KAAA,EAAA,KAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,GAAA,SAAA,QAAA,SAAA,GAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,WAAA,kBAAA,GAAA,EAAA,OAAA,GAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,OAAA,GAAA,GAAA,EAAA,WAAA,CAAA,IAAA,EAAA,GAAA,EAAA,GAAA,IAAA,IAAA,GAAA,GAAA,GAAA,KAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,GAAA,SAAA,IAAA,GAAA,EAAA,WAAA,KAAA,EAAA,WAAA,IAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,SAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,WAAA,mBAAA,EAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,OAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,WAAA,kBAAA,EAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,WAAA,oBAAA,EAAA,WAAA,oBAAA,GAAA,OAAA,EAAA,CAAA,IAAA,EAAA,SAAA,EAAA,WAAA,kBAAA,EAAA,EAAA,OAAA,GAAA,KAAA,OAAA,EAAA,QAAA,SAAA,UAAA,EAAA,WAAA,yBAAA,EAAA,OAAA,GAAA,EAAA,QAAA,GAAA,EAAA,KAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,EAAA,SAAA,aaAAA,GAAA,EAAA,YAAA,SAAA,EAAA,EAAA,GAAA,GAAA,iBAAA,EAAA,GAAA,IAAA,MAAA,IAAA,MAAA,sBAAA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,OAAA,IAAA,EAAA,MAAA,IAAA,MAAA,sBAAA,GAAA,EAAA,EAAA,QAAA,8BAAA,EAAA,MAAA,IAAA,MAAA,wBAAA,QAAA,IAAA,GAAA,iBAAA,EAAA,MAAA,IAAA,MAAA,2BAAA,EAAA,GAAA,YAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,IAAA,QAAA,IAAA,SAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,IAAA,SAAA,IAAA,UAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,IAAA,MAAA,IAAA,QAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,IAAA,WAAA,IAAA,YAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,QAAA,MAAA,IAAA,MAAA,oBAAA,IAAA,EAAA,GAAA,OAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,EAAA,GAAA,UAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,QAAA,IAAA,IAAA,EAAA,EAAA,WAAA,SAAA,IAAA,IAAA,EAAA,EAAA,SAAA,YAAA,SAAA,IAAA,EAAA,MAAA,IAAA,MAAA,qBAAA,IAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,GAAA,GAAA,EAAA,WAAA,GAAA,EAAA,EAAA,EAAA,KAAA,KAAA,EAAA,IAAA,EAAA,eAAA,GAAA,EAAA,oBAAA,GAAA,EAAA,oBAAA,GAAA,EAAA,OAAA,GAAA,EAAA,OAAA,GAAA,EAAA,OAAA,GAAA,EAAA,QAAA,GAAA,EAAA,YAAA,GAAA,EAAA,aAAA,GAAA,EAAA,gBAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,eAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,WAAA,GAAA,EAAA,QAAA,GAAA,EAAA,eAAA,GAAA,EAAA,YAAA,GAAA,EAAA,cAAA,GAAA,EAAA,iBAAA,GAAA,EAAA,WAAA,GAAA,EAAA,YAAA,GAAA,EAAA,cAAA,GAAA,EAAA,WAAA,GAAA,EAAA,YAAA,GAAA,EAAA,yBAAA,GAAA,EAAA,iBAAA,GAAA,EAAA,YAAA,GAAA,EAAA,QAAA,GAAA,EAAA,aAAA,GAAA,EAAA,YAAA,GAAA,EAAA,QAAA,EAAA,EAAA,SAAA,EAAA,EAAA,MAAA,EAAA,EAAA,OAAA,EAAA,EAAA,QAAA,EAAA,EAAA,SAAA,EAAA,EAAA,WAAA,EAAA,EAAA,YAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,WAAA,EAAA,EAAA,aAAA,EAAA,EAAA,mBAAA,EAAA,EAAA,MAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,iBAAA,EAAA,EAAA,iBAAA,EAAA,EAAA,iBAAA,EAAA,EAAA,cAAA,EAAA,EAAA,YAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,aAAA,EAAA,EAAA,WAAA,EAAA,EAAA,SAAA,EAAA,EAAA,UAAA,EAAA,EAAA,eAAA,EAAA,EAAA,YAAA,EAAA,EAAA,UAAA,EAAA,EAAA,aAAA,EAAA,EAAA,QAAA,EAAA,EAAA,YAAA,EAAA,EAAA,QAAA,EAAA,EAAA,UAAA,EAAA,EAAA,YAAA,EAAA,EAAA,SAAA,EAAA,EAAA,WAAA,EAAA,EAAA,YAAA,EAAA,EAAA,cAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,WAAA,EAAA,EAAA,YAAA,EAAA,EAAA,cAAA,EAAA,EAAA,YAAA,EAAA,EAAA,cAAA,EAAA,EAAA,SAAA,EAAA,EAAA,WAAA,EAAA,OAAA,eAAA,EAAA,aAAA,CAAA,OAAA;;ACAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,IAAC,SAAUmH,EAAMC,GAGM,YAAXC,oBAAAA,OAAAA,YAAAA,EAAAA,UAAiD,WAA1B,EAAOA,OAAOC,WAC7CA,QAAUD,OAAOC,QAAUF,KAIR,YAAXlG,oBAAAA,OAAAA,YAAAA,EAAAA,WACRiG,EAAKI,YAAcH,KATtB,CAYC,KAAM,WACFE,IAAAA,EAAU,GACVE,EAAc,QACdC,EAAmB,kBACnBC,EAAoB,iBACpBC,EAAc,CACJ,KAAA,OACM,WAAA,CACJ,KAAA,sDACA,KAAA,WAcPC,SAAAA,EAAQC,GACR5F,MAAwC,mBAAxCA,OAAO6F,UAAUC,SAASC,KAAKH,GAiB/BI,SAAAA,EAAOC,EAAaC,GACtB,IAAA,IAAIC,KAAKD,EACRA,EAAOE,eAAeD,KACxBF,EAAYE,GAAKD,EAAOC,IAGrBF,OAAAA,EAMAI,SAAAA,EAAiBC,GACrBA,GAAAA,EAAQC,KACDD,OAAAA,EAAQC,MACT,IAAA,QACI,MAAA,CAAED,EAAQE,YAAY,GAAIF,EAAQE,YAAY,GAAIF,EAAQE,YAAY,GAAIF,EAAQE,YAAY,IAElG,IAAA,aAGA,IAAA,aACIC,OAAAA,EAAyBH,EAAQE,aAErC,IAAA,kBAGA,IAAA,UACIE,OAAAA,EAAgCJ,EAAQE,aAE5C,IAAA,eACIG,OAiFNA,SAAwCC,GAG1C,IAFDC,IAAAA,EAAK,KAAMC,EAAK,KAAMC,EAAK,KAAMC,EAAK,KAEjCC,EAAI,EAAGA,EAAIL,EAAM1G,OAAQ+G,IAG3B,IAFDC,IAAAA,EAAQN,EAAMK,GAETE,EAAI,EAAGA,EAAID,EAAMhH,OAAQiH,IAE3B,IADDC,IAAAA,EAAaF,EAAMC,GACdhB,EAAI,EAAGA,EAAIiB,EAAWlH,OAAQiG,IAAK,CACtCkB,IAAAA,EAASD,EAAWjB,GAEpBmB,EAAMD,EAAO,GACbE,EAAMF,EAAO,GAEN,OAAPR,EACFA,EAAKS,EACIA,EAAMT,IACfA,EAAKS,GAGI,OAAPR,EACFA,EAAKQ,EACIA,EAAMR,IACfA,EAAKQ,GAGI,OAAPP,EACFA,EAAKQ,EACIA,EAAMR,IACfA,EAAKQ,GAGI,OAAPP,EACFA,EAAKO,EACIA,EAAMP,IACfA,EAAKO,GAMN,MAAA,CAACV,EAAIE,EAAID,EAAIE,GA1HPL,CAAuCL,EAAQE,aAEnD,IAAA,UACIF,OAAAA,EAAQkB,SAAUnB,EAAgBC,EAAQkB,UAAY,KAE1D,IAAA,oBACIC,OAoKNA,SAAoCC,GAEtC,IADDC,IAAcC,EAAdD,EAAU,GACLV,EAAIS,EAAkBtH,SAASF,OAAS,EAAG+G,GAAK,EAAGA,IAC1DW,EAASvB,EAAgBqB,EAAkBtH,SAAS6G,GAAGO,UACvDG,EAAQE,KAAK,CAACD,EAAO,GAAGA,EAAO,KAC/BD,EAAQE,KAAK,CAACD,EAAO,GAAGA,EAAO,KAG1BnB,OAAAA,EAAyBkB,GA5KnBF,CAAoCnB,GAExC,IAAA,qBACIwB,OA+KNA,SAAqCC,GAGvC,IAFDJ,IAAcC,EAAdD,EAAU,GAELV,EAAIc,EAAmBC,WAAW9H,OAAS,EAAG+G,GAAK,EAAGA,IAC7DW,EAASvB,EAAgB0B,EAAmBC,WAAWf,IACvDU,EAAQE,KAAK,CAACD,EAAO,GAAGA,EAAO,KAC/BD,EAAQE,KAAK,CAACD,EAAO,GAAGA,EAAO,KAG1BnB,OAAAA,EAAyBkB,GAxLnBG,CAAqCxB,GAE9C,QACQ,MAAA,IAAI2B,MAAM,iBAAmB3B,EAAQC,MAG1C,OAAA,KAiBAG,SAAAA,EAAiCE,GAGnC,IAFDC,IAAAA,EAAK,KAAMC,EAAK,KAAMC,EAAK,KAAMC,EAAK,KAEjCC,EAAI,EAAGA,EAAIL,EAAM1G,OAAQ+G,IAG3B,IAFDC,IAAAA,EAAQN,EAAMK,GAETE,EAAI,EAAGA,EAAID,EAAMhH,OAAQiH,IAAK,CACjCE,IAAAA,EAASH,EAAMC,GAEfG,EAAMD,EAAO,GACbE,EAAMF,EAAO,GAEN,OAAPR,EACFA,EAAKS,EACIA,EAAMT,IACfA,EAAKS,GAGI,OAAPR,EACFA,EAAKQ,EACIA,EAAMR,IACfA,EAAKQ,GAGI,OAAPP,EACFA,EAAKQ,EACIA,EAAMR,IACfA,EAAKQ,GAGI,OAAPP,EACFA,EAAKO,EACIA,EAAMP,IACfA,EAAKO,GAKJ,MAAA,CAACV,EAAIE,EAAID,EAAIE,GA6DbP,SAAAA,EAA0BG,GAG5B,IAFDC,IAAAA,EAAK,KAAMC,EAAK,KAAMC,EAAK,KAAMC,EAAK,KAEjCC,EAAI,EAAGA,EAAIL,EAAM1G,OAAQ+G,IAAK,CACjCI,IAAAA,EAAST,EAAMK,GACfK,EAAMD,EAAO,GACbE,EAAMF,EAAO,GAEN,OAAPR,EACFA,EAAKS,EACIA,EAAMT,IACfA,EAAKS,GAGI,OAAPR,EACFA,EAAKQ,EACIA,EAAMR,IACfA,EAAKQ,GAGI,OAAPP,EACFA,EAAKQ,EACIA,EAAMR,IACfA,EAAKQ,GAGI,OAAPP,EACFA,EAAKO,EACIA,EAAMP,IACfA,EAAKO,GAIF,MAAA,CAACV,EAAIE,EAAID,EAAIE,GAgCbkB,SAAAA,EAAkB5B,GACrB6B,IAAAA,EAAS9B,EAAgBC,GACtB,MAAA,CACL8B,EAAGD,EAAO,GACVE,EAAGF,EAAO,GACVG,EAAGC,KAAKC,IAAIL,EAAO,GAAKA,EAAO,IAC/BM,EAAGF,KAAKC,IAAIL,EAAO,GAAKA,EAAO,KAO1BO,SAAAA,EAASC,GACTA,OAAAA,EAAMnD,EAMNoD,SAAAA,EAASC,GACTA,OAAAA,EAAMpD,EAuBNqD,SAAAA,EAAqBC,GACxBX,IAAAA,EAAIW,EAAS,GACbV,EAAIU,EAAS,GACV,MAAA,CAACL,EAASN,EAAI7C,GAAsE,IAAtDgD,KAAK/G,OAAOkH,EAASN,EAAI7C,GAAe,KAAO,KAAamD,EAAUH,KAAKS,GAAK,EAAM,EAAIT,KAAKU,KAAKV,KAAKW,KAAK,EAAMb,EAAI9C,MAMtJ4D,SAAAA,EAAmBJ,GACtBK,IAAAA,EAAML,EAAS,GACfxB,EAAMgB,KAAKc,IAAId,KAAKe,IAAIP,EAAS,GAAI,WAAY,UAC9C,MAAA,CAACH,EAASQ,GAAO7D,EAAaA,EAAY,EAAMgD,KAAKgB,KAAM,EAAMhB,KAAKiB,IAAIZ,EAASrB,MAAU,EAAMgB,KAAKiB,IAAIZ,EAASrB,OAMrHkC,SAAAA,EAAenD,EAASoD,EAAWC,GACvCrD,GAAiB,UAAjBA,EAAQC,KACTD,EAAQE,YAAckD,EAAUpD,EAAQE,kBACnC,GAAoB,YAAjBF,EAAQC,KAChBD,EAAQkB,SAAWiC,EAAenD,EAAQkB,SAAUkC,GAAW,QAC1D,GAAoB,sBAAjBpD,EAAQC,KACX,IAAA,IAAIqD,EAAI,EAAGA,EAAItD,EAAQlG,SAASF,OAAQ0J,IAC3CtD,EAAQlG,SAASwJ,GAAKH,EAAenD,EAAQlG,SAASwJ,GAAIF,GAAW,QAElE,GAAoB,uBAAjBpD,EAAQC,KACX,IAAA,IAAIsD,EAAI,EAAGA,EAAIvD,EAAQ0B,WAAW9H,OAAQ2J,IAC7CvD,EAAQ0B,WAAW6B,GAAKJ,EAAenD,EAAQ0B,WAAW6B,GAAIH,GAAW,QAG3EpD,EAAQE,YAjDHsD,SAAAA,EAAatD,EAAauD,GAC5B,IAAA,IAAI9C,EAAI,EAAGA,EAAIT,EAAYtG,OAAQ+G,IAEN,iBAAtBT,EAAYS,GAAG,KACvBT,EAAYS,GAAK8C,EAAKvD,EAAYS,KAGP,WAA1B,EAAOT,EAAYS,MACpBT,EAAYS,GAAK6C,EAAatD,EAAYS,GAAI8C,IAG3CvD,OAAAA,EAsCiBsD,CAAaxD,EAAQE,YAAakD,GAanDpD,OAVHqD,GACCD,IAAcP,IACf7C,EAAQ0D,IAAMtE,GAIfgE,IAAcZ,UACRxC,EAAQ0D,IAGV1D,EAMA2D,SAAAA,EAAW3D,GACXmD,OAAAA,EAAenD,EAAS6C,GAMxBe,SAAAA,EAAa5D,GACbmD,OAAAA,EAAenD,EAASwC,GAoBxBqB,SAAAA,EAASC,EAAIC,GAChBD,OAAAA,EAAG,GAAKC,EAAG,IACL,EACCD,EAAG,GAAKC,EAAG,GACb,EACED,EAAG,GAAKC,EAAG,IACZ,EACCD,EAAG,GAAKC,EAAG,GACb,EAEA,EAQFC,SAAAA,EAAKC,EAAGC,EAAGC,GAEXC,OAjCIC,GAiCCH,EAAE,GAAKD,EAAE,KAAOE,EAAE,GAAKF,EAAE,KAAOE,EAAE,GAAKF,EAAE,KAAOC,EAAE,GAAKD,EAAE,MAjCvDK,EAiC4D,IA/BhE,EACAD,EAAIC,EACL,EAEA,EANFF,IAAIC,EAAGC,EAuCPC,SAAAA,EAAkBN,EAAGC,GAExBM,IAAAA,EAAKN,EAAE,GAAKD,EAAE,GACdQ,EAAKP,EAAE,GAAKD,EAAE,GAEXO,OAAAA,EAAKA,EAAKC,EAAKA,EAGfC,SAAAA,EAAcC,EAAQV,GAEzBC,IAAAA,EAAID,EACJ,IAAA,IAAIE,KAAKQ,EAAQ,CACfC,IAAAA,EAAIZ,EAAKC,EAAGC,EAAGS,EAAOR,MAChB,IAAPS,GAAkB,IAANA,GAAWL,EAAkBN,EAAGU,EAAOR,IAAMI,EAAkBN,EAAGC,MAC/EA,EAAIS,EAAOR,IAGRD,OAAAA,EAGAW,SAAAA,EAAWF,GAIfA,GAAkB,IAAlBA,EAAO/K,OACD,MAAA,GACF,GAAqB,IAAlB+K,EAAO/K,OACR+K,OAAAA,EAML,IAFAG,IAAAA,EAAO,CAACH,EAAOI,KAAKlB,GAAU,IAE1BI,EAAI,EAAGA,EAAIa,EAAKlL,OAAQqK,IAAK,CAC/BC,IAAAA,EAAIQ,EAAcC,EAAQG,EAAKb,IAEhCC,IAAMY,EAAK,IACZA,EAAKvD,KAAK2C,GAIPY,OAAAA,EA+BAE,SAAAA,EAAwB9E,EAAa+E,GAExC,IADAC,IAAAA,GAAW,EACPvE,GAAK,EAAGwE,EAAIjF,EAAYtG,OAAQiH,EAAIsE,EAAI,IAAKxE,EAAIwE,EAAGtE,EAAIF,GACxDT,EAAYS,GAAG,IAAMsE,EAAM,IAAMA,EAAM,GAAK/E,EAAYW,GAAG,IAC3DX,EAAYW,GAAG,IAAMoE,EAAM,IAAMA,EAAM,GAAK/E,EAAYS,GAAG,KAC5DsE,EAAM,IAAM/E,EAAYW,GAAG,GAAKX,EAAYS,GAAG,KAAOsE,EAAM,GAAK/E,EAAYS,GAAG,KAAOT,EAAYW,GAAG,GAAKX,EAAYS,GAAG,IAAMT,EAAYS,GAAG,KAClJuE,GAAYA,GAGTA,OAAAA,EAGAE,SAAAA,EAAqBC,EAASJ,GACjCI,GAAAA,GAAWA,EAAQzL,OAAQ,CACzByL,GAAmB,IAAnBA,EAAQzL,OACHoL,OAAAA,EAAwBK,EAAQ,GAAIJ,GAEvCD,GAAAA,EAAwBK,EAAQ,GAAIJ,GAAQ,CACzC,IAAA,IAAItE,EAAI,EAAGA,EAAI0E,EAAQzL,OAAQ+G,IAC9BqE,GAAAA,EAAwBK,EAAQ1E,GAAIsE,GAC/B,OAAA,EAIJ,OAAA,EAEA,OAAA,EAIJ,OAAA,EAIFK,SAAAA,EAAmBC,EAAIC,EAAIC,EAAIC,GAClCC,IAAAA,GAAQD,EAAG,GAAKD,EAAG,KAAOF,EAAG,GAAKE,EAAG,KAAOC,EAAG,GAAKD,EAAG,KAAOF,EAAG,GAAKE,EAAG,IACzEG,GAAQJ,EAAG,GAAKD,EAAG,KAAOA,EAAG,GAAKE,EAAG,KAAOD,EAAG,GAAKD,EAAG,KAAOA,EAAG,GAAKE,EAAG,IACzEI,GAAQH,EAAG,GAAKD,EAAG,KAAOD,EAAG,GAAKD,EAAG,KAAOG,EAAG,GAAKD,EAAG,KAAOD,EAAG,GAAKD,EAAG,IAExEM,GAAQ,IAARA,EAAY,CACXC,IAAAA,EAAKH,EAAOE,EACZE,EAAKH,EAAOC,EAEX,GAAA,GAAKC,GAAMA,GAAM,GAAK,GAAKC,GAAMA,GAAM,EACnC,OAAA,EAIJ,OAAA,EAGAC,SAAAA,EAASC,GACT,OAACC,MAAMC,WAAWF,KAAOG,SAASH,GAGlCI,SAAAA,EAAsBhC,EAAGC,GAC5B0B,GAAAA,EAAS3B,EAAE,GAAG,KACZ2B,GAAAA,EAAS1B,EAAE,GAAG,KACX,IAAA,IAAI3D,EAAI,EAAGA,EAAI0D,EAAEzK,OAAS,EAAG+G,IAC3B,IAAA,IAAIE,EAAI,EAAGA,EAAIyD,EAAE1K,OAAS,EAAGiH,IAC5ByE,GAAAA,EAAmBjB,EAAE1D,GAAI0D,EAAE1D,EAAI,GAAI2D,EAAEzD,GAAIyD,EAAEzD,EAAI,IAC1C,OAAA,OAKR,IAAA,IAAIhB,EAAI,EAAGA,EAAIyE,EAAE1K,OAAQiG,IACxBwG,GAAAA,EAAsBhC,EAAGC,EAAEzE,IACtB,OAAA,OAKR,IAAA,IAAIsF,EAAI,EAAGA,EAAId,EAAEzK,OAAQuL,IACxBkB,GAAAA,EAAsBhC,EAAEc,GAAIb,GACvB,OAAA,EAIN,OAAA,EAMAgC,SAAAA,EAAcpG,GAGhB,IAFDqG,IAAAA,EAAQ,GAEH5F,EAAI,EAAGA,EAAIT,EAAYtG,OAAQ+G,IAAK,CACvCC,IAAAA,EAAQV,EAAYS,GAAG6F,SAC4B,IAAnDC,EAAY7F,EAAM,GAAIA,EAAMA,EAAMhH,OAAS,KAC7CgH,EAAMW,KAAKX,EAAM,IAGnB2F,EAAMhF,KAAKX,GAGN2F,OAAAA,EAGAE,SAAAA,EAAYpC,EAAGC,GACjB,IAAA,IAAI3D,EAAI,EAAGA,EAAI0D,EAAEzK,OAAQ+G,IAExB0D,GAAAA,EAAE1D,KAAO2D,EAAE3D,GACN,OAAA,EAIJ,OAAA,EAGA+F,SAAAA,EAAiBrC,EAAGC,GACvBD,GAAAA,EAAEzK,SAAW0K,EAAE1K,OACV,OAAA,EAMJ,IAHD+M,IAAAA,EAAKtC,EAAEmC,QAAQzB,KAAKlB,GACpB+C,EAAKtC,EAAEkC,QAAQzB,KAAKlB,GAEflD,EAAI,EAAGA,EAAIgG,EAAG/M,OAAQ+G,IAAK,CAC9BgG,GAAAA,EAAGhG,GAAG/G,SAAWgN,EAAGjG,GAAG/G,OAClB,OAAA,EAEJ,IAAA,IAAIiH,EAAI,EAAGA,EAAI8F,EAAG/M,OAAQiH,IACzB8F,GAAAA,EAAGhG,GAAGE,KAAO+F,EAAGjG,GAAGE,GACd,OAAA,EAKN,OAAA,EAMLgG,IAAAA,EAAkB,CAAC,UAKdC,SAAAA,EAAU9G,GACdA,GAAAA,EACOA,OAAAA,EAAQC,MACX,IAAA,QACI,OAAA,IAAI8G,EAAM/G,GAEd,IAAA,aACI,OAAA,IAAIgH,EAAWhH,GAEnB,IAAA,aACI,OAAA,IAAIiH,EAAWjH,GAEnB,IAAA,kBACI,OAAA,IAAIkH,EAAgBlH,GAExB,IAAA,UACI,OAAA,IAAImH,EAAQnH,GAEhB,IAAA,eACI,OAAA,IAAIoH,EAAapH,GAErB,IAAA,UACI,OAAA,IAAIqH,EAAQrH,GAEhB,IAAA,oBACI,OAAA,IAAIsH,EAAkBtH,GAE1B,IAAA,qBACI,OAAA,IAAIuH,EAAmBvH,GAEhC,QACQ,MAAA,IAAI2B,MAAM,iBAAmB3B,EAAQC,OAoTxC8G,SAAAA,EAAMS,GACTC,IAAAA,EAAOC,MAAMnI,UAAUiH,MAAM/G,KAAKkI,WAEnCH,GAAAA,GAAwB,UAAfA,EAAMvH,MAAoBuH,EAAMtH,YAC1CR,EAAO,KAAM8H,QACR,GAAGA,GAASnI,EAAQmI,GACpBtH,KAAAA,YAAcsH,MACd,CAAA,KAAGC,EAAK7N,QAAU,GAGjB,KAAA,mDAFDsG,KAAAA,YAAcuH,EAKhBxH,KAAAA,KAAO,QAeL+G,SAAAA,EAAWQ,GACfA,GAAAA,GAAwB,eAAfA,EAAMvH,MAAyBuH,EAAMtH,YAC/CR,EAAO,KAAM8H,OACR,CAAA,IAAGnI,EAAQmI,GAGV,KAAA,wDAFDtH,KAAAA,YAAcsH,EAKhBvH,KAAAA,KAAO,aAwCLgH,SAAAA,EAAWO,GACfA,GAAAA,GAAwB,eAAfA,EAAMvH,MAAyBuH,EAAMtH,YAC/CR,EAAO,KAAM8H,OACR,CAAA,IAAGnI,EAAQmI,GAGV,KAAA,wDAFDtH,KAAAA,YAAcsH,EAKhBvH,KAAAA,KAAO,aA2BLiH,SAAAA,EAAgBM,GACpBA,GAAAA,GAAwB,oBAAfA,EAAMvH,MAA8BuH,EAAMtH,YACpDR,EAAO,KAAM8H,OACR,CAAA,IAAGnI,EAAQmI,GAGV,KAAA,6DAFDtH,KAAAA,YAAcsH,EAKhBvH,KAAAA,KAAO,kBAuBLkH,SAAAA,EAAQK,GACZA,GAAAA,GAAwB,YAAfA,EAAMvH,MAAsBuH,EAAMtH,YAC5CR,EAAO,KAAM8H,OACR,CAAA,IAAGnI,EAAQmI,GAGV,KAAA,qDAFDtH,KAAAA,YAAcsH,EAKhBvH,KAAAA,KAAO,UA0CLmH,SAAAA,EAAaI,GACjBA,GAAAA,GAAwB,iBAAfA,EAAMvH,MAA2BuH,EAAMtH,YACjDR,EAAO,KAAM8H,OACR,CAAA,IAAGnI,EAAQmI,GAGV,KAAA,0DAFDtH,KAAAA,YAAcsH,EAKhBvH,KAAAA,KAAO,eAqCLoH,SAAAA,EAAQG,GACZA,GAAAA,GAAwB,YAAfA,EAAMvH,KAChBP,EAAO,KAAM8H,OACR,CAAA,KAAGA,GAASA,EAAMvH,MAAQuH,EAAMtH,aAG/B,KAAA,qDAFDgB,KAAAA,SAAWsG,EAKbvH,KAAAA,KAAO,UAeLqH,SAAAA,EAAkBE,GACtBA,GAAAA,GAAwB,sBAAfA,EAAMvH,MAAgCuH,EAAM1N,SACtD4F,EAAO,KAAM8H,OACR,CAAA,IAAGnI,EAAQmI,GAGV,KAAA,+DAFD1N,KAAAA,SAAW0N,EAKbvH,KAAAA,KAAO,oBA6BLsH,SAAAA,EAAmBC,GACvBA,GAAAA,GAAwB,uBAAfA,EAAMvH,MAAiCuH,EAAM9F,WACvDhC,EAAO,KAAM8H,QACR,GAAGnI,EAAQmI,GACX9F,KAAAA,WAAa8F,MACb,CAAA,IAAGA,EAAMtH,cAAesH,EAAMvH,KAI7B,KAAA,gEAHDA,KAAAA,KAAO,qBACPyB,KAAAA,WAAa,CAAC8F,GAKhBvH,KAAAA,KAAO,qBAcL2H,SAAAA,EAAaC,EAAQC,EAAQC,GAOhC,IANAC,IAAAA,EAAmBnF,EAAmBgF,GACtCI,EAAQF,GAAe,GACvB1C,EAAU,CACZpF,KAAM,UACNC,YAAa,CAAC,KAERS,EAAE,EAAGA,GAAGsH,EAAOtH,IAAK,CACtBuH,IAAAA,EAAUvH,GAAK,IAAIsH,GAAShG,KAAKS,GAAK,IAC1C2C,EAAQnF,YAAY,GAAGqB,KAAK,CAACyG,EAAiB,GAAKF,EAAS7F,KAAKkG,IAAID,GAAUF,EAAiB,GAAKF,EAAS7F,KAAKiB,IAAIgF,KAIlHtE,OAFPyB,EAAQnF,YAAcoG,EAAcjB,EAAQnF,aAErC0D,EAAayB,GAGb+C,SAAAA,EAAQP,EAAQC,EAAQC,GAC3BE,IAAAA,EAAQF,GAAe,GACvB1F,EAAMyF,GAAU,IAEjB,IAACD,GAAUA,EAAOjO,OAAS,IAAMyI,IAAQ4F,EACpC,MAAA,IAAItG,MAAM,yDAGlBjC,EAAO,KAAM,IAAI2H,EAAQ,CACvBpH,KAAM,UACNiB,SAAU0G,EAAaC,EAAQxF,EAAK4F,GACpCI,WAAY,CACVP,OAAQzF,EACRwF,OAAQA,EACRI,MAAOA,MA2ENlJ,OAluBP+H,EAAUvH,UAAUoE,WAAa,WACxBA,OAAAA,EAAW,OAGpBmD,EAAUvH,UAAUqE,aAAe,WAC1BA,OAAAA,EAAa,OAGtBkD,EAAUvH,UAAU+I,SAAW,WACtB1G,OAAAA,EAAkB,OAG3BkF,EAAUvH,UAAUgJ,KAAO,WAClBxI,OAAAA,EAAgB,OAGzB+G,EAAUvH,UAAUsF,WAAa,WAC3B3E,IAAmBS,EAAGE,EAAtBX,EAAc,GACd,GAAc,UAAd,KAAKD,KACA,OAAA,KACF,GAAkB,eAAd,KAAKA,MAAuC,eAAd,KAAKA,KAAuB,CAC/D,KAAA,KAAKC,aAAe,KAAKA,YAAYtG,QAAU,GAG1C,OAAA,KAFPsG,EAAc,KAAKA,iBAIhB,GAAkB,YAAd,KAAKD,MAAoC,oBAAd,KAAKA,KAA4B,CACjE,KAAA,KAAKC,aAAe,KAAKA,YAAYtG,OAAS,GAQzC,OAAA,KAPF+G,IAAAA,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IACvCT,EAAcA,EAAYsI,OAAO,KAAKtI,YAAYS,IAEjDT,GAAAA,EAAYtG,OAAS,EACf,OAAA,UAKN,GAAkB,iBAAd,KAAKqG,KAAyB,CACnC,KAAA,KAAKC,aAAe,KAAKA,YAAYtG,OAAS,GAUzC,OAAA,KATF+G,IAAAA,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IAClCE,IAAAA,EAAI,EAAGA,EAAI,KAAKX,YAAYS,GAAG/G,OAAQiH,IAC1CX,EAAcA,EAAYsI,OAAO,KAAKtI,YAAYS,GAAGE,IAGtDX,GAAAA,EAAYtG,OAAS,EACf,OAAA,UAKN,GAAiB,YAAd,KAAKqG,KAAmB,CAEzBwI,OADS,IAAI3B,EAAU,KAAK5F,UAClB2D,aAGZ,OAAA,IAAIsC,EAAQ,CACjBlH,KAAM,UACNC,YAAaoG,EAAc,CAACzB,EAAW3E,QAI3C4G,EAAUvH,UAAUmJ,OAAS,WACvBpJ,IAAAA,EAAM,GACL,IAAA,IAAIxB,KAAO,KACV,KAAKgC,eAAehC,KAA0C,IAAlC+I,EAAgB8B,QAAQ7K,KACtDwB,EAAIxB,GAAO,KAAKA,IAIbwB,OADPA,EAAIiJ,KAAOxI,EAAgB,MACpBT,GAGTwH,EAAUvH,UAAU2F,SAAW,SAASuD,GAC/B,OAAA,IAAI3B,EAAU2B,GAAWG,OAAO,OAGzC9B,EAAUvH,UAAUqJ,OAAS,SAASH,GAChCvI,IAAaS,EAAGuE,EAQhBuD,GALmB,YAAnBA,EAAUxI,OACZwI,EAAYA,EAAUvH,UAID,UAAnBuH,EAAUxI,MACM,UAAd,KAAKA,KACAwG,OAAAA,EAAY,KAAKvG,YAAauI,EAAUvI,aAM/CuI,GAAmB,oBAAnBA,EAAUxI,MACM,UAAd,KAAKA,KACFU,IAAAA,EAAI,EAAGA,EAAI8H,EAAUvI,YAAYtG,OAAQ+G,IAAK,CAC7CkI,IAAAA,EAAa,CAAE5I,KAAM,aAAcC,YAAauI,EAAUvI,YAAYS,IAEtE,GAAA,KAAKiI,OAAOC,GACP,OAAA,EAOXJ,IAAmB,eAAnBA,EAAUxI,MAA4C,eAAnBwI,EAAUxI,OAC7B,UAAd,KAAKA,KACFU,IAAAA,EAAI,EAAGA,EAAI8H,EAAUvI,YAAYtG,OAAQ+G,IAAK,CAC7C,GAAA,KAAKT,YAAYtG,SAAW6O,EAAUvI,YAAYS,GAAG/G,OAChD,OAAA,EAGL6M,GAAAA,EAAY,KAAKvG,YAAauI,EAAUvI,YAAYS,IAC/C,OAAA,EAMX8H,GAAmB,YAAnBA,EAAUxI,KAAoB,CAE5B,GAAc,YAAd,KAAKA,KAAoB,CAEvBwI,GAAAA,EAAUvI,YAAYtG,SAAW,KAAKsG,YAAYtG,OAC/C+G,IAAAA,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IACnC+F,GAAAA,EAAiB,KAAKxG,YAAYS,GAAI8H,EAAUvI,YAAYS,IACvD,OAAA,EAKT,SAAA,KAAKT,YAAYtG,SAAUwL,EAAqBqD,EAAUvI,YAAa,KAAKA,YAAY,GAAG,OACrFmG,EAAsBC,EAAc,KAAKpG,aAAcoG,EAAcmC,EAAUvI,cAMpF,GAAkB,UAAd,KAAKD,KACPmF,OAAAA,EAAqBqD,EAAUvI,YAAa,KAAKA,aAGnD,GAAkB,eAAd,KAAKD,MAAuC,eAAd,KAAKA,KAAuB,CAC/D,IAAC,KAAKC,aAA2C,IAA5B,KAAKA,YAAYtG,OACjC,OAAA,EAGJ+G,IAAAA,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IACnCyE,IAAqE,IAArEA,EAAqBqD,EAAUvI,YAAa,KAAKA,YAAYS,IACxD,OAAA,EAIJ,OAAA,EAGF,GAAkB,oBAAd,KAAKV,KAA4B,CACrCU,IAAAA,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IAAK,CAGxCmI,IAAyB,IAFpB,IAAI7B,EAAW,KAAK/G,YAAYS,IAElCiI,OAAOH,GAEL,OADPvD,KACO,EAIJ,OAAA,EAGF,GAAkB,iBAAd,KAAKjF,KAAyB,CAClCU,IAAAA,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IAAK,CAGxCmD,IAAyB,IAFpB,IAAIgD,EAAU,CAAE7G,KAAM,UAAWC,YAAa,KAAKA,YAAYS,KAEjEiI,OAAOH,GACL,OAAA,EAIJ,OAAA,GAKPA,GAAmB,iBAAnBA,EAAUxI,KAAyB,CAEjC,GAAc,UAAd,KAAKA,KAAkB,CACrBwI,GAAAA,EAAUvI,YAAYtG,OACnB+G,IAAAA,EAAI,EAAGA,EAAI8H,EAAUvI,YAAYtG,OAAQ+G,IAExCyE,GAAAA,EADUqD,EAAUvI,YAAYS,GACE,KAAKT,eAAqF,IAArEmG,EAAsB,CAAC,KAAKnG,aAAcuI,EAAUvI,aACtG,OAAA,EAKN,OAAA,EAEF,GAAkB,YAAd,KAAKD,KAAoB,CAC7BU,IAAAA,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IACnC8H,GAAAA,EAAUvI,YAAYS,GAAG/G,SAAW,KAAKsG,YAAYtG,OAClDiH,IAAAA,EAAI,EAAGA,EAAI,KAAKX,YAAYtG,OAAQiH,IACnC6F,GAAAA,EAAiB,KAAKxG,YAAYW,GAAI4H,EAAUvI,YAAYS,GAAGE,IAC1D,OAAA,EAMXwF,IAAmE,IAAnEA,EAAsB,KAAKnG,YAAauI,EAAUvI,cAChDuI,EAAUvI,YAAYtG,OAAQ,CAC3B+G,IAAAA,EAAI,EAAGA,EAAI8H,EAAUvI,YAAYtG,OAAQ+G,IAG1CuE,GADgE,IAA9DE,EADUqD,EAAUvI,YAAYS,GACE,KAAKT,YAAY,GAAG,IAOrDgF,OAAAA,QAKN,GAAkB,eAAd,KAAKjF,MAAuC,eAAd,KAAKA,KACvCU,IAAAA,EAAI,EAAGA,EAAI8H,EAAUvI,YAAYtG,OAAQ+G,IAAK,CAC7CsD,IAAAA,EAAI,CAAEhE,KAAM,UAAWC,YAAauI,EAAUvI,YAAYS,IAE1D,QAAA,KAAKiI,OAAO3E,OAQb,CAAA,GAAkB,oBAAd,KAAKhE,KAA4B,CACrCU,IAAAA,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IAAK,CAGxCoI,IAA4B,IAFpB,IAAI9B,EAAW,KAAK/G,YAAYS,IAElCiI,OAAOH,GACR,OAAA,EAIJ,OAAA,EAGF,GAAkB,iBAAd,KAAKxI,KAAyB,CAClCU,IAAAA,EAAI,EAAGA,EAAI8H,EAAUvI,YAAYtG,OAAQ+G,IAAK,CAC7CqI,IAAAA,EAAQ,CAAE/I,KAAM,UAAWC,YAAauI,EAAUvI,YAAYS,IAE9D,IAAuB,IAAvB,KAAKiI,OAAOI,GACP,OAAA,EAIJ,OAAA,IAKJ,OAAA,GAGTlC,EAAUvH,UAAU0J,WAAa,SAASR,GAEjB,YAAnBA,EAAUxI,OACZwI,EAAYA,EAAUvH,UAGpB+C,IAAAA,EAAI,IAAI6C,EAAU2B,GAClB,SAAA,KAAKG,OAAOH,KAAcxE,EAAE2E,OAAO,SAKrB,UAAd,KAAK3I,MAAkC,eAAd,KAAKA,MACX,UAAnBwI,EAAUxI,MAAuC,eAAnBwI,EAAUxI,KACnCoG,EAAsB,KAAKnG,YAAauI,EAAUvI,aAClC,YAAd,KAAKD,KAEF,IAAI6G,EAAU,KAAK5F,UAClB+H,WAAWR,IAx5BnBS,WACHzB,IAAAA,EAAOC,MAAMnI,UAAUiH,MAAM2C,MAAMxB,gBAEhByB,KAAZC,oBAAAA,QAAAA,YAAAA,EAAAA,WAAyBA,QAAQH,MAC1CG,QAAQH,KAAKC,MAAME,QAAS5B,GAu5B9ByB,CAAK,QAAU,KAAKjJ,KAAO,OAASwI,EAAUxI,KAAO,iDAC9C,KA+BT8G,EAAMxH,UAAY,IAAIuH,EACtBC,EAAMxH,UAAU1F,YAAckN,EAuB9BC,EAAWzH,UAAY,IAAIuH,EAC3BE,EAAWzH,UAAU1F,YAAcmN,EACnCA,EAAWzH,UAAUvD,QAAU,SAASyH,GACjC,IAAA,IAAI9C,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IAC3C8C,EAAK0F,MAAM,KAAM,CAAC,KAAKjJ,YAAYS,GAAIA,EAAG,KAAKT,cAE1C,OAAA,MAET8G,EAAWzH,UAAU+J,SAAW,SAASrE,GAEhC,OADF/E,KAAAA,YAAYqB,KAAK0D,GACf,MAET+B,EAAWzH,UAAUgK,YAAc,SAAStE,EAAOuE,GAE1C,OADFtJ,KAAAA,YAAYuJ,OAAOD,EAAO,EAAGvE,GAC3B,MAET+B,EAAWzH,UAAUmK,YAAc,SAASC,GAMnC,MALc,iBAAXA,EACHzJ,KAAAA,YAAYuJ,OAAOE,EAAQ,GAE3BzJ,KAAAA,YAAYuJ,OAAO,KAAKvJ,YAAYyI,QAAQgB,GAAS,GAErD,MAET3C,EAAWzH,UAAUqK,IAAM,SAASjJ,GAC3B,OAAA,IAAIoG,EAAM,KAAK7G,YAAYS,KAwBpCsG,EAAW1H,UAAY,IAAIuH,EAC3BG,EAAW1H,UAAU1F,YAAcoN,EACnCA,EAAW1H,UAAUsK,UAAY,SAAS5E,GAEjC,OADF/E,KAAAA,YAAYqB,KAAK0D,GACf,MAETgC,EAAW1H,UAAUuK,aAAe,SAAS7E,EAAOuE,GAE3C,OADFtJ,KAAAA,YAAYuJ,OAAOD,EAAO,EAAGvE,GAC3B,MAETgC,EAAW1H,UAAUwK,aAAe,SAASJ,GAEpC,OADFzJ,KAAAA,YAAYuJ,OAAOE,EAAQ,GACzB,MAwBTzC,EAAgB3H,UAAY,IAAIuH,EAChCI,EAAgB3H,UAAU1F,YAAcqN,EACxCA,EAAgB3H,UAAUvD,QAAU,SAASyH,GACtC,IAAA,IAAI9C,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IAC3C8C,EAAK0F,MAAM,KAAM,CAAC,KAAKjJ,YAAYS,GAAIA,EAAG,KAAKT,eAGnDgH,EAAgB3H,UAAUqK,IAAM,SAASjJ,GAChC,OAAA,IAAIsG,EAAW,KAAK/G,YAAYS,KAwBzCwG,EAAQ5H,UAAY,IAAIuH,EACxBK,EAAQ5H,UAAU1F,YAAcsN,EAChCA,EAAQ5H,UAAUsK,UAAY,SAAS5E,GAE9B,OADF6E,KAAAA,aAAa7E,EAAO,KAAK/E,YAAY,GAAGtG,OAAS,GAC/C,MAETuN,EAAQ5H,UAAUuK,aAAe,SAAS7E,EAAOuE,GAExC,OADFtJ,KAAAA,YAAY,GAAGuJ,OAAOD,EAAO,EAAGvE,GAC9B,MAETkC,EAAQ5H,UAAUwK,aAAe,SAASJ,GAEjC,OADFzJ,KAAAA,YAAY,GAAGuJ,OAAOE,EAAQ,GAC5B,MAETxC,EAAQ5H,UAAUyK,MAAQ,WACnB9J,KAAAA,YAAcoG,EAAc,KAAKpG,cAExCiH,EAAQ5H,UAAU0K,SAAW,WACpB,OAAA,KAAK/J,YAAYtG,OAAS,GAEnCuN,EAAQ5H,UAAU2K,MAAQ,WAEpB,GADJA,MAAQ,GACJ,KAAKD,WACF,IAAA,IAAItJ,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IAC3CuJ,MAAM3I,KAAK,IAAI4F,EAAQ,CAAC,KAAKjH,YAAYS,MAGtCuJ,OAAAA,OAwBT9C,EAAa7H,UAAY,IAAIuH,EAC7BM,EAAa7H,UAAU1F,YAAcuN,EACrCA,EAAa7H,UAAUvD,QAAU,SAASyH,GACnC,IAAA,IAAI9C,EAAI,EAAGA,EAAI,KAAKT,YAAYtG,OAAQ+G,IAC3C8C,EAAK0F,MAAM,KAAM,CAAC,KAAKjJ,YAAYS,GAAIA,EAAG,KAAKT,eAGnDkH,EAAa7H,UAAUqK,IAAM,SAASjJ,GAC7B,OAAA,IAAIwG,EAAQ,KAAKjH,YAAYS,KAEtCyG,EAAa7H,UAAUyK,MAAQ,WACzBzD,IAAAA,EAAQ,GAKL,OAJFvK,KAAAA,QAAQ,SAASqJ,GACpBkB,EAAMhF,KAAK+E,EAAcjB,MAEtBnF,KAAAA,YAAcqG,EACZ,MA8BTc,EAAQ9H,UAAY,IAAIuH,EACxBO,EAAQ9H,UAAU1F,YAAcwN,EAuBhCC,EAAkB/H,UAAY,IAAIuH,EAClCQ,EAAkB/H,UAAU1F,YAAcyN,EAC1CA,EAAkB/H,UAAUvD,QAAU,SAASyH,GACxC,IAAA,IAAI9C,EAAI,EAAGA,EAAI,KAAK7G,SAASF,OAAQ+G,IACxC8C,EAAK0F,MAAM,KAAM,CAAC,KAAKrP,SAAS6G,GAAIA,EAAG,KAAK7G,YAGhDwN,EAAkB/H,UAAUqK,IAAM,SAASlM,GACrCyM,IAAAA,EAMG,OALFnO,KAAAA,QAAQ,SAASoO,GACjBA,EAAQ1M,KAAOA,IAChByM,EAAQC,KAGL,IAAI/C,EAAQ8C,IA2BrB5C,EAAmBhI,UAAY,IAAIuH,EACnCS,EAAmBhI,UAAU1F,YAAc0N,EAC3CA,EAAmBhI,UAAUvD,QAAU,SAASyH,GACzC,IAAA,IAAI9C,EAAI,EAAGA,EAAI,KAAKe,WAAW9H,OAAQ+G,IAC1C8C,EAAK0F,MAAM,KAAM,CAAC,KAAKzH,WAAWf,GAAIA,EAAG,KAAKe,cAGlD6F,EAAmBhI,UAAUqK,IAAM,SAASjJ,GACnC,OAAA,IAAImG,EAAU,KAAKpF,WAAWf,KAsCvCyH,EAAO7I,UAAY,IAAIuH,EACvBsB,EAAO7I,UAAU1F,YAAcuO,EAC/BA,EAAO7I,UAAU8K,YAAc,WAEtB,OADFnJ,KAAAA,SAAW0G,EAAa,KAAKS,WAAWR,OAAQ,KAAKQ,WAAWP,OAAQ,KAAKO,WAAWJ,OACtF,MAETG,EAAO7I,UAAUsI,OAAS,SAAS3H,GAK1B,OAJJA,IACImI,KAAAA,WAAWR,OAAS3H,EACpBmK,KAAAA,eAEA,KAAKhC,WAAWR,QAEzBO,EAAO7I,UAAUuI,OAAS,SAASA,GAK1B,OAJJA,IACIO,KAAAA,WAAWP,OAASA,EACpBuC,KAAAA,eAEA,KAAKhC,WAAWP,QAEzBM,EAAO7I,UAAU0I,MAAQ,SAASA,GAKzB,OAJJA,IACII,KAAAA,WAAWJ,MAAQA,EACnBoC,KAAAA,eAEA,KAAKhC,WAAWJ,OAGzBG,EAAO7I,UAAUmJ,OAAS,WAEjB4B,OADMxD,EAAUvH,UAAUmJ,OAAOjJ,KAAK,OAI/CV,EAAQ+H,UAAYA,EACpB/H,EAAQgI,MAAQA,EAChBhI,EAAQiI,WAAaA,EACrBjI,EAAQkI,WAAaA,EACrBlI,EAAQmI,gBAAkBA,EAC1BnI,EAAQoI,QAAUA,EAClBpI,EAAQqI,aAAeA,EACvBrI,EAAQsI,QAAUA,EAClBtI,EAAQuI,kBAAoBA,EAC5BvI,EAAQwI,mBAAqBA,EAC7BxI,EAAQqJ,OAASA,EAEjBrJ,EAAQ4E,WAAaA,EACrB5E,EAAQ6E,aAAeA,EAEvB7E,EAAQwL,MAAQ,GAChBxL,EAAQwL,MAAM1H,mBAAqBA,EACnC9D,EAAQwL,MAAM/H,qBAAuBA,EACrCzD,EAAQwL,MAAMpH,eAAiBA,EAC/BpE,EAAQwL,MAAM5G,WAAaA,EAC3B5E,EAAQwL,MAAM3G,aAAeA,EAC7B7E,EAAQwL,MAAM3C,aAAeA,EAE7B7I,EAAQwL,MAAMxK,gBAAkBA,EAChChB,EAAQwL,MAAM3I,kBAAoBA,EAElC7C,EAAQwL,MAAMvF,wBAA0BA,EACxCjG,EAAQwL,MAAMnF,qBAAuBA,EACrCrG,EAAQwL,MAAMlE,sBAAwBA,EACtCtH,EAAQwL,MAAMvF,wBAA0BA,EACxCjG,EAAQwL,MAAM7D,iBAAmBA,EACjC3H,EAAQwL,MAAM1F,WAAaA,EAC3B9F,EAAQwL,MAAMC,SA16BLA,SAAS7F,GAGX,IAFD8F,IAAAA,EAEK9J,EAAI,EAAGA,EAAIgE,EAAO/K,OAAS,EAAG+G,IAAK,CACtCmD,IAAAA,EAAKa,EAAOhE,GACZoD,EAAKY,EAAOhE,EAAI,GAChB+J,EAAK/F,EAAOhE,EAAI,GAChBgK,EAAI,CAAC5G,EAAG,GAAKD,EAAG,GAAIC,EAAG,GAAKD,EAAG,IAG/B8G,EAAMF,EAAG,GAAKC,EAAE,GAAKD,EAAG,GAAKC,EAAE,GAAKA,EAAE,GAAK7G,EAAG,GAAK6G,EAAE,GAAK7G,EAAG,GAE7DnD,GAAM,IAANA,EAEA8J,EADEG,EAAM,OAMNH,GAAAA,GAAQG,EAAM,IAAOH,GAAQG,EAAM,EAC9B,OAAA,EAKN,OAAA,GAm5BT7L,EAAQK,YAAcA,EACtBL,EAAQ8L,cA92CY,CACN,KAAA,OACM,WAAA,CACJ,KAAA,oDACA,KAAA,WA42CT9L;;CCv4CT,SAAA,EAAA,GAQA,GALA,iBAAA,QAAA,iBAAA,OAAA,UACA,QAAA,OAAA,QAAA,EAAA,QAAA,iBAIA,iBAAA,EAAA,UAAA,CACA,IAAA,EAAA,YACA,MAAA,IAAA,MAAA,iGAEA,EAAA,YAAA,OAAA,EAAA,EAAA,cAZA,CAeA,KAAA,SAAA,GACA,IAAA,EAAA,GAGA,SAAA,EAAA,GACA,IAGA,EAAA,EACA,EACA,EALA,EAAA,EACA,EAAA,EACA,EAAA,GAMA,EAAA,EAAA,MAAA,sBAGA,EAAA,SAAA,EAAA,GAAA,IAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAIA,EADA,EAAA,SAAA,EAAA,GAAA,IAAA,EAMA,EADA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAGA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,IAGA,OAAA,EAIA,SAAA,EAAA,GAIA,OAIA,SAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EAAA,KAAA,EAAA,GACA,OAAA,EAGA,OAAA,EAbA,CAAA,EAAA,GAAA,EAAA,EAAA,OAAA,KACA,EAAA,KAAA,EAAA,IAEA,EAeA,SAAA,EAAA,GACA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,EACA,EAAA,eAAA,KACA,EAAA,GAAA,EAAA,IAGA,OAAA,EAMA,SAAA,EAAA,GAKA,IAJA,IAGA,EAHA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,OACA,EAAA,EAAA,GAEA,EAAA,EAAA,EAAA,IAEA,KADA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IACA,EAAA,EAEA,OAAA,GAAA,EAKA,SAAA,EAAA,GACA,IAAA,EAAA,GACA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,QAAA,MAAA,IACA,GAAA,EAAA,QAAA,EAAA,CACA,EAAA,IACA,EAAA,UAGA,EAAA,KAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,EAAA,GAAA,MAAA,IACA,EAAA,QAAA,IACA,EAAA,IACA,EAAA,UAEA,EAAA,KAAA,KAKA,OAAA,EAqCA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,MAAA,sBAAA,EAAA,GACA,EAAA,EAAA,MAAA,wBAAA,EAAA,EAAA,IACA,QAAA,IAAA,GA8FA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,GAyEA,OAvEA,EAAA,GAAA,IACA,YAAA,EAAA,kBAAA,GAEA,EAAA,kBAAA,OAAA,EAAA,iBAAA,MAAA,SAAA,EAAA,iBAAA,OACA,EAAA,IAAA,EAAA,aAGA,iBAAA,EAAA,GAAA,iBAAA,EAAA,IACA,EAAA,KAAA,QACA,EAAA,YAAA,CAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,IACA,EAAA,YAAA,KAAA,EAAA,GAEA,EAAA,GACA,EAAA,YAAA,KAAA,EAAA,IAIA,EAAA,SACA,EAAA,KAAA,aACA,EAAA,YAAA,EAAA,OAAA,MAAA,IAGA,EAAA,QACA,IAAA,EAAA,MAAA,QACA,EAAA,KAAA,aACA,EAAA,YAAA,EAAA,MAAA,GAAA,MAAA,KAEA,EAAA,KAAA,kBACA,EAAA,YAAA,EAAA,MAAA,MAAA,KAIA,EAAA,QACA,EA3HA,SAAA,GAQA,IAPA,IAEA,EACA,EACA,EAJA,EAAA,GACA,EAAA,GAMA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,EAAA,GAAA,MAAA,IACA,KAAA,EAAA,OAAA,GAIA,GAAA,EAAA,GAAA,CACA,IAAA,EAAA,CAAA,EAAA,QAAA,WACA,EAAA,KAAA,QAEA,EAAA,KAAA,EAAA,QAAA,WAOA,IAHA,IAAA,EAAA,GAGA,EAAA,QAAA,CAEA,EAAA,EAAA,MAGA,IAAA,GAAA,EACA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAEA,GAAA,EADA,EAAA,EAAA,GAAA,GACA,GAAA,CAEA,EAAA,GAAA,KAAA,GACA,GAAA,EACA,MAMA,GACA,EAAA,KAAA,GAKA,KAAA,EAAA,QAAA,CAEA,EAAA,EAAA,MAGA,IAAA,GAAA,EACA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAEA,GADA,EAAA,EAAA,GAAA,GACA,EAAA,MAAA,sBAAA,EAAA,GAAA,CAEA,EAAA,GAAA,KAAA,GACA,GAAA,EACA,MAMA,GACA,EAAA,KAAA,CAAA,EAAA,YAIA,OAAA,IAAA,EAAA,OACA,CACA,KAAA,UACA,YAAA,EAAA,IAGA,CACA,KAAA,eACA,YAAA,GA2CA,CAAA,EAAA,MAAA,MAAA,KAIA,iBAAA,EAAA,MACA,iBAAA,EAAA,MACA,iBAAA,EAAA,MACA,iBAAA,EAAA,OAEA,EAAA,KAAA,UACA,EAAA,YAAA,CAAA,CACA,CAAA,EAAA,KAAA,EAAA,MACA,CAAA,EAAA,KAAA,EAAA,MACA,CAAA,EAAA,KAAA,EAAA,MACA,CAAA,EAAA,KAAA,EAAA,MACA,CAAA,EAAA,KAAA,EAAA,UAIA,EAAA,oBAAA,EAAA,UAAA,EAAA,cACA,EAAA,KAAA,UAEA,EAAA,qBACA,EAAA,SAAA,CACA,MAAA,CACA,EAAA,EAAA,uBAKA,EAAA,SAAA,EAAA,SAAA,EAAA,EAAA,UAAA,KACA,EAAA,WAAA,EAAA,WAAA,EAAA,EAAA,YAAA,KACA,EAAA,aACA,EAAA,GAAA,EAAA,WAAA,EAAA,cAAA,EAAA,WAAA,UAAA,EAAA,WAAA,MAIA,IAAA,EAAA,UAAA,GAIA,SAAA,EAAA,EAAA,GACA,IAAA,EAGA,GADA,EAAA,GAAA,IACA,aAAA,WAGA,EADA,EAAA,GACA,CAAA,KAAA,EAAA,IACA,GAAA,EAAA,KAAA,iCAAA,EAAA,IAAA,WAAA,KACA,KAEA,CAAA,KAAA,MAGA,IACA,EADA,EAAA,GAGA,OAAA,EAAA,MACA,IAAA,QACA,EAAA,EAAA,EAAA,YAAA,GACA,EAAA,EAAA,EAAA,YAAA,GACA,EAAA,YAAA,KACA,EAAA,EAAA,EAAA,YAAA,IAEA,EAAA,YAAA,KACA,EAAA,EAAA,EAAA,YAAA,IAEA,EAAA,iBAAA,EACA,MACA,IAAA,aACA,EAAA,OAAA,EAAA,YAAA,MAAA,GACA,EAAA,iBAAA,EACA,MACA,IAAA,aACA,EAAA,MAAA,CAAA,EAAA,YAAA,MAAA,IACA,EAAA,iBAAA,EACA,MACA,IAAA,kBACA,EAAA,MAAA,EAAA,YAAA,MAAA,GACA,EAAA,iBAAA,EACA,MACA,IAAA,UACA,EAAA,MAAA,EAAA,EAAA,YAAA,MAAA,IACA,EAAA,iBAAA,EACA,MACA,IAAA,eACA,EAAA,MAzOA,SAAA,GAEA,IADA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAEA,IADA,IAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,CACA,IAAA,EAAA,EAAA,GAAA,MAAA,GACA,EAAA,KAAA,GAGA,OAAA,EAgOA,CAAA,EAAA,YAAA,MAAA,IACA,EAAA,iBAAA,EACA,MACA,IAAA,UACA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,SAAA,IAEA,EAAA,WAAA,EAAA,WAAA,EAAA,EAAA,YAAA,GACA,EAAA,KACA,EAAA,WAAA,GAAA,EAAA,IAEA,MACA,IAAA,oBAEA,IADA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,OAAA,IACA,EAAA,KAAA,EAAA,EAAA,SAAA,GAAA,IAEA,MACA,IAAA,qBAEA,IADA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,WAAA,OAAA,IACA,EAAA,KAAA,EAAA,EAAA,WAAA,GAAA,IAKA,OAAA,EAaA,OANA,EAAA,MAAA,EACA,EAAA,QAAA,EACA,EAAA,UAAA,EACA,EAAA,YAAA,EACA,EAAA,wBARA,SAAA,GACA,OAAA,IAAA,EAAA,WAAA,EAAA,KASA;;AClaA,aA2XG,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1XH,IAAMxH,EAASC,QAAQ,UACjBsT,EAAOtT,QAAQ,cACfuT,EAASvT,QAAQ,6BACFwT,EAAAA,WACL,SAAA,IAAA,EAAA,KAAA,GAsXb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YApXSpS,MAAAA,SAAAA,EAAUX,GAIdgB,IAAAA,EAAU,IAAIgS,QAAQ,SAACC,EAASC,GAE9BjS,IAAAA,EAAM,8IAAgJN,EAASA,SAASkJ,EAAI,MAAQlJ,EAASA,SAASmJ,EAAI,4nBAEvMqJ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACTwT,IAAAA,EAAc,CAAO,GAAA,UAAmB,KAAA,MAEpCxT,OAAAA,EAAK8B,SAAS,GAAGC,WAAWE,MAC7B,IAAA,aACHuR,EAAYxT,KAAO,EACnB,MACG,IAAA,aACHwT,EAAYxT,KAAO,EACnB,MACG,IAAA,aACHwT,EAAYxT,KAAO,EACnB,MACG,IAAA,aACHwT,EAAYxT,KAAO,EACnB,MACG,IAAA,aACHwT,EAAYxT,KAAO,EACnB,MACG,IAAA,aACHwT,EAAYxT,KAAO,EACnB,MACG,IAAA,aACHwT,EAAYxT,KAAO,EAKvBkT,EAAQM,KACPC,MAAO,SAAAC,QAIRC,EAAmB,IAAIV,QAAQ,SAACC,EAASC,GAEpCC,OAAAA,MADG,wCAETC,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,mBAA4BlT,KAAAA,MAC1CyT,MAAO,SAAAC,QAIRE,EAAqB,IAAIX,QAAQ,SAACC,EAASC,GAEtCC,OAAAA,MADG,0CAETC,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,qBAA8BlT,KAAAA,MAC5CyT,MAAO,SAAAC,QAIRG,EAAiB,IAAIZ,QAAQ,SAACC,EAASC,GAElCC,OAAAA,MADG,sCAETC,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,iBAA0BlT,KAAAA,MACxCyT,MAAO,SAAAC,QAIRI,EAAgB,IAAIb,QAAQ,SAACC,EAASC,GACpCjS,IAAAA,EAAM,iIAAmIN,EAASA,SAASkJ,EAAI,MAAQlJ,EAASA,SAASmJ,EAAI,wZAC1LqJ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,eAAwBlT,KAAAA,MACtCyT,MAAO,SAAAC,QAIRK,EAAgB,IAAId,QAAQ,SAACC,EAASC,GACpCjS,IAAAA,EAAM,iDAAmDN,EAASmB,WAAWiS,SAAW,IACrFZ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,iBAA0BlT,KAAAA,MACxCyT,MAAO,SAAAC,QAIRO,EAAa,IAAIhB,QAAQ,SAACC,EAASC,GACjCjS,IAAAA,EAAgJN,0IAAAA,OAAAA,EAASmB,WAAWiS,SAAxK,uvBACOZ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,cAAuBlT,KAAAA,MACrCyT,MAAO,SAAAC,QAIRQ,EAAa,IAAIjB,QAAQ,SAACC,EAASC,GACjCjS,IAAAA,EAA6HN,uHAAAA,OAAAA,EAASmB,WAAWiS,SAArJ,kvBACOZ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,cAAuBlT,KAAAA,MACrCyT,MAAO,SAAAC,QAIRS,EAAiB,IAAIlB,QAAQ,SAACC,EAASC,GACrCjS,IAAAA,EAAqIN,+HAAAA,OAAAA,EAASmB,WAAWiS,SAA7J,0wBACOZ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,mBAA4BlT,KAAAA,MAC1CyT,MAAO,SAAAC,QAIRU,EAAa,IAAInB,QAAQ,SAACC,EAASC,GACjCjS,IAAAA,EAA8IN,wIAAAA,OAAAA,EAASmB,WAAWiS,SAAtK,gvBACOZ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,cAAuBlT,KAAAA,MACrCyT,MAAO,SAAAC,QAIRW,EAAmB,IAAIpB,QAAQ,SAACC,EAASC,GACvCjS,IAAAA,EAAsIN,gIAAAA,OAAAA,EAASmB,WAAWiS,SAA9J,+uBACOZ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,aAAsBlT,KAAAA,MACpCyT,MAAO,SAAAC,QAIRY,EAAY,IAAIrB,QAAQ,SAACC,EAASC,GAChClG,IAAAA,EAAQ6F,EAAK7F,MAAM,CAACrM,EAASA,SAASkJ,EAAGlJ,EAASA,SAASmJ,IAC3DwK,EAASzB,EAAKyB,OAAOtH,EAAO,EAAG,CAACuH,MAAO,UACvCC,EAAgB3B,EAAK4B,SAASH,EAAOrL,SAAU,CAACyL,UAAW,KAAOC,aAAa,IAC/EC,EAAmB9B,EAAO+B,QAAQL,GAClCvT,EAA8JjB,wJAAAA,OAAAA,EAAW8U,gBAAgBC,UAA4C/U,oCAAAA,OAAAA,EAAW8U,gBAAgBE,QAAsCrU,gCAAAA,OAAAA,EAASmB,WAAWiS,SAAyCkB,kCAAAA,OAAAA,UAAUC,KAAKC,UAAUP,IAAhY,uZACOzB,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,aAAsBlT,KAAAA,MACpCyT,MAAO,SAAAC,QAIR2B,EAAa,IAAIpC,QAAQ,SAACC,EAASC,GACjCjS,IAAAA,EAAoJN,8IAAAA,OAAAA,EAASmB,WAAWiS,SAA5K,qvBACOZ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,cAAuBlT,KAAAA,MACrCyT,MAAO,SAAAC,QAkBR4B,GAdW,IAAIrC,QAAQ,SAACC,EAASC,GAC/BlG,IAAAA,EAAQ6F,EAAK7F,MAAM,CAACrM,EAASA,SAASkJ,EAAGlJ,EAASA,SAASmJ,IAC3DwK,EAASzB,EAAKyB,OAAOtH,EAAO,EAAG,CAACuH,MAAO,UACvCC,EAAgB3B,EAAK4B,SAASH,EAAOrL,SAAU,CAACyL,UAAW,KAAOC,aAAa,IAC/EC,EAAmB9B,EAAO+B,QAAQL,GAClCvT,EAAM,oJAAqJgU,UAAUC,KAAKC,UAAUP,IAAmB,qZACpMzB,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAQ,GAAA,UAAmBlT,KAAAA,MAClCyT,MAAO,SAAAC,QAIF,IAAIT,QAAQ,SAACC,EAASC,GAC1BjS,IAAAA,EAA2IN,qIAAAA,OAAAA,EAASA,SAASkJ,EAAOlJ,OAAAA,OAAAA,EAASA,SAASmJ,EAA1L,6nBACOqJ,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAQ,GAAA,MAAelT,KAAAA,MAC9ByT,MAAO,SAAAC,SAIR6B,EAAa,IAAItC,QAAQ,SAACC,EAASC,GACjClG,IAAAA,EAAQ6F,EAAK7F,MAAM,CAACrM,EAASA,SAASkJ,EAAGlJ,EAASA,SAASmJ,IAC3DwK,EAASzB,EAAKyB,OAAOtH,EAAO,IAAK,CAACuH,MAAO,WACzCC,EAAgB3B,EAAK4B,SAASH,EAAOrL,SAAU,CAACyL,UAAW,KAAOC,aAAa,IAC/EC,EAAmB9B,EAAO+B,QAAQL,GAClCvT,EAAqNgU,+MAAAA,OAAAA,UAAUC,KAAKC,UAAUP,IAAlP,uZACOzB,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,cAAuBlT,KAAAA,MACrCyT,MAAO,SAAAC,QAIR7Q,EAAY,IAAIoQ,QAAQ,SAACC,EAASC,GAChCjS,IAAAA,EAAM,4HAA8HN,EAASA,SAASkJ,EAAI,OAASlJ,EAASA,SAASmJ,EAAI,+YAC7LqJ,MAAMlS,GACLmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACTwV,IAAAA,EAAejW,IAASkW,QAAU,EAClCC,EAAanW,IAAS0D,OACtB/B,EAA2DlB,qDAAAA,OAAAA,EAAK8B,SAAS,GAAGC,WAAW4T,IAAYD,UAAAA,OAAAA,EAAoBF,WAAAA,OAAAA,EAA3H,KACOpC,OAAAA,MAAMlS,GACZmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAO,GAAA,YAAqBlT,KAAAA,QAErCyT,MAAO,SAAAC,QAIRkC,EAAmB,IAAI3C,QAAQ,SAACC,EAASC,GACvCjS,IAAAA,EAAM,oKAAsKN,EAASA,SAASkJ,EAAI,OAASlJ,EAASA,SAASmJ,EAAI,+YACrOqJ,MAAMlS,GACLmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACbkT,EAAQ,CAAQ,GAAA,mBAA4BlT,KAAAA,MAC3CyT,MAAO,SAAAC,QAKRmC,EAAU5V,EAAW8U,gBAAgBc,QAAQC,MAAM,KACnDC,EAAW,GACfF,EAAQ7R,QAAQ,SAAAsH,GAENA,OADR+F,QAAQpG,IAAIK,GACJA,GACD,IAAA,UACHyK,EAASxM,KAAKtI,GACd,MAEG,IAAA,eACH8U,EAASxM,KAAKuK,GACd,MAEG,IAAA,iBACgC,MAAhClT,EAASmB,WAAWiS,UAAoD,IAAhCpT,EAASmB,WAAWiS,UAC7D+B,EAASxM,KAAKwK,GAEhB,MAEG,IAAA,cACgC,MAAhCnT,EAASmB,WAAWiS,UAAoD,IAAhCpT,EAASmB,WAAWiS,UAC7D+B,EAASxM,KAAK0K,GAEhB,MAEG,IAAA,cACgC,MAAhCrT,EAASmB,WAAWiS,UAAoD,IAAhCpT,EAASmB,WAAWiS,UAC7D+B,EAASxM,KAAK6K,GAEhB,MAEG,IAAA,mBACgC,MAAhCxT,EAASmB,WAAWiS,UAAoD,IAAhCpT,EAASmB,WAAWiS,UAC7D+B,EAASxM,KAAK8K,GAEhB,MAEG,IAAA,YACH0B,EAASxM,KAAK+K,GACd,MAEG,IAAA,MACHyB,EAASxM,KAAK+L,GACd,MAEG,IAAA,cACHS,EAASxM,KAAKgM,GACd,MAEG,IAAA,YACHQ,EAASxM,KAAK1G,GACd,MAEG,IAAA,aACgC,MAAhCjC,EAASmB,WAAWiS,UAAoD,IAAhCpT,EAASmB,WAAWiS,UAC7D+B,EAASxM,KAAK2K,GAEhB,MAEG,IAAA,iBACH6B,EAASxM,KAAK4K,GACd,MAEG,IAAA,aACgC,MAAhCvT,EAASmB,WAAWiS,UAAoD,IAAhCpT,EAASmB,WAAWiS,UAC7D+B,EAASxM,KAAK8L,GAEhB,MAEG,IAAA,mBACHU,EAASxM,KAAKqM,GACd,MAEG,IAAA,mBACHG,EAASxM,KAAKoK,GACd,MAEG,IAAA,qBACHoC,EAASxM,KAAKqK,GACd,MAEG,IAAA,iBACHmC,EAASxM,KAAKsK,MAOpBZ,QAAQ+C,IAAID,GAAU1C,KAAK,SAAAnP,GACrB+R,IAAAA,EAAW,GACV,IAAA,IAAInQ,KAAO5B,EACI,MAAfA,EAAO4B,GACRmQ,EAAS/R,EAAO4B,GAAKJ,IAAMxB,EAAO4B,GAElCoQ,oBAAqB,EAItBL,GADHI,EAAQ,MAAYrV,EAASJ,QAC1BqV,EAAQM,SAAS,WAAW,CACzBnQ,IAAAA,EAAc/F,EAAWmW,iBAAiBH,EAAUhW,GACxDgW,EAASjQ,YAAc,CAACN,GAAI,cAAe1F,KAAMgG,GAEnD/F,EAAWE,MAAMkW,WAAWJ,EAAUhW,KACrCwT,MAAM,SAAA6C,UAmCV,EAvXkBtD,GAuXlB,QAAA,QAAA;;AC3XH,aA2NG,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1NkBuD,IAAAA,EAAAA,WACPC,SAAAA,EAAAA,EAAWvW,GAAY,EAAA,KAAA,GAC5BwW,KAAAA,KAAO,KACPxW,KAAAA,WAAaA,EAEbyW,KAAAA,KAAO,KACPC,KAAAA,KAAKhX,SAASG,eAAe0W,GAAY,MAoN/C,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAjNIA,MAAAA,SAAAA,EAAWI,GAAS,IAAA,EAAA,KAEnBH,EAAO9W,SAASkX,cAAc,QAC9BC,EAAQnX,SAASkX,cAAc,SAC/BrH,EAAQ7P,SAASkX,cAAc,SAE/BE,GADcpX,SAASkX,cAAc,MAC9BlX,SAASkX,cAAc,aAC9BG,EAAOrX,SAASkX,cAAc,KAClCJ,EAAKQ,iBAAiB,SAAU,SAACC,GAC7B,EAAKC,OAAOD,EAAIN,KAEpBI,EAAKjX,UAAY,wBACjB+W,EAAMM,UAAY,gBAClBN,EAAMO,aAAa,MAAO,kBAC1B7H,EAAMvH,KAAO,OACbuH,EAAM6H,aAAa,OAAO,kBAC1B7H,EAAM8H,YAAc,gBACpB9H,EAAM6H,aAAa,KAAM,kBACzB7H,EAAM6H,aAAa,eAAgB,OACnC7H,EAAMyH,iBAAiB,QAAS,SAACC,GAC7B,EAAKK,YAAYL,EAAIN,KAEzBG,EAAKM,aAAa,KAAK,kBAGvBZ,EAAKe,YAAYV,GACjBL,EAAKe,YAAYhI,GACjBiH,EAAKe,YAAYR,GAEjBP,EAAKe,YAAYT,GACjBP,EAAUgB,YAAYf,GACjBA,KAAAA,KAAOA,IAkLb,CAAA,IAAA,gBA/KagB,MAAAA,SAAAA,EAAQtW,EAAMuW,GAC1BC,SAASC,WAAWC,IAAI,SAAWJ,GAAQK,IAAI,CAC7CC,SAAU5W,EACV6W,SAAUN,MA4Kb,CAAA,IAAA,qBAxKkBlX,MAAAA,SAAAA,EAASoW,EAAU3O,GAChCgQ,IAAAA,EAAWzX,EAAQsV,MAAM,KAE7BmC,GADAA,EAAWA,EAAS,IACAnC,MAAM,KACtBoC,IAAAA,EAAc,GACdC,EAAOF,EAASrW,OACpBqW,EAASjU,QAAQ,SAASoU,EAAM5G,GAC9B0G,GAAeE,EACb5G,EAAQ2G,GAAU3G,EAAQ,IAAO2G,IAAQD,GAAe,OAExDhX,IAAAA,EAAiJgX,2IAAAA,OAAAA,EAArJ,8GAEI,IACA9E,MAAMlS,GACLmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GAERiI,GAAS,gBAATA,EACCjI,EAAKqY,WAAWrU,QAAQ,SAACoU,GACjBE,IAAAA,EAAO3Y,SAASkX,cAAc,UACF,KAA7BuB,EAAKrW,WAAWiS,UACfsE,EAAKjY,MAAQ+X,EAAK5X,QAClB8X,EAAKjB,aAAa,cAAe,eAEjCiB,EAAKjY,MAAW+X,GAAAA,OAAAA,EAAK5X,QAArB,gBACA8X,EAAKjB,aAAa,cAAee,EAAKrW,WAAWiS,WAGrDsE,EAAKC,QAAU,SAACrB,GACZN,EAAS4B,iBAAiBtB,EAAIN,IAElCA,EAASH,KAAKgC,WAAW,GAAGjB,YAAYc,SAE3C,CACGpX,IAAAA,EAA4JlB,sJAAAA,OAAAA,EAAKqY,WAAW,GAAGzX,SAASkJ,EAAQ9J,QAAAA,OAAAA,EAAKqY,WAAW,GAAGzX,SAASmJ,EAAhO,ypBACI,IACAqJ,MAAMlS,GACLmS,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASqF,GACRA,GAAAA,EAAK5W,SAASF,OAAO,CACpBgV,EAAS3W,WAAWE,MAAMwY,iBAAiBnY,GAAS,GAChDoY,IACAhY,EADAgY,EAAS,KAEb5Y,EAAKqY,WAAWrU,QAAQ,SAACoU,GACW,KAA7BA,EAAKrW,WAAWiS,UACZ4C,EAAS3W,WAAW4Y,iBAAiBT,EAAKrW,WAAWiS,YACpD4E,EAASR,KAIFxX,EAAR,MAAVgY,EAA6B5Y,EAAKqY,WAAW,GAAGzX,SAAsB,KACzD,OAAXgY,GACChC,EAASkC,YAAYtY,EAASoW,EAAUhW,GACxCgW,EAASmC,iBAAiBnC,GAC1BA,EAAS3W,WAAWE,MAAMI,cAAa,GACvCqW,EAAS3W,WAAWE,MAAM6Y,aAC1BpC,EAAS3W,WAAWgZ,YAAYC,UAAUlZ,EAAKqY,WAAW,GAAIzB,EAAS3W,cAEvE2W,EAASkC,YAAYtY,EAASoW,EAAUhW,GACxCgW,EAASmC,iBAAiBnC,GAC1BA,EAAS3W,WAAWE,MAAMI,cAAa,GACvCqW,EAAS3W,WAAWE,MAAM6Y,aAC1BpC,EAAS3W,WAAWgZ,YAAYC,UAAUN,EAAQhC,EAAS3W,kBAG/D2W,EAAS3W,WAAWE,MAAMwY,iBAAiBnY,GAAS,KAG/D,MAAO2Y,GACJvC,EAAS3W,WAAWE,MAAMwY,iBAAiBnY,GAAS,OAIlE,MAAO2Y,GACLvC,EAAS3W,WAAWE,MAAMwY,iBAAiBnY,GAAS,MA8FzD,CAAA,IAAA,mBA1FgB0W,MAAAA,SAAAA,EAAIN,GACfwC,IAAAA,EAAY,KAMqB,eAJjCA,EADqB,SAAtBlC,EAAGmC,OAAOC,QACGpC,EAAGmC,OAAOE,WAEVrC,EAAGmC,QAENtX,WAAW,GAAG1B,OACvBuW,EAASmC,iBAAiBnC,GAC1BA,EAAS4C,mBAAmBJ,EAAUhC,UAAWR,EAAU,WAE3DA,EAAS4C,mBAAmBJ,EAAUhC,UAAWR,EAAU,YA+EhE,CAAA,IAAA,cA3EYM,MAAAA,SAAAA,EAAIN,GACPM,OAAAA,EAAGpR,KACF,IAAA,QACmB,IAAnBoR,EAAGmC,OAAOhZ,OAAkC+Q,MAAnB8F,EAAGmC,OAAOhZ,OAAsBuW,EAAS4C,mBAAmBtC,EAAGmC,OAAOhZ,MAAOuW,EAAU,UACjH,MAEC,IAAA,YAIA,IAAA,UAIA,IAAA,aAIA,IAAA,YAED,MAECxF,UAAAA,EACmB,IAAnB8F,EAAGmC,OAAOhZ,OAAkC+Q,MAAnB8F,EAAGmC,OAAOhZ,OAAsBuW,EAAS4C,mBAAmBtC,EAAGmC,OAAOhZ,MAAOuW,EAAU,UACjH,MAEJ,QACIA,EAASmC,iBAAiBnC,GAC1BA,EAAS4C,mBAAmBtC,EAAGmC,OAAOhZ,MAAOuW,EAAU,kBA+ChE,CAAA,IAAA,mBA1CgBA,MAAAA,SAAAA,GACRA,KAAAA,EAASH,KAAKgC,WAAW,GAAGgB,YAC/B7C,EAASH,KAAKgC,WAAW,GAAGiB,YAAY9C,EAASH,KAAKgC,WAAW,GAAGgB,cAwCzE,CAAA,IAAA,cApCWjZ,MAAAA,SAAAA,EAASoW,EAAUhW,GAC7BwS,MAAM,+DACLC,KAAK,SAACC,GAASA,OAAAA,EAAKC,SACpBF,KAAK,SAASrT,GACP2Z,IAAAA,EAAS,CACT,CACiB,WAAA,CACEnZ,WAAAA,GAEJ,SAAA,CACL,EAAA,EACA,EAAA,KAIC,MAAZI,IACC+Y,EAAO,GAAGzQ,SAASY,EAAIlJ,EAASkJ,EAChC6P,EAAO,GAAGzQ,SAASa,EAAInJ,EAASmJ,GAEhC6P,IAAAA,EAAU,IAAIC,QAAiI7Z,yHAAAA,OAAAA,EAAK8Z,aAAyBC,cAAAA,OAAAA,mBAAmB5E,KAAKC,UAAUuE,IAAmB,WAAA,CAClOK,OAAQ,OACRC,KAAM,GACNC,QAAS,IAAIC,QACbC,KAAM,OACNC,MAAO,YAEXjH,MAAMwG,GACLvG,KAAK,SAACT,UASZ,CAAA,IAAA,SAHMsE,MAAAA,SAAAA,EAAIN,GACPM,EAAGoD,iBACH1D,EAAS4C,mBAAmBtC,EAAGmC,OAAO,GAAKhZ,MAAOuW,EAAU,cAC/D,EA1NkBL,GA0NlB,QAAA,QAAA;;AC3NH,aAgSG,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA/RH,IAAA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,wBA6RG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA5RH,IAAMhX,EAASC,QAAQ,UACF+a,EAAAA,WACL,SAAA,IAAA,EAAA,KAAA,GACPxF,KAAAA,gBAAkB,GAClB5U,KAAAA,MAAQ,IAAIV,EAAJ,QACRwZ,KAAAA,YAAc,IAAIjG,EAAJ,QACd4D,KAAAA,SAAW,IAAIL,EAAJ,QAAa,WAAY,MACpCiE,KAAAA,YAAY,MAqRlB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cAnRWva,MAAAA,SAAAA,GACVA,EAAW8U,gBAAgBC,UAAYzV,IAAS4C,OAAO,cACvDlC,EAAW8U,gBAAgBE,QAAU1V,IAASkb,IAAI,EAAE,UAAUtY,OAAO,cACrElC,EAAW8U,gBAAgBc,QAAUlW,SAASG,eAAe,0BAA0BO,QAgRxF,CAAA,IAAA,mBA7QgBuY,MAAAA,SAAAA,GACR,MAAA,KAAK8B,KAAK9B,KA4QlB,CAAA,IAAA,aAzQU1B,MAAAA,SAAAA,GAC+B,kBAAvCA,EAAGmC,OAAOE,WAAWA,WAAW7T,GAA0B/F,SAASG,eAAe,iBAAiBC,UAAY,GAAIJ,SAASG,eAAe,sBAAsBC,UAAY,KAwQ/K,CAAA,IAAA,mBArQgBC,MAAAA,SAAAA,EAAM2a,GACjB3U,IAAAA,EAAc,CAChBhF,SAAsBhB,YAAAA,OAAAA,EAAKiB,QAAQjB,MACnCe,YAAa,KACbE,QAAQ,CACNE,KAAM,KACND,IAAK,KACLE,MAAO,MAETC,SAAS,CACPF,KAAM,KACND,IAA0DlB,qDAAAA,OAAAA,EAAKiB,QAAQjB,KAFhE,+CAGPoB,MAAO,MAETE,UAAW,CACTH,KAAM,KACND,IAA0DlB,qDAAAA,OAAAA,EAAKiB,QAAQjB,KAF9D,+CAGToB,MAAO,MAETG,UAAU,CACRJ,KAAM,KACNK,MAAO,MAETC,YAAa,CACXN,KAAM,KACNC,MAAO,OAGHpB,OAAAA,EAAKiB,QAAQjB,MACd,KAAA,EACHgG,EAAYjF,YAAZ,sBACAf,EAAK6T,eAAe7T,KAAKgE,QAAQ,SAACoU,GACjB,QAAZA,EAAKwC,MACN5U,EAAY/E,QAAQE,KAAOiX,EAAKyC,6BAChC7U,EAAY/E,QAAQC,IAApB,sBACA8E,EAAY/E,QAAQG,MAAQgX,EAAK0C,eAGrC9a,EAAK2T,iBAAiB3T,KAAKgE,QAAQ,SAACoU,GAC/BA,EAAK2C,uBAAuB5E,SAAS,wBACtCnQ,EAAY3E,SAASF,KAAOiX,EAAK9X,MACjC0F,EAAY3E,SAASD,MAAQgX,EAAK4C,iBAEjC5C,EAAK2C,uBAAuB5E,SAAS,+BACtCnQ,EAAY1E,UAAUH,KAAOiX,EAAK9X,MAClC0F,EAAY1E,UAAUF,MAAQgX,EAAK4C,iBAElC5C,EAAK2C,uBAAuB5E,SAAS,iCACtCnQ,EAAYzE,UAAUJ,KAAOiX,EAAK9X,MAClC0F,EAAYzE,UAAUC,MAAQ4W,EAAK6C,uBAGvCjb,EAAK4T,mBAAmB5T,KAAKgE,QAAQ,SAACoU,GACjCA,EAAK8C,uBAAuB/E,SAAS,gBACtCnQ,EAAYvE,YAAYN,KAAOiX,EAAK9X,MACpC0F,EAAYvE,YAAYL,MAAQgX,EAAK4C,mBAGzC,MAEG,KAAA,EACHhV,EAAYjF,YAAZ,sBACAf,EAAK6T,eAAe7T,KAAKgE,QAAQ,SAACoU,GACjB,QAAZA,EAAKwC,MACN5U,EAAY/E,QAAQE,KAAOiX,EAAKyC,6BAChC7U,EAAY/E,QAAQC,IAApB,sBACA8E,EAAY/E,QAAQG,MAAQgX,EAAK0C,eAGrC9a,EAAK2T,iBAAiB3T,KAAKgE,QAAQ,SAACoU,GAC/BA,EAAK2C,uBAAuB5E,SAAS,wBACtCnQ,EAAY3E,SAASF,KAAOiX,EAAK9X,MACjC0F,EAAY3E,SAASD,MAAQgX,EAAK4C,iBAEjC5C,EAAK2C,uBAAuB5E,SAAS,+BACtCnQ,EAAY1E,UAAUH,KAAOiX,EAAK9X,MAClC0F,EAAY1E,UAAUF,MAAQgX,EAAK4C,iBAElC5C,EAAK2C,uBAAuB5E,SAAS,iCACtCnQ,EAAYzE,UAAUJ,KAAOiX,EAAK9X,MAClC0F,EAAYzE,UAAUC,MAAQ4W,EAAK6C,uBAGvCjb,EAAK4T,mBAAmB5T,KAAKgE,QAAQ,SAACoU,GACjCA,EAAK8C,uBAAuB/E,SAAS,gBACtCnQ,EAAYvE,YAAYN,KAAOiX,EAAK9X,MACpC0F,EAAYvE,YAAYL,MAAQgX,EAAK4C,mBAGzC,MAEG,KAAA,EACHhV,EAAYjF,YAAZ,sBACAf,EAAK6T,eAAe7T,KAAKgE,QAAQ,SAACoU,GACjB,QAAZA,EAAKwC,MACN5U,EAAY/E,QAAQE,KAAOiX,EAAKyC,6BAChC7U,EAAY/E,QAAQC,IAApB,sBACA8E,EAAY/E,QAAQG,MAAQgX,EAAK0C,eAGrC9a,EAAK2T,iBAAiB3T,KAAKgE,QAAQ,SAACoU,GAC/BA,EAAK2C,uBAAuB5E,SAAS,wBACtCnQ,EAAY3E,SAASF,KAAOiX,EAAK9X,MACjC0F,EAAY3E,SAASD,MAAQgX,EAAK4C,iBAEjC5C,EAAK2C,uBAAuB5E,SAAS,+BACtCnQ,EAAY1E,UAAUH,KAAOiX,EAAK9X,MAClC0F,EAAY1E,UAAUF,MAAQgX,EAAK4C,iBAElC5C,EAAK2C,uBAAuB5E,SAAS,iCACtCnQ,EAAYzE,UAAUJ,KAAOiX,EAAK9X,MAClC0F,EAAYzE,UAAUC,MAAQ4W,EAAK6C,uBAGvCjb,EAAK4T,mBAAmB5T,KAAKgE,QAAQ,SAACoU,GACjCA,EAAK8C,uBAAuB/E,SAAS,gBACtCnQ,EAAYvE,YAAYN,KAAOiX,EAAK9X,MACpC0F,EAAYvE,YAAYL,MAAQgX,EAAK4C,mBAGzC,MAEG,KAAA,EACHhV,EAAYjF,YAAZ,sBACAf,EAAK6T,eAAe7T,KAAKgE,QAAQ,SAACoU,GACjB,QAAZA,EAAKwC,MACN5U,EAAY/E,QAAQE,KAAOiX,EAAKyC,6BAChC7U,EAAY/E,QAAQC,IAApB,sBACA8E,EAAY/E,QAAQG,MAAQgX,EAAK0C,eAGrC9a,EAAK2T,iBAAiB3T,KAAKgE,QAAQ,SAACoU,GAC/BA,EAAK2C,uBAAuB5E,SAAS,wBACtCnQ,EAAY3E,SAASF,KAAOiX,EAAK9X,MACjC0F,EAAY3E,SAASD,MAAQgX,EAAK4C,iBAEjC5C,EAAK2C,uBAAuB5E,SAAS,+BACtCnQ,EAAY1E,UAAUH,KAAOiX,EAAK9X,MAClC0F,EAAY1E,UAAUF,MAAQgX,EAAK4C,iBAElC5C,EAAK2C,uBAAuB5E,SAAS,iCACtCnQ,EAAYzE,UAAUJ,KAAOiX,EAAK9X,MAClC0F,EAAYzE,UAAUC,MAAQ4W,EAAK6C,uBAGvCjb,EAAK4T,mBAAmB5T,KAAKgE,QAAQ,SAACoU,GACjCA,EAAK8C,uBAAuB/E,SAAS,gBACtCnQ,EAAYvE,YAAYN,KAAOiX,EAAK9X,MACpC0F,EAAYvE,YAAYL,MAAQgX,EAAK4C,mBAGzC,MAEG,KAAA,EACDhV,EAAYjF,YAAZ,sBACAf,EAAK6T,eAAe7T,KAAKgE,QAAQ,SAACoU,GACjB,QAAZA,EAAKwC,MACN5U,EAAY/E,QAAQE,KAAOiX,EAAKyC,6BAChC7U,EAAY/E,QAAQC,IAApB,sBACA8E,EAAY/E,QAAQG,MAAQgX,EAAK0C,eAGrC9a,EAAK2T,iBAAiB3T,KAAKgE,QAAQ,SAACoU,GAC/BA,EAAK2C,uBAAuB5E,SAAS,wBACtCnQ,EAAY3E,SAASF,KAAOiX,EAAK9X,MACjC0F,EAAY3E,SAASD,MAAQgX,EAAK4C,iBAEjC5C,EAAK2C,uBAAuB5E,SAAS,+BACtCnQ,EAAY1E,UAAUH,KAAOiX,EAAK9X,MAClC0F,EAAY1E,UAAUF,MAAQgX,EAAK4C,iBAElC5C,EAAK2C,uBAAuB5E,SAAS,iCACtCnQ,EAAYzE,UAAUJ,KAAOiX,EAAK9X,MAClC0F,EAAYzE,UAAUC,MAAQ4W,EAAK6C,uBAGvCjb,EAAK4T,mBAAmB5T,KAAKgE,QAAQ,SAACoU,GACjCA,EAAK8C,uBAAuB/E,SAAS,gBACtCnQ,EAAYvE,YAAYN,KAAOiX,EAAK9X,MACpC0F,EAAYvE,YAAYL,MAAQgX,EAAK4C,mBAG3C,MAEG,KAAA,EACH3J,QAAQpG,IAAI,qBACZjF,EAAYjF,YAAZ,sBACAf,EAAK6T,eAAe7T,KAAKgE,QAAQ,SAACoU,GAC7BA,GAAY,QAAZA,EAAKwC,IAAc,CAChBO,IAAAA,EAAa/C,EAAK0C,YAAYM,QAAQ,WAAW,IAErDD,GADAA,EAAaA,EAAWC,QAAQ,KAAK,MACbA,QAAQ,QAAQ,IACxCpV,EAAY/E,QAAQE,KAAOiX,EAAKyC,6BAChC7U,EAAY/E,QAAQC,IAApB,sBACA8E,EAAY/E,QAAQG,MAAwB+Z,gBAAAA,OAAAA,EAAe/C,MAAAA,OAAAA,EAAK0C,YAAhE,WAGJ9a,EAAK2T,iBAAiB3T,KAAKgE,QAAQ,SAACoU,GAC/BA,GAAAA,EAAK2C,uBAAuB5E,SAAS,sBAAsB,CACxDgF,IAAAA,EAAa/C,EAAK4C,gBAAgBI,QAAQ,KAAK,KACnDD,EAAaA,EAAWC,QAAQ,QAAQ,IACxCpV,EAAY3E,SAASF,KAAOiX,EAAK9X,MACjC0F,EAAY3E,SAASD,MAAwB+Z,gBAAAA,OAAAA,EAAe/C,MAAAA,OAAAA,EAAK4C,gBAAjE,QAEC5C,GAAAA,EAAK2C,uBAAuB5E,SAAS,6BAA6B,CAC/DgF,IAAAA,EAAa/C,EAAK4C,gBAAgBI,QAAQ,KAAK,KACnDD,EAAaA,EAAWC,QAAQ,QAAQ,IACxCpV,EAAY1E,UAAUH,KAAOiX,EAAK9X,MAClC0F,EAAY1E,UAAUF,MAAwB+Z,gBAAAA,OAAAA,EAAe/C,MAAAA,OAAAA,EAAK4C,gBAAlE,QAEC5C,EAAK2C,uBAAuB5E,SAAS,iCACtCnQ,EAAYzE,UAAUJ,KAAOiX,EAAK9X,MAClC0F,EAAYzE,UAAUC,MAAQ4W,EAAK6C,uBAGvCjb,EAAK4T,mBAAmB5T,KAAKgE,QAAQ,SAACoU,GACjCA,GAAAA,EAAK8C,uBAAuB/E,SAAS,cAAc,CAChDgF,IAAAA,EAAa/C,EAAK4C,gBAAgBI,QAAQ,KAAK,KACnDD,EAAaA,EAAWC,QAAQ,QAAQ,IACxCpV,EAAYvE,YAAYN,KAAOiX,EAAK9X,MACpC0F,EAAYvE,YAAYL,MAAwB+Z,gBAAAA,OAAAA,EAAe/C,MAAAA,OAAAA,EAAK4C,gBAApE,WAGJ,MAEG,KAAA,EACHhV,EAAYjF,YAAZ,sBACAf,EAAK6T,eAAe7T,KAAKgE,QAAQ,SAACoU,GACjB,QAAZA,EAAKwC,MACN5U,EAAY/E,QAAQE,KAAOiX,EAAKyC,6BAChC7U,EAAY/E,QAAQC,IAApB,sBACA8E,EAAY/E,QAAQG,MAAQgX,EAAK0C,eAGrC9a,EAAK2T,iBAAiB3T,KAAKgE,QAAQ,SAACoU,GAC/BA,EAAK2C,uBAAuB5E,SAAS,wBACtCnQ,EAAY3E,SAASF,KAAOiX,EAAK9X,MACjC0F,EAAY3E,SAASD,MAAQgX,EAAK4C,iBAEjC5C,EAAK2C,uBAAuB5E,SAAS,+BACtCnQ,EAAY1E,UAAUH,KAAOiX,EAAK9X,MAClC0F,EAAY1E,UAAUF,MAAQgX,EAAK4C,iBAElC5C,EAAK2C,uBAAuB5E,SAAS,iCACtCnQ,EAAYzE,UAAUJ,KAAOiX,EAAK9X,MAClC0F,EAAYzE,UAAUC,MAAQ4W,EAAK6C,uBAGvCjb,EAAK4T,mBAAmB5T,KAAKgE,QAAQ,SAACoU,GACjCA,EAAK8C,uBAAuB/E,SAAS,gBACtCnQ,EAAYvE,YAAYN,KAAOiX,EAAK9X,MACpC0F,EAAYvE,YAAYL,MAAQgX,EAAK4C,mBAGzC,MAEF,QACE3J,QAAQpG,IAAI,mBAGTjF,OAAAA,MACR,EA3RkBuU,GA2RlB,QAAA,QAAA;;;;AChSH,aACA,IAAA,EAAA,EAAA,QAAA,0BAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GADA,QAAA,sBACA,WACmB,IAAIA,EAAJ,QACjB5a,SAASG,eAAe,sBAAsBmX,iBAAiB,QAAS,WACtEtX,SAASG,eAAe,0BAA0BC,UAAY,KAHlE,CAKGY","file":"index.js","sourceRoot":"..","sourcesContent":["//! moment.js\n//! version : 2.27.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks() {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback(callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return (\n            input instanceof Array ||\n            Object.prototype.toString.call(input) === '[object Array]'\n        );\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return (\n            input != null &&\n            Object.prototype.toString.call(input) === '[object Object]'\n        );\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return Object.getOwnPropertyNames(obj).length === 0;\n        } else {\n            var k;\n            for (k in obj) {\n                if (hasOwnProp(obj, k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return (\n            typeof input === 'number' ||\n            Object.prototype.toString.call(input) === '[object Number]'\n        );\n    }\n\n    function isDate(input) {\n        return (\n            input instanceof Date ||\n            Object.prototype.toString.call(input) === '[object Date]'\n        );\n    }\n\n    function map(arr, fn) {\n        var res = [],\n            i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty: false,\n            unusedTokens: [],\n            unusedInput: [],\n            overflow: -2,\n            charsLeftOver: 0,\n            nullInput: false,\n            invalidEra: null,\n            invalidMonth: null,\n            invalidFormat: false,\n            userInvalidated: false,\n            iso: false,\n            parsedDateParts: [],\n            era: null,\n            meridiem: null,\n            rfc2822: false,\n            weekdayMismatch: false,\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this),\n                len = t.length >>> 0,\n                i;\n\n            for (i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m),\n                parsedParts = some.call(flags.parsedDateParts, function (i) {\n                    return i != null;\n                }),\n                isNowValid =\n                    !isNaN(m._d.getTime()) &&\n                    flags.overflow < 0 &&\n                    !flags.empty &&\n                    !flags.invalidEra &&\n                    !flags.invalidMonth &&\n                    !flags.invalidWeekday &&\n                    !flags.weekdayMismatch &&\n                    !flags.nullInput &&\n                    !flags.invalidFormat &&\n                    !flags.userInvalidated &&\n                    (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid =\n                    isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            } else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid(flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        } else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = (hooks.momentProperties = []),\n        updateInProgress = false;\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment(obj) {\n        return (\n            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)\n        );\n    }\n\n    function warn(msg) {\n        if (\n            hooks.suppressDeprecationWarnings === false &&\n            typeof console !== 'undefined' &&\n            console.warn\n        ) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [],\n                    arg,\n                    i,\n                    key;\n                for (i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (key in arguments[0]) {\n                            if (hasOwnProp(arguments[0], key)) {\n                                arg += key + ': ' + arguments[0][key] + ', ';\n                            }\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(\n                    msg +\n                        '\\nArguments: ' +\n                        Array.prototype.slice.call(args).join('') +\n                        '\\n' +\n                        new Error().stack\n                );\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return (\n            (typeof Function !== 'undefined' && input instanceof Function) ||\n            Object.prototype.toString.call(input) === '[object Function]'\n        );\n    }\n\n    function set(config) {\n        var prop, i;\n        for (i in config) {\n            if (hasOwnProp(config, i)) {\n                prop = config[i];\n                if (isFunction(prop)) {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' +\n                /\\d{1,2}/.source\n        );\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig),\n            prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (\n                hasOwnProp(parentConfig, prop) &&\n                !hasOwnProp(childConfig, prop) &&\n                isObject(parentConfig[prop])\n            ) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i,\n                res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay: '[Today at] LT',\n        nextDay: '[Tomorrow at] LT',\n        nextWeek: 'dddd [at] LT',\n        lastDay: '[Yesterday at] LT',\n        lastWeek: '[Last] dddd [at] LT',\n        sameElse: 'L',\n    };\n\n    function calendar(key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (\n            (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +\n            absNumber\n        );\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n        formatFunctions = {},\n        formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken(token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(\n                    func.apply(this, arguments),\n                    token\n                );\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens),\n            i,\n            length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '',\n                i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i])\n                    ? array[i].call(mom, format)\n                    : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] =\n            formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(\n                localFormattingTokens,\n                replaceLongDateFormatTokens\n            );\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var defaultLongDateFormat = {\n        LTS: 'h:mm:ss A',\n        LT: 'h:mm A',\n        L: 'MM/DD/YYYY',\n        LL: 'MMMM D, YYYY',\n        LLL: 'MMMM D, YYYY h:mm A',\n        LLLL: 'dddd, MMMM D, YYYY h:mm A',\n    };\n\n    function longDateFormat(key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper\n            .match(formattingTokens)\n            .map(function (tok) {\n                if (\n                    tok === 'MMMM' ||\n                    tok === 'MM' ||\n                    tok === 'DD' ||\n                    tok === 'dddd'\n                ) {\n                    return tok.slice(1);\n                }\n                return tok;\n            })\n            .join('');\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate() {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d',\n        defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal(number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        ss: '%d seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        w: 'a week',\n        ww: '%d weeks',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years',\n    };\n\n    function relativeTime(number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return isFunction(output)\n            ? output(number, withoutSuffix, string, isFuture)\n            : output.replace(/%d/i, number);\n    }\n\n    function pastFuture(diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias(unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string'\n            ? aliases[units] || aliases[units.toLowerCase()]\n            : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [],\n            u;\n        for (u in unitsObj) {\n            if (hasOwnProp(unitsObj, u)) {\n                units.push({ unit: u, priority: priorities[u] });\n            }\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    function absFloor(number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    function makeGetSet(unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get(mom, unit) {\n        return mom.isValid()\n            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()\n            : NaN;\n    }\n\n    function set$1(mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (\n                unit === 'FullYear' &&\n                isLeapYear(mom.year()) &&\n                mom.month() === 1 &&\n                mom.date() === 29\n            ) {\n                value = toInt(value);\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](\n                    value,\n                    mom.month(),\n                    daysInMonth(value, mom.month())\n                );\n            } else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet(units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n    function stringSet(units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units),\n                i;\n            for (i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    var match1 = /\\d/, //       0 - 9\n        match2 = /\\d\\d/, //      00 - 99\n        match3 = /\\d{3}/, //     000 - 999\n        match4 = /\\d{4}/, //    0000 - 9999\n        match6 = /[+-]?\\d{6}/, // -999999 - 999999\n        match1to2 = /\\d\\d?/, //       0 - 99\n        match3to4 = /\\d\\d\\d\\d?/, //     999 - 9999\n        match5to6 = /\\d\\d\\d\\d\\d\\d?/, //   99999 - 999999\n        match1to3 = /\\d{1,3}/, //       0 - 999\n        match1to4 = /\\d{1,4}/, //       0 - 9999\n        match1to6 = /[+-]?\\d{1,6}/, // -999999 - 999999\n        matchUnsigned = /\\d+/, //       0 - inf\n        matchSigned = /[+-]?\\d+/, //    -inf - inf\n        matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z\n        matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n        matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n        // any word (or two) characters or numbers including two/three word month in arabic.\n        // includes scottish gaelic two word and hyphenated months\n        matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,\n        regexes;\n\n    regexes = {};\n\n    function addRegexToken(token, regex, strictRegex) {\n        regexes[token] = isFunction(regex)\n            ? regex\n            : function (isStrict, localeData) {\n                  return isStrict && strictRegex ? strictRegex : regex;\n              };\n    }\n\n    function getParseRegexForToken(token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(\n            s\n                .replace('\\\\', '')\n                .replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (\n                    matched,\n                    p1,\n                    p2,\n                    p3,\n                    p4\n                ) {\n                    return p1 || p2 || p3 || p4;\n                })\n        );\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken(token, callback) {\n        var i,\n            func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken(token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n        WEEK = 7,\n        WEEKDAY = 8;\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1\n            ? isLeapYear(year)\n                ? 29\n                : 28\n            : 31 - ((modMonth % 7) % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M', match1to2);\n    addRegexToken('MM', match1to2, match2);\n    addRegexToken('MMM', function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(\n            '_'\n        ),\n        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(\n            '_'\n        ),\n        MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,\n        defaultMonthsShortRegex = matchWord,\n        defaultMonthsRegex = matchWord;\n\n    function localeMonths(m, format) {\n        if (!m) {\n            return isArray(this._months)\n                ? this._months\n                : this._months['standalone'];\n        }\n        return isArray(this._months)\n            ? this._months[m.month()]\n            : this._months[\n                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n                      ? 'format'\n                      : 'standalone'\n              ][m.month()];\n    }\n\n    function localeMonthsShort(m, format) {\n        if (!m) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort)\n            ? this._monthsShort[m.month()]\n            : this._monthsShort[\n                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'\n              ][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse(monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\n                    '^' + this.months(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n                this._shortMonthsParse[i] = new RegExp(\n                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex =\n                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'MMMM' &&\n                this._longMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'MMM' &&\n                this._shortMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth(mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth(value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth() {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    function monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict\n                ? this._monthsShortStrictRegex\n                : this._monthsShortRegex;\n        }\n    }\n\n    function monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict\n                ? this._monthsStrictRegex\n                : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._monthsShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? zeroFill(y, 4) : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY', 4], 0, 'year');\n    addFormatToken(0, ['YYYYY', 5], 0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y', matchSigned);\n    addRegexToken('YY', match1to2, match2);\n    addRegexToken('YYYY', match1to4, match4);\n    addRegexToken('YYYYY', match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] =\n            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear() {\n        return isLeapYear(this.year());\n    }\n\n    function createDate(y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate(y) {\n        var date, args;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear,\n            resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear,\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek,\n            resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear,\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w', match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W', match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (\n        input,\n        week,\n        config,\n        token\n    ) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek(mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow: 0, // Sunday is the first day of the week.\n        doy: 6, // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek() {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear() {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek(input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek(input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d', match1to2);\n    addRegexToken('e', match1to2);\n    addRegexToken('E', match1to2);\n    addRegexToken('dd', function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd', function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd', function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays(ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(\n            '_'\n        ),\n        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n        defaultWeekdaysRegex = matchWord,\n        defaultWeekdaysShortRegex = matchWord,\n        defaultWeekdaysMinRegex = matchWord;\n\n    function localeWeekdays(m, format) {\n        var weekdays = isArray(this._weekdays)\n            ? this._weekdays\n            : this._weekdays[\n                  m && m !== true && this._weekdays.isFormat.test(format)\n                      ? 'format'\n                      : 'standalone'\n              ];\n        return m === true\n            ? shiftWeekdays(weekdays, this._week.dow)\n            : m\n            ? weekdays[m.day()]\n            : weekdays;\n    }\n\n    function localeWeekdaysShort(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : m\n            ? this._weekdaysShort[m.day()]\n            : this._weekdaysShort;\n    }\n\n    function localeWeekdaysMin(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : m\n            ? this._weekdaysMin[m.day()]\n            : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse(weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._shortWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._minWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n            }\n            if (!this._weekdaysParse[i]) {\n                regex =\n                    '^' +\n                    this.weekdays(mom, '') +\n                    '|^' +\n                    this.weekdaysShort(mom, '') +\n                    '|^' +\n                    this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'dddd' &&\n                this._fullWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'ddd' &&\n                this._shortWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'dd' &&\n                this._minWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    function weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict\n                ? this._weekdaysStrictRegex\n                : this._weekdaysRegex;\n        }\n    }\n\n    function weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict\n                ? this._weekdaysShortStrictRegex\n                : this._weekdaysShortRegex;\n        }\n    }\n\n    function weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict\n                ? this._weekdaysMinStrictRegex\n                : this._weekdaysMinRegex;\n        }\n    }\n\n    function computeWeekdaysParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [],\n            shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            minp,\n            shortp,\n            longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = regexEscape(this.weekdaysMin(mom, ''));\n            shortp = regexEscape(this.weekdaysShort(mom, ''));\n            longp = regexEscape(this.weekdays(mom, ''));\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysMinStrictRegex = new RegExp(\n            '^(' + minPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return (\n            '' +\n            hFormat.apply(this) +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return (\n            '' +\n            this.hours() +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    function meridiem(token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(\n                this.hours(),\n                this.minutes(),\n                lowercase\n            );\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a', matchMeridiem);\n    addRegexToken('A', matchMeridiem);\n    addRegexToken('H', match1to2);\n    addRegexToken('h', match1to2);\n    addRegexToken('k', match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return (input + '').toLowerCase().charAt(0) === 'p';\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i,\n        // Setting the hour should keep the time, because the user explicitly\n        // specified which hour they want. So trying to maintain the same hour (in\n        // a new timezone) makes sense. Adding/subtracting hours does not follow\n        // this rule.\n        getSetHour = makeGetSet('Hours', true);\n\n    function localeMeridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse,\n    };\n\n    // internal storage for locale config files\n    var locales = {},\n        localeFamilies = {},\n        globalLocale;\n\n    function commonPrefix(arr1, arr2) {\n        var i,\n            minl = Math.min(arr1.length, arr2.length);\n        for (i = 0; i < minl; i += 1) {\n            if (arr1[i] !== arr2[i]) {\n                return i;\n            }\n        }\n        return minl;\n    }\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0,\n            j,\n            next,\n            locale,\n            split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (\n                    next &&\n                    next.length >= j &&\n                    commonPrefix(split, next) >= j - 1\n                ) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null,\n            aliasedRequire;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (\n            locales[name] === undefined &&\n            typeof module !== 'undefined' &&\n            module &&\n            module.exports\n        ) {\n            try {\n                oldLocale = globalLocale._abbr;\n                aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {\n                // mark as not found to avoid repeating expensive file require call causing high CPU\n                // when trying to find en-US, en_US, en-us for every format call\n                locales[name] = null; // null means not found\n            }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale(key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            } else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            } else {\n                if (typeof console !== 'undefined' && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\n                        'Locale ' + key + ' not found. Did you forget to load it?'\n                    );\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale(name, config) {\n        if (config !== null) {\n            var locale,\n                parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\n                    'defineLocaleOverride',\n                    'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'\n                );\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config,\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale,\n                tmpLocale,\n                parentConfig = baseConfig;\n\n            if (locales[name] != null && locales[name].parentLocale != null) {\n                // Update existing child locale in-place to avoid memory-leaks\n                locales[name].set(mergeConfigs(locales[name]._config, config));\n            } else {\n                // MERGE\n                tmpLocale = loadLocale(name);\n                if (tmpLocale != null) {\n                    parentConfig = tmpLocale._config;\n                }\n                config = mergeConfigs(parentConfig, config);\n                if (tmpLocale == null) {\n                    // updateLocale is called for creating a new locale\n                    // Set abbr so it will have a name (getters return\n                    // undefined otherwise).\n                    config.abbr = name;\n                }\n                locale = new Locale(config);\n                locale.parentLocale = locales[name];\n                locales[name] = locale;\n            }\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                    if (name === getSetGlobalLocale()) {\n                        getSetGlobalLocale(name);\n                    }\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale(key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow(m) {\n        var overflow,\n            a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH] < 0 || a[MONTH] > 11\n                    ? MONTH\n                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])\n                    ? DATE\n                    : a[HOUR] < 0 ||\n                      a[HOUR] > 24 ||\n                      (a[HOUR] === 24 &&\n                          (a[MINUTE] !== 0 ||\n                              a[SECOND] !== 0 ||\n                              a[MILLISECOND] !== 0))\n                    ? HOUR\n                    : a[MINUTE] < 0 || a[MINUTE] > 59\n                    ? MINUTE\n                    : a[SECOND] < 0 || a[SECOND] > 59\n                    ? SECOND\n                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999\n                    ? MILLISECOND\n                    : -1;\n\n            if (\n                getParsingFlags(m)._overflowDayOfYear &&\n                (overflow < YEAR || overflow > DATE)\n            ) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n        isoDates = [\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n            ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n            ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n            ['YYYY-DDD', /\\d{4}-\\d{3}/],\n            ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n            ['YYYYYYMMDD', /[+-]\\d{10}/],\n            ['YYYYMMDD', /\\d{8}/],\n            ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n            ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n            ['YYYYDDD', /\\d{7}/],\n            ['YYYYMM', /\\d{6}/, false],\n            ['YYYY', /\\d{4}/, false],\n        ],\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n            ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n            ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /\\d\\d:\\d\\d/],\n            ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n            ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n            ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n            ['HHmm', /\\d\\d\\d\\d/],\n            ['HH', /\\d\\d/],\n        ],\n        aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n        obsOffsets = {\n            UT: 0,\n            GMT: 0,\n            EDT: -4 * 60,\n            EST: -5 * 60,\n            CDT: -5 * 60,\n            CST: -6 * 60,\n            MDT: -6 * 60,\n            MST: -7 * 60,\n            PDT: -7 * 60,\n            PST: -8 * 60,\n        };\n\n    // date from iso format\n    function configFromISO(config) {\n        var i,\n            l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime,\n            dateFormat,\n            timeFormat,\n            tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    function extractFromRFC2822Strings(\n        yearStr,\n        monthStr,\n        dayStr,\n        hourStr,\n        minuteStr,\n        secondStr\n    ) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10),\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s\n            .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n            .replace(/(\\s\\s+)/g, ' ')\n            .replace(/^\\s\\s*/, '')\n            .replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(\n                    parsedInput[0],\n                    parsedInput[1],\n                    parsedInput[2]\n                ).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10),\n                m = hm % 100,\n                h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i)),\n            parsedArray;\n        if (match) {\n            parsedArray = extractFromRFC2822Strings(\n                match[4],\n                match[3],\n                match[2],\n                match[5],\n                match[6],\n                match[7]\n            );\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        if (config._strict) {\n            config._isValid = false;\n        } else {\n            // Final attempt, use Input Fallback\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n            'discouraged and will be removed in an upcoming major release. Please refer to ' +\n            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [\n                nowValue.getUTCFullYear(),\n                nowValue.getUTCMonth(),\n                nowValue.getUTCDate(),\n            ];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray(config) {\n        var i,\n            date,\n            input = [],\n            currentDate,\n            expectedWeekday,\n            yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (\n                config._dayOfYear > daysInYear(yearToUse) ||\n                config._dayOfYear === 0\n            ) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] =\n                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (\n            config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0\n        ) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(\n            null,\n            input\n        );\n        expectedWeekday = config._useUTC\n            ? config._d.getUTCDay()\n            : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (\n            config._w &&\n            typeof config._w.d !== 'undefined' &&\n            config._w.d !== expectedWeekday\n        ) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(\n                w.GG,\n                config._a[YEAR],\n                weekOfYear(createLocal(), 1, 4).year\n            );\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i,\n            parsedInput,\n            tokens,\n            token,\n            skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0,\n            era;\n\n        tokens =\n            expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) ||\n                [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(\n                    string.indexOf(parsedInput) + parsedInput.length\n                );\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                } else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver =\n            stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (\n            config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0\n        ) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(\n            config._locale,\n            config._a[HOUR],\n            config._meridiem\n        );\n\n        // handle era\n        era = getParsingFlags(config).era;\n        if (era !== null) {\n            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n        }\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n    function meridiemFixWrap(locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n            scoreToBeat,\n            i,\n            currentScore,\n            validFormatFound,\n            bestFormatIsValid = false;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            validFormatFound = false;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (isValid(tempConfig)) {\n                validFormatFound = true;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (!bestFormatIsValid) {\n                if (\n                    scoreToBeat == null ||\n                    currentScore < scoreToBeat ||\n                    validFormatFound\n                ) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                    if (validFormatFound) {\n                        bestFormatIsValid = true;\n                    }\n                }\n            } else {\n                if (currentScore < scoreToBeat) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                }\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i),\n            dayOrDate = i.day === undefined ? i.date : i.day;\n        config._a = map(\n            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],\n            function (obj) {\n                return obj && parseInt(obj, 10);\n            }\n        );\n\n        configFromArray(config);\n    }\n\n    function createFromConfig(config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig(config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({ nullInput: true });\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC(input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (format === true || format === false) {\n            strict = format;\n            format = undefined;\n        }\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if (\n            (isObject(input) && isObjectEmpty(input)) ||\n            (isArray(input) && input.length === 0)\n        ) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other < this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        ),\n        prototypeMax = deprecate(\n            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other > this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +new Date();\n    };\n\n    var ordering = [\n        'year',\n        'quarter',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond',\n    ];\n\n    function isDurationValid(m) {\n        var key,\n            unitHasDecimal = false,\n            i;\n        for (key in m) {\n            if (\n                hasOwnProp(m, key) &&\n                !(\n                    indexOf.call(ordering, key) !== -1 &&\n                    (m[key] == null || !isNaN(m[key]))\n                )\n            ) {\n                return false;\n            }\n        }\n\n        for (i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds =\n            +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days + weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months + quarters * 3 + years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration(obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (\n                (dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))\n            ) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // FORMATTING\n\n    function offset(token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset(),\n                sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return (\n                sign +\n                zeroFill(~~(offset / 60), 2) +\n                separator +\n                zeroFill(~~offset % 60, 2)\n            );\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z', matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher),\n            chunk,\n            parts,\n            minutes;\n\n        if (matches === null) {\n            return null;\n        }\n\n        chunk = matches[matches.length - 1] || [];\n        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff =\n                (isMoment(input) || isDate(input)\n                    ? input.valueOf()\n                    : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset(m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset());\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset(input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(\n                        this,\n                        createDuration(input - offset, 'm'),\n                        1,\n                        false\n                    );\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone(input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC(keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal(keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset() {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            } else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset(input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime() {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted() {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {},\n            other;\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted =\n                this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal() {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset() {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc() {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        // and further modified to allow for strings containing both week and day\n        isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration(input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months,\n            };\n        } else if (isNumber(input) || !isNaN(+input)) {\n            duration = {};\n            if (key) {\n                duration[key] = +input;\n            } else {\n                duration.milliseconds = +input;\n            }\n        } else if ((match = aspNetRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match\n            };\n        } else if ((match = isoRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign),\n            };\n        } else if (duration == null) {\n            // checks for null or undefined\n            duration = {};\n        } else if (\n            typeof duration === 'object' &&\n            ('from' in duration || 'to' in duration)\n        ) {\n            diffRes = momentsDifference(\n                createLocal(duration.from),\n                createLocal(duration.to)\n            );\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n            ret._isValid = input._isValid;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso(inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months =\n            other.month() - base.month() + (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return { milliseconds: 0, months: 0 };\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(\n                    name,\n                    'moment().' +\n                        name +\n                        '(period, number) is deprecated. Please use moment().' +\n                        name +\n                        '(number, period). ' +\n                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'\n                );\n                tmp = val;\n                val = period;\n                period = tmp;\n            }\n\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add = createAdder(1, 'add'),\n        subtract = createAdder(-1, 'subtract');\n\n    function isString(input) {\n        return typeof input === 'string' || input instanceof String;\n    }\n\n    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n    function isMomentInput(input) {\n        return (\n            isMoment(input) ||\n            isDate(input) ||\n            isString(input) ||\n            isNumber(input) ||\n            isNumberOrStringArray(input) ||\n            isMomentInputObject(input) ||\n            input === null ||\n            input === undefined\n        );\n    }\n\n    function isMomentInputObject(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'years',\n                'year',\n                'y',\n                'months',\n                'month',\n                'M',\n                'days',\n                'day',\n                'd',\n                'dates',\n                'date',\n                'D',\n                'hours',\n                'hour',\n                'h',\n                'minutes',\n                'minute',\n                'm',\n                'seconds',\n                'second',\n                's',\n                'milliseconds',\n                'millisecond',\n                'ms',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function isNumberOrStringArray(input) {\n        var arrayTest = isArray(input),\n            dataTypeTest = false;\n        if (arrayTest) {\n            dataTypeTest =\n                input.filter(function (item) {\n                    return !isNumber(item) && isString(input);\n                }).length === 0;\n        }\n        return arrayTest && dataTypeTest;\n    }\n\n    function isCalendarSpec(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'sameDay',\n                'nextDay',\n                'lastDay',\n                'nextWeek',\n                'lastWeek',\n                'sameElse',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6\n            ? 'sameElse'\n            : diff < -1\n            ? 'lastWeek'\n            : diff < 0\n            ? 'lastDay'\n            : diff < 1\n            ? 'sameDay'\n            : diff < 2\n            ? 'nextDay'\n            : diff < 7\n            ? 'nextWeek'\n            : 'sameElse';\n    }\n\n    function calendar$1(time, formats) {\n        // Support for single parameter, formats only overload to the calendar function\n        if (arguments.length === 1) {\n            if (isMomentInput(arguments[0])) {\n                time = arguments[0];\n                formats = undefined;\n            } else if (isCalendarSpec(arguments[0])) {\n                formats = arguments[0];\n                time = undefined;\n            }\n        }\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse',\n            output =\n                formats &&\n                (isFunction(formats[format])\n                    ? formats[format].call(this, now)\n                    : formats[format]);\n\n        return this.format(\n            output || this.localeData().calendar(format, this, createLocal(now))\n        );\n    }\n\n    function clone() {\n        return new Moment(this);\n    }\n\n    function isAfter(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween(from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (\n            (inclusivity[0] === '('\n                ? this.isAfter(localFrom, units)\n                : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')'\n                ? this.isBefore(localTo, units)\n                : !this.isAfter(localTo, units))\n        );\n    }\n\n    function isSame(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return (\n                this.clone().startOf(units).valueOf() <= inputMs &&\n                inputMs <= this.clone().endOf(units).valueOf()\n            );\n        }\n    }\n\n    function isSameOrAfter(input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore(input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff(input, units, asFloat) {\n        var that, zoneDelta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year':\n                output = monthDiff(this, that) / 12;\n                break;\n            case 'month':\n                output = monthDiff(this, that);\n                break;\n            case 'quarter':\n                output = monthDiff(this, that) / 3;\n                break;\n            case 'second':\n                output = (this - that) / 1e3;\n                break; // 1000\n            case 'minute':\n                output = (this - that) / 6e4;\n                break; // 1000 * 60\n            case 'hour':\n                output = (this - that) / 36e5;\n                break; // 1000 * 60 * 60\n            case 'day':\n                output = (this - that - zoneDelta) / 864e5;\n                break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week':\n                output = (this - that - zoneDelta) / 6048e5;\n                break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default:\n                output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2,\n            adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString() {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true,\n            m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(\n                m,\n                utc\n                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'\n                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'\n            );\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)\n                    .toISOString()\n                    .replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(\n            m,\n            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n        );\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect() {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment',\n            zone = '',\n            prefix,\n            year,\n            datetime,\n            suffix;\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        prefix = '[' + func + '(\"]';\n        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n        datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format(inputString) {\n        if (!inputString) {\n            inputString = this.isUtc()\n                ? hooks.defaultFormatUtc\n                : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ to: this, from: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow(withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ from: this, to: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow(withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale(key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData() {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000,\n        MS_PER_MINUTE = 60 * MS_PER_SECOND,\n        MS_PER_HOUR = 60 * MS_PER_MINUTE,\n        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return ((dividend % divisor) + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(\n                    this.year(),\n                    this.month() - (this.month() % 3),\n                    1\n                );\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - this.weekday()\n                );\n                break;\n            case 'isoWeek':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - (this.isoWeekday() - 1)\n                );\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(\n                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                    MS_PER_HOUR\n                );\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month() - (this.month() % 3) + 3,\n                        1\n                    ) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - this.weekday() + 7\n                    ) - 1;\n                break;\n            case 'isoWeek':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - (this.isoWeekday() - 1) + 7\n                    ) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time +=\n                    MS_PER_HOUR -\n                    mod$1(\n                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                        MS_PER_HOUR\n                    ) -\n                    1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf() {\n        return this._d.valueOf() - (this._offset || 0) * 60000;\n    }\n\n    function unix() {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate() {\n        return new Date(this.valueOf());\n    }\n\n    function toArray() {\n        var m = this;\n        return [\n            m.year(),\n            m.month(),\n            m.date(),\n            m.hour(),\n            m.minute(),\n            m.second(),\n            m.millisecond(),\n        ];\n    }\n\n    function toObject() {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds(),\n        };\n    }\n\n    function toJSON() {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2() {\n        return isValid(this);\n    }\n\n    function parsingFlags() {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt() {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict,\n        };\n    }\n\n    addFormatToken('N', 0, 0, 'eraAbbr');\n    addFormatToken('NN', 0, 0, 'eraAbbr');\n    addFormatToken('NNN', 0, 0, 'eraAbbr');\n    addFormatToken('NNNN', 0, 0, 'eraName');\n    addFormatToken('NNNNN', 0, 0, 'eraNarrow');\n\n    addFormatToken('y', ['y', 1], 'yo', 'eraYear');\n    addFormatToken('y', ['yy', 2], 0, 'eraYear');\n    addFormatToken('y', ['yyy', 3], 0, 'eraYear');\n    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');\n\n    addRegexToken('N', matchEraAbbr);\n    addRegexToken('NN', matchEraAbbr);\n    addRegexToken('NNN', matchEraAbbr);\n    addRegexToken('NNNN', matchEraName);\n    addRegexToken('NNNNN', matchEraNarrow);\n\n    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (\n        input,\n        array,\n        config,\n        token\n    ) {\n        var era = config._locale.erasParse(input, token, config._strict);\n        if (era) {\n            getParsingFlags(config).era = era;\n        } else {\n            getParsingFlags(config).invalidEra = input;\n        }\n    });\n\n    addRegexToken('y', matchUnsigned);\n    addRegexToken('yy', matchUnsigned);\n    addRegexToken('yyy', matchUnsigned);\n    addRegexToken('yyyy', matchUnsigned);\n    addRegexToken('yo', matchEraYearOrdinal);\n\n    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);\n    addParseToken(['yo'], function (input, array, config, token) {\n        var match;\n        if (config._locale._eraYearOrdinalRegex) {\n            match = input.match(config._locale._eraYearOrdinalRegex);\n        }\n\n        if (config._locale.eraYearOrdinalParse) {\n            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n        } else {\n            array[YEAR] = parseInt(input, 10);\n        }\n    });\n\n    function localeEras(m, format) {\n        var i,\n            l,\n            date,\n            eras = this._eras || getLocale('en')._eras;\n        for (i = 0, l = eras.length; i < l; ++i) {\n            switch (typeof eras[i].since) {\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].since).startOf('day');\n                    eras[i].since = date.valueOf();\n                    break;\n            }\n\n            switch (typeof eras[i].until) {\n                case 'undefined':\n                    eras[i].until = +Infinity;\n                    break;\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].until).startOf('day').valueOf();\n                    eras[i].until = date.valueOf();\n                    break;\n            }\n        }\n        return eras;\n    }\n\n    function localeErasParse(eraName, format, strict) {\n        var i,\n            l,\n            eras = this.eras(),\n            name,\n            abbr,\n            narrow;\n        eraName = eraName.toUpperCase();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            name = eras[i].name.toUpperCase();\n            abbr = eras[i].abbr.toUpperCase();\n            narrow = eras[i].narrow.toUpperCase();\n\n            if (strict) {\n                switch (format) {\n                    case 'N':\n                    case 'NN':\n                    case 'NNN':\n                        if (abbr === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNN':\n                        if (name === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNNN':\n                        if (narrow === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                }\n            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {\n                return eras[i];\n            }\n        }\n    }\n\n    function localeErasConvertYear(era, year) {\n        var dir = era.since <= era.until ? +1 : -1;\n        if (year === undefined) {\n            return hooks(era.since).year();\n        } else {\n            return hooks(era.since).year() + (year - era.offset) * dir;\n        }\n    }\n\n    function getEraName() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].name;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].name;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraNarrow() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].narrow;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].narrow;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraAbbr() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].abbr;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].abbr;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraYear() {\n        var i,\n            l,\n            dir,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            dir = eras[i].since <= eras[i].until ? +1 : -1;\n\n            // truncate time\n            val = this.startOf('day').valueOf();\n\n            if (\n                (eras[i].since <= val && val <= eras[i].until) ||\n                (eras[i].until <= val && val <= eras[i].since)\n            ) {\n                return (\n                    (this.year() - hooks(eras[i].since).year()) * dir +\n                    eras[i].offset\n                );\n            }\n        }\n\n        return this.year();\n    }\n\n    function erasNameRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNameRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNameRegex : this._erasRegex;\n    }\n\n    function erasAbbrRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasAbbrRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasAbbrRegex : this._erasRegex;\n    }\n\n    function erasNarrowRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNarrowRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNarrowRegex : this._erasRegex;\n    }\n\n    function matchEraAbbr(isStrict, locale) {\n        return locale.erasAbbrRegex(isStrict);\n    }\n\n    function matchEraName(isStrict, locale) {\n        return locale.erasNameRegex(isStrict);\n    }\n\n    function matchEraNarrow(isStrict, locale) {\n        return locale.erasNarrowRegex(isStrict);\n    }\n\n    function matchEraYearOrdinal(isStrict, locale) {\n        return locale._eraYearOrdinalRegex || matchUnsigned;\n    }\n\n    function computeErasParse() {\n        var abbrPieces = [],\n            namePieces = [],\n            narrowPieces = [],\n            mixedPieces = [],\n            i,\n            l,\n            eras = this.eras();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            namePieces.push(regexEscape(eras[i].name));\n            abbrPieces.push(regexEscape(eras[i].abbr));\n            narrowPieces.push(regexEscape(eras[i].narrow));\n\n            mixedPieces.push(regexEscape(eras[i].name));\n            mixedPieces.push(regexEscape(eras[i].abbr));\n            mixedPieces.push(regexEscape(eras[i].narrow));\n        }\n\n        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');\n        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');\n        this._erasNarrowRegex = new RegExp(\n            '^(' + narrowPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken(token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg', 'weekYear');\n    addWeekYearFormatToken('ggggg', 'weekYear');\n    addWeekYearFormatToken('GGGG', 'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n    // PARSING\n\n    addRegexToken('G', matchSigned);\n    addRegexToken('g', matchSigned);\n    addRegexToken('GG', match1to2, match2);\n    addRegexToken('gg', match1to2, match2);\n    addRegexToken('GGGG', match1to4, match4);\n    addRegexToken('gggg', match1to4, match4);\n    addRegexToken('GGGGG', match1to6, match6);\n    addRegexToken('ggggg', match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (\n        input,\n        week,\n        config,\n        token\n    ) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.week(),\n            this.weekday(),\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        );\n    }\n\n    function getSetISOWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.isoWeek(),\n            this.isoWeekday(),\n            1,\n            4\n        );\n    }\n\n    function getISOWeeksInYear() {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getISOWeeksInISOWeekYear() {\n        return weeksInYear(this.isoWeekYear(), 1, 4);\n    }\n\n    function getWeeksInYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getWeeksInWeekYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter(input) {\n        return input == null\n            ? Math.ceil((this.month() + 1) / 3)\n            : this.month((input - 1) * 3 + (this.month() % 3));\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D', match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict\n            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse\n            : locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD', match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear(input) {\n        var dayOfYear =\n            Math.round(\n                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5\n            ) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m', match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s', match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S', match1to3, match1);\n    addRegexToken('SS', match1to3, match2);\n    addRegexToken('SSS', match1to3, match3);\n\n    var token, getSetMillisecond;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n\n    getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z', 0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr() {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName() {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add = add;\n    proto.calendar = calendar$1;\n    proto.clone = clone;\n    proto.diff = diff;\n    proto.endOf = endOf;\n    proto.format = format;\n    proto.from = from;\n    proto.fromNow = fromNow;\n    proto.to = to;\n    proto.toNow = toNow;\n    proto.get = stringGet;\n    proto.invalidAt = invalidAt;\n    proto.isAfter = isAfter;\n    proto.isBefore = isBefore;\n    proto.isBetween = isBetween;\n    proto.isSame = isSame;\n    proto.isSameOrAfter = isSameOrAfter;\n    proto.isSameOrBefore = isSameOrBefore;\n    proto.isValid = isValid$2;\n    proto.lang = lang;\n    proto.locale = locale;\n    proto.localeData = localeData;\n    proto.max = prototypeMax;\n    proto.min = prototypeMin;\n    proto.parsingFlags = parsingFlags;\n    proto.set = stringSet;\n    proto.startOf = startOf;\n    proto.subtract = subtract;\n    proto.toArray = toArray;\n    proto.toObject = toObject;\n    proto.toDate = toDate;\n    proto.toISOString = toISOString;\n    proto.inspect = inspect;\n    if (typeof Symbol !== 'undefined' && Symbol.for != null) {\n        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {\n            return 'Moment<' + this.format() + '>';\n        };\n    }\n    proto.toJSON = toJSON;\n    proto.toString = toString;\n    proto.unix = unix;\n    proto.valueOf = valueOf;\n    proto.creationData = creationData;\n    proto.eraName = getEraName;\n    proto.eraNarrow = getEraNarrow;\n    proto.eraAbbr = getEraAbbr;\n    proto.eraYear = getEraYear;\n    proto.year = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week = proto.weeks = getSetWeek;\n    proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n    proto.weeksInYear = getWeeksInYear;\n    proto.weeksInWeekYear = getWeeksInWeekYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n    proto.date = getSetDayOfMonth;\n    proto.day = proto.days = getSetDayOfWeek;\n    proto.weekday = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset = getSetOffset;\n    proto.utc = setOffsetToUTC;\n    proto.local = setOffsetToLocal;\n    proto.parseZone = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST = isDaylightSavingTime;\n    proto.isLocal = isLocal;\n    proto.isUtcOffset = isUtcOffset;\n    proto.isUtc = isUtc;\n    proto.isUTC = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates = deprecate(\n        'dates accessor is deprecated. Use date instead.',\n        getSetDayOfMonth\n    );\n    proto.months = deprecate(\n        'months accessor is deprecated. Use month instead',\n        getSetMonth\n    );\n    proto.years = deprecate(\n        'years accessor is deprecated. Use year instead',\n        getSetYear\n    );\n    proto.zone = deprecate(\n        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',\n        getSetZone\n    );\n    proto.isDSTShifted = deprecate(\n        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',\n        isDaylightSavingTimeShifted\n    );\n\n    function createUnix(input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone() {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat(string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar = calendar;\n    proto$1.longDateFormat = longDateFormat;\n    proto$1.invalidDate = invalidDate;\n    proto$1.ordinal = ordinal;\n    proto$1.preparse = preParsePostFormat;\n    proto$1.postformat = preParsePostFormat;\n    proto$1.relativeTime = relativeTime;\n    proto$1.pastFuture = pastFuture;\n    proto$1.set = set;\n    proto$1.eras = localeEras;\n    proto$1.erasParse = localeErasParse;\n    proto$1.erasConvertYear = localeErasConvertYear;\n    proto$1.erasAbbrRegex = erasAbbrRegex;\n    proto$1.erasNameRegex = erasNameRegex;\n    proto$1.erasNarrowRegex = erasNarrowRegex;\n\n    proto$1.months = localeMonths;\n    proto$1.monthsShort = localeMonthsShort;\n    proto$1.monthsParse = localeMonthsParse;\n    proto$1.monthsRegex = monthsRegex;\n    proto$1.monthsShortRegex = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays = localeWeekdays;\n    proto$1.weekdaysMin = localeWeekdaysMin;\n    proto$1.weekdaysShort = localeWeekdaysShort;\n    proto$1.weekdaysParse = localeWeekdaysParse;\n\n    proto$1.weekdaysRegex = weekdaysRegex;\n    proto$1.weekdaysShortRegex = weekdaysShortRegex;\n    proto$1.weekdaysMinRegex = weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1(format, index, field, setter) {\n        var locale = getLocale(),\n            utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl(format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i,\n            out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl(localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0,\n            i,\n            out = [];\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths(format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort(format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        eras: [\n            {\n                since: '0001-01-01',\n                until: +Infinity,\n                offset: 1,\n                name: 'Anno Domini',\n                narrow: 'AD',\n                abbr: 'AD',\n            },\n            {\n                since: '0000-12-31',\n                until: -Infinity,\n                offset: 1,\n                name: 'Before Christ',\n                narrow: 'BC',\n                abbr: 'BC',\n            },\n        ],\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal: function (number) {\n            var b = number % 10,\n                output =\n                    toInt((number % 100) / 10) === 1\n                        ? 'th'\n                        : b === 1\n                        ? 'st'\n                        : b === 2\n                        ? 'nd'\n                        : b === 3\n                        ? 'rd'\n                        : 'th';\n            return number + output;\n        },\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate(\n        'moment.lang is deprecated. Use moment.locale instead.',\n        getSetGlobalLocale\n    );\n    hooks.langData = deprecate(\n        'moment.langData is deprecated. Use moment.localeData instead.',\n        getLocale\n    );\n\n    var mathAbs = Math.abs;\n\n    function abs() {\n        var data = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.months = mathAbs(data.months);\n        data.years = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1(duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days += direction * other._days;\n        duration._months += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1(input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1(input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil(number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble() {\n        var milliseconds = this._milliseconds,\n            days = this._days,\n            months = this._months,\n            data = this._data,\n            seconds,\n            minutes,\n            hours,\n            years,\n            monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (\n            !(\n                (milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0)\n            )\n        ) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds = absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n\n        minutes = absFloor(seconds / 60);\n        data.minutes = minutes % 60;\n\n        hours = absFloor(minutes / 60);\n        data.hours = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days = days;\n        data.months = months;\n        data.years = years;\n\n        return this;\n    }\n\n    function daysToMonths(days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return (days * 4800) / 146097;\n    }\n\n    function monthsToDays(months) {\n        // the reverse of daysToMonths\n        return (months * 146097) / 4800;\n    }\n\n    function as(units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days,\n            months,\n            milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':\n                    return months;\n                case 'quarter':\n                    return months / 3;\n                case 'year':\n                    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week':\n                    return days / 7 + milliseconds / 6048e5;\n                case 'day':\n                    return days + milliseconds / 864e5;\n                case 'hour':\n                    return days * 24 + milliseconds / 36e5;\n                case 'minute':\n                    return days * 1440 + milliseconds / 6e4;\n                case 'second':\n                    return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond':\n                    return Math.floor(days * 864e5) + milliseconds;\n                default:\n                    throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1() {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs(alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms'),\n        asSeconds = makeAs('s'),\n        asMinutes = makeAs('m'),\n        asHours = makeAs('h'),\n        asDays = makeAs('d'),\n        asWeeks = makeAs('w'),\n        asMonths = makeAs('M'),\n        asQuarters = makeAs('Q'),\n        asYears = makeAs('y');\n\n    function clone$1() {\n        return createDuration(this);\n    }\n\n    function get$2(units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds'),\n        seconds = makeGetter('seconds'),\n        minutes = makeGetter('minutes'),\n        hours = makeGetter('hours'),\n        days = makeGetter('days'),\n        months = makeGetter('months'),\n        years = makeGetter('years');\n\n    function weeks() {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round,\n        thresholds = {\n            ss: 44, // a few seconds to seconds\n            s: 45, // seconds to minute\n            m: 45, // minutes to hour\n            h: 22, // hours to day\n            d: 26, // days to month/week\n            w: null, // weeks to month\n            M: 11, // months to year\n        };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {\n        var duration = createDuration(posNegDuration).abs(),\n            seconds = round(duration.as('s')),\n            minutes = round(duration.as('m')),\n            hours = round(duration.as('h')),\n            days = round(duration.as('d')),\n            months = round(duration.as('M')),\n            weeks = round(duration.as('w')),\n            years = round(duration.as('y')),\n            a =\n                (seconds <= thresholds.ss && ['s', seconds]) ||\n                (seconds < thresholds.s && ['ss', seconds]) ||\n                (minutes <= 1 && ['m']) ||\n                (minutes < thresholds.m && ['mm', minutes]) ||\n                (hours <= 1 && ['h']) ||\n                (hours < thresholds.h && ['hh', hours]) ||\n                (days <= 1 && ['d']) ||\n                (days < thresholds.d && ['dd', days]);\n\n        if (thresholds.w != null) {\n            a =\n                a ||\n                (weeks <= 1 && ['w']) ||\n                (weeks < thresholds.w && ['ww', weeks]);\n        }\n        a = a ||\n            (months <= 1 && ['M']) ||\n            (months < thresholds.M && ['MM', months]) ||\n            (years <= 1 && ['y']) || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding(roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof roundingFunction === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold(threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize(argWithSuffix, argThresholds) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var withSuffix = false,\n            th = thresholds,\n            locale,\n            output;\n\n        if (typeof argWithSuffix === 'object') {\n            argThresholds = argWithSuffix;\n            argWithSuffix = false;\n        }\n        if (typeof argWithSuffix === 'boolean') {\n            withSuffix = argWithSuffix;\n        }\n        if (typeof argThresholds === 'object') {\n            th = Object.assign({}, thresholds, argThresholds);\n            if (argThresholds.s != null && argThresholds.ss == null) {\n                th.ss = argThresholds.s - 1;\n            }\n        }\n\n        locale = this.localeData();\n        output = relativeTime$1(this, !withSuffix, th, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return (x > 0) - (x < 0) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000,\n            days = abs$1(this._days),\n            months = abs$1(this._months),\n            minutes,\n            hours,\n            years,\n            s,\n            total = this.asSeconds(),\n            totalSign,\n            ymSign,\n            daysSign,\n            hmsSign;\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes = absFloor(seconds / 60);\n        hours = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n\n        totalSign = total < 0 ? '-' : '';\n        ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return (\n            totalSign +\n            'P' +\n            (years ? ymSign + years + 'Y' : '') +\n            (months ? ymSign + months + 'M' : '') +\n            (days ? daysSign + days + 'D' : '') +\n            (hours || minutes || seconds ? 'T' : '') +\n            (hours ? hmsSign + hours + 'H' : '') +\n            (minutes ? hmsSign + minutes + 'M' : '') +\n            (seconds ? hmsSign + s + 'S' : '')\n        );\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid = isValid$1;\n    proto$2.abs = abs;\n    proto$2.add = add$1;\n    proto$2.subtract = subtract$1;\n    proto$2.as = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds = asSeconds;\n    proto$2.asMinutes = asMinutes;\n    proto$2.asHours = asHours;\n    proto$2.asDays = asDays;\n    proto$2.asWeeks = asWeeks;\n    proto$2.asMonths = asMonths;\n    proto$2.asQuarters = asQuarters;\n    proto$2.asYears = asYears;\n    proto$2.valueOf = valueOf$1;\n    proto$2._bubble = bubble;\n    proto$2.clone = clone$1;\n    proto$2.get = get$2;\n    proto$2.milliseconds = milliseconds;\n    proto$2.seconds = seconds;\n    proto$2.minutes = minutes;\n    proto$2.hours = hours;\n    proto$2.days = days;\n    proto$2.weeks = weeks;\n    proto$2.months = months;\n    proto$2.years = years;\n    proto$2.humanize = humanize;\n    proto$2.toISOString = toISOString$1;\n    proto$2.toString = toISOString$1;\n    proto$2.toJSON = toISOString$1;\n    proto$2.locale = locale;\n    proto$2.localeData = localeData;\n\n    proto$2.toIsoString = deprecate(\n        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',\n        toISOString$1\n    );\n    proto$2.lang = lang;\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    //! moment.js\n\n    hooks.version = '2.27.0';\n\n    setHookCallback(createLocal);\n\n    hooks.fn = proto;\n    hooks.min = min;\n    hooks.max = max;\n    hooks.now = now;\n    hooks.utc = createUTC;\n    hooks.unix = createUnix;\n    hooks.months = listMonths;\n    hooks.isDate = isDate;\n    hooks.locale = getSetGlobalLocale;\n    hooks.invalid = createInvalid;\n    hooks.duration = createDuration;\n    hooks.isMoment = isMoment;\n    hooks.weekdays = listWeekdays;\n    hooks.parseZone = createInZone;\n    hooks.localeData = getLocale;\n    hooks.isDuration = isDuration;\n    hooks.monthsShort = listMonthsShort;\n    hooks.weekdaysMin = listWeekdaysMin;\n    hooks.defineLocale = defineLocale;\n    hooks.updateLocale = updateLocale;\n    hooks.locales = listLocales;\n    hooks.weekdaysShort = listWeekdaysShort;\n    hooks.normalizeUnits = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat = getCalendarFormat;\n    hooks.prototype = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD', // <input type=\"date\" />\n        TIME: 'HH:mm', // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss', // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS', // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW', // <input type=\"week\" />\n        MONTH: 'YYYY-MM', // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","'use strict';\r\nconst moment = require('moment');\r\nexport default class Panel {\r\n  constructor() {\r\n  }\r\n\r\n  loaderToggle(state){\r\n    if(state){\r\n      document.querySelector('.local-address').innerHTML = ``;\r\n      document.querySelector('.loader-container').innerHTML = `\r\n      <article>\r\n      <div class=\"loader\">\r\n        <div class=\"loader__bar\"></div>\r\n        <div class=\"loader__bar\"></div>\r\n        <div class=\"loader__bar\"></div>\r\n        <div class=\"loader__bar\"></div>\r\n        <div class=\"loader__bar\"></div>\r\n        <div class=\"loader__ball\"></div>\r\n      </div>\r\n      <p>LOADING</p>\r\n      </article>`;\r\n      document.getElementById('local-services-results').className = 'active';\r\n    }else{\r\n      document.querySelector('.loader-container').innerHTML = '';\r\n    }\r\n  }\r\n\r\n  creatPanel(data, controller){\r\n    let markup = controller.panel.createMarkup(data, controller);\r\n    document.querySelector('#geocoder input').value = ``;\r\n    document.querySelector('.local-address').innerHTML = `INFO FOR: ${data.title}`;\r\n    document.querySelector('#local-services-results .local-content').innerHTML = markup;\r\n    controller.panel.loaderToggle(false);\r\n    document.querySelector('#local-services-results .data-form').innerHTML = `<a href=\"https://app.smartsheet.com/b/form/5d291f237bbe41c88d44bfcd56e5b620\" target=\"_blank\"><button>REPORT DATA ISSUES</button></a>`;\r\n    document.getElementById('local-services-results').className = 'active';\r\n  }\r\n\r\n  clearPanel(){\r\n    document.querySelector('.local-address').innerHTML = `INFO FOR:`;\r\n    document.querySelector('#local-services-results .local-content').innerHTML = '';\r\n  }\r\n\r\n  createErrorPanel(address, toggle){\r\n    document.querySelector('.local-address').innerHTML = `INFO FOR: ${address}`;\r\n    document.querySelector('#local-services-results .local-content').innerHTML = '';\r\n    document.querySelector('#local-services-results .error-container').innerHTML = `${(toggle) ? `\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"70\" viewBox=\"0 0 100 68\">\r\n      <g id=\"large\">\r\n        <path fill=\"none\" stroke=\"#F44\" d=\"M55.8 38.5l6.2-1.2c0-1.8-.1-3.5-.4-5.3l-6.3-.2c-.5-2-1.2-4-2.1-6l4.8-4c-.9-1.6-1.9-3-3-4.4l-5.6 3c-1.3-1.6-3-3-4.7-4.1l2-6A30 30 0 0 0 42 8l-3.3 5.4c-2-.7-4.2-1-6.2-1.2L31.3 6c-1.8 0-3.5.1-5.3.4l-.2 6.3c-2 .5-4 1.2-6 2.1l-4-4.8c-1.6.9-3 1.9-4.4 3l3 5.6c-1.6 1.3-3 3-4.1 4.7l-6-2A32.5 32.5 0 0 0 2 26l5.4 3.3c-.7 2-1 4.2-1.2 6.2L0 36.7c0 1.8.1 3.5.4 5.3l6.3.2c.5 2 1.2 4 2.1 6l-4.8 4c.9 1.6 1.9 3 3 4.4l5.6-3c1.4 1.6 3 3 4.7 4.1l-2 6A30.5 30.5 0 0 0 20 66l3.4-5.4c2 .7 4 1 6.1 1.2l1.2 6.2c1.8 0 3.5-.1 5.3-.4l.2-6.3c2-.5 4-1.2 6-2.1l4 4.8c1.6-.9 3-1.9 4.4-3l-3-5.6c1.6-1.3 3-3 4.1-4.7l6 2A32 32 0 0 0 60 48l-5.4-3.3c.7-2 1-4.2 1.2-6.2zm-13.5 4a12.5 12.5 0 1 1-22.6-11 12.5 12.5 0 0 1 22.6 11z\"/>\r\n        <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"3s\" from=\"0 31 37\" repeatCount=\"indefinite\" to=\"360 31 37\" type=\"rotate\"/>\r\n      </g>\r\n      <g id=\"small\">\r\n        <path fill=\"none\" stroke=\"#F44\" d=\"M93 19.3l6-3c-.4-1.6-1-3.2-1.7-4.8L90.8 13c-.9-1.4-2-2.7-3.4-3.8l2.1-6.3A21.8 21.8 0 0 0 85 .7l-3.6 5.5c-1.7-.4-3.4-.5-5.1-.3l-3-5.9c-1.6.4-3.2 1-4.7 1.7L70 8c-1.5 1-2.8 2-3.9 3.5L60 9.4a20.6 20.6 0 0 0-2.2 4.6l5.5 3.6a15 15 0 0 0-.3 5.1l-5.9 3c.4 1.6 1 3.2 1.7 4.7L65 29c1 1.5 2.1 2.8 3.5 3.9l-2.1 6.3a21 21 0 0 0 4.5 2.2l3.6-5.6c1.7.4 3.5.5 5.2.3l2.9 5.9c1.6-.4 3.2-1 4.8-1.7L86 34c1.4-1 2.7-2.1 3.8-3.5l6.3 2.1a21.5 21.5 0 0 0 2.2-4.5l-5.6-3.6c.4-1.7.5-3.5.3-5.1zM84.5 24a7 7 0 1 1-12.8-6.2 7 7 0 0 1 12.8 6.2z\"/>\r\n        <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"2s\" from=\"0 78 21\" repeatCount=\"indefinite\" to=\"-360 78 21\" type=\"rotate\"/>\r\n      </g>\r\n    </svg>\r\n    <h3>No Information found.</h3>\r\n    ` : ``}\r\n    `;\r\n    document.querySelector('#local-services-results .data-form').innerHTML = '';\r\n    document.getElementById('local-services-results').className = 'active';\r\n  }\r\n\r\n  buildCouncil(value){\r\n    let siteURL = window.location.hostname;\r\n    let tempHTML = `\r\n      <article class=\"info-section\">\r\n      <span>GOVERNMENT</span>\r\n      <div>\r\n        <p><strong>COUNCIL:</strong> <a href=\"${value.data.districtURL}\" target=\"_blank\">${value.data.district}</a></p>\r\n        <p><strong>COUNCIL MEMBER:</strong> <a href=\"http://${siteURL}${value.data.council.url}\" target=\"_blank\">${value.data.council.name}</a></p>\r\n        <p><strong>COUNCIL MEMBER PHONE:</strong> ${value.data.council.phone}</p>\r\n        <p><strong>DISTRICT MANAGER:</strong> <a href=\"${value.data.dmanager.url}\" target=\"_blank\">${value.data.dmanager.name}</a></p>\r\n        <p><strong>DISTRICT MANAGER PHONE:</strong> ${value.data.dmanager.phone}</p>\r\n        <p><strong>DEPUTY MANAGER:</strong> <a href=\"${value.data.ddmanager.url}\" target=\"_blank\">${value.data.ddmanager.name}</a></p>\r\n        <p><strong>DEPUTY MANAGER PHONE:</strong> ${value.data.ddmanager.phone}</p>\r\n        <p><strong>BUSINESS LIAISON:</strong> ${value.data.bliaision.name}</p>\r\n        <p><strong>BUSINESS LIAISON PHONE:</strong> ${value.data.bliaision.email}</p>\r\n        <p><strong>ENFORCEMENT INSPECTOR:</strong> ${value.data.enforcement.name}</p>\r\n        <p><strong>ENFORCEMENT INSPECTOR PHONE:</strong> ${value.data.enforcement.phone}</p>\r\n      </div>\r\n    </article>`;\r\n    return tempHTML;\r\n  }\r\n\r\n  buildNeighborhood(value){\r\n    let tempHTML = '';\r\n    if(Object.keys(value.data).length != 0 && value.data.constructor === Object){\r\n      tempHTML = `\r\n      <article class=\"info-section\">\r\n        <span>NEIGHBORHOOD</span>\r\n        <div>\r\n          <p><strong>NAME:</strong> ${value.data.features[0].attributes.NHood_Name}</p>\r\n        </div>\r\n      </article>`;\r\n    }else{\r\n      tempHTML = `\r\n      <article class=\"info-section\">\r\n        <span>NEIGHBORHOOD</span>\r\n        <div>\r\n          <p>NO NEIGHBORHOOD FOUND</p>\r\n        </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildHistoricDistrict(value){\r\n    let tempHTML = '';\r\n    if(Object.keys(value.data).length != 0 && value.data.constructor === Object && value.data.features.length > 0){\r\n      tempHTML = `\r\n      <article class=\"info-section\">\r\n        <span>LOCAL HISTORIC DISTRICT</span>\r\n        <div>\r\n          <p><strong>NAME:</strong> ${value.data.features[0].attributes.Name}</p>\r\n          <p><strong>DESIGNATED ON:</strong> ${moment(value.data.features[0].attributes.Year_Enacted).format('MMM DD, YYYY')}</p>\r\n        </div>\r\n      </article>`;\r\n    }else{\r\n      tempHTML = `\r\n      <article class=\"info-section\">\r\n        <span>HISTORIC DISTRICT</span>\r\n        <div>\r\n          <p>NO HISTORIC DISTRICT FOUND</p>\r\n        </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildNPO(value){\r\n    let tempHTML = '';\r\n    if(Object.keys(value.data).length != 0 && value.data.constructor === Object){\r\n      tempHTML = `\r\n      <article class=\"info-section\">\r\n        <span>POLICE</span>\r\n        <div>\r\n          <h5>PRECINCT</h5>\r\n          <p><strong>NUMBER:</strong> ${value.data.features[0].attributes.precinct}</p>\r\n          <p><strong>ADDRESS</strong> ${value.data.features[0].attributes.precinct_location}</p>\r\n        </div>\r\n        <div>\r\n          <h5>NEIGHBORHOOD POLICE OFFICER (NPO)</h5>\r\n          <p><strong>NAME:</strong> ${value.data.features[0].attributes.police_officer}</p>\r\n          <p><strong>PHONE:</strong> ${value.data.features[0].attributes.phone_number}</p>\r\n          <p><strong>EMAIL:</strong> ${value.data.features[0].attributes.email}</p>\r\n        </div>\r\n      </article>`;\r\n    }else{\r\n      tempHTML = `\r\n      <article class=\"info-section\">\r\n        <span>POLICE</span>\r\n        <div>\r\n          <p>NO POLICE INFO FOUND</p>\r\n        </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildRecycling(value){\r\n    let tempHTML = '';\r\n    if(Object.keys(value.data).length != 0 && value.data.constructor === Object){\r\n      let contractorInfo = {\r\n        name: null,\r\n        url: null,\r\n        phone: null\r\n      };\r\n      if(value.data.next_pickups.trash.contractor === 'gfl'){\r\n        contractorInfo.name = 'GFL';\r\n        contractorInfo.url =  'http://gflusa.com/residential/detroit/';\r\n        contractorInfo.phone = '(844) 464-3587';\r\n      }else{\r\n        contractorInfo.name = 'ADVANCED';\r\n        contractorInfo.url =  'http://www.advanceddisposal.com/mi/detroit/detroit-residential-collection';\r\n        contractorInfo.phone = ' (844) 233-8764';\r\n      }\r\n      tempHTML = `\r\n      <article class=\"info-section\">\r\n        <span>TRASH & RECYCLING</span>\r\n        <div>\r\n          <p><strong>PROVIDER:</strong> <a href=\"${contractorInfo.url}\" target=\"_blank\">${contractorInfo.name}</a> ${contractorInfo.phone}</p>\r\n          <p><strong>NEXT TRASH:</strong> ${moment(value.data.next_pickups.trash.next_pickup).format('MMM DD, YYYY')}</p>\r\n          <p><strong>NEXT RECYCLING:</strong> ${moment(value.data.next_pickups.recycling.next_pickup).format('MMM DD, YYYY')}</p>\r\n          <p><strong>NEXT BULK:</strong> ${moment(value.data.next_pickups.bulk.next_pickup).format('MMM DD, YYYY')}</p>\r\n          ${('yard waste' in value.data.next_pickups) ?\r\n          tempHTML += `<p><strong>NEXT YARD:</strong> ${moment(value.data.next_pickups['yard waste'].next_pickup).format('MMM DD, YYYY')}</p>` : ``}\r\n        </div>\r\n      <h4><a href=\"/webapp/waste-pickup-map\" target=\"_blank\">MORE INFO</a></h4>\r\n      </article>`;\r\n    }else{\r\n      tempHTML = `\r\n      <article class=\"info-section\">\r\n        <span>TRASH & RECYCLING</span>\r\n        <div>\r\n          <p>NO TRASH & RECYCLING INFO FOUND</p>\r\n        </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildAssessors(value){\r\n    let tempHTML = '';\r\n    if(value && Object.keys(value.data).length != 0 && value.data.constructor === Object && value.data.detail !== \"Not found.\"){\r\n      let property = {\r\n        year: null,\r\n        value: null,\r\n        floor: null,\r\n        buildingClass: null\r\n      }\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n        <span>OWNER'S ADDRESS</span>\r\n        <div>\r\n          <p><strong>CITY:</strong> ${value.data.ownercity}</p>\r\n          <p><strong>STATE:</strong> ${value.data.ownerstate}</p>\r\n          <p><strong>ADDRESS:</strong> ${value.data.ownerstreetaddr}</p>\r\n          <p><strong>ZIP:</strong> ${value.data.ownerzip}</p>\r\n        </div>\r\n      </article>`;\r\n      if(value.data.resb_bldgclass === 0){\r\n        property.year = value.data.cib_yearbuilt;\r\n        property.value = value.data.cib_value;\r\n        property.floor = value.data.cib_yearbuilt;\r\n        property.buildingClass = value.data.cib_yearbuilt;\r\n      }else{\r\n        property.year = value.data.resb_yearbuilt;\r\n        property.value = value.data.resb_value;\r\n        property.floor = value.data.resb_floorarea;\r\n        property.buildingClass = value.data.resb_bldgclass;\r\n      }\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n        <span>PROPERTY</span>\r\n        <div>\r\n          <p><strong>PARCEL NUMBER:</strong> ${value.data.pnum}</p>\r\n          <p><strong>YEAR BUILD:</strong> ${property.year}</p>\r\n          <p><strong>CALCULATED VALUE:</strong> $${property.value.toLocaleString()}</p>\r\n          <p><strong>FLOOR AREA:</strong> ${property.floor.toLocaleString()} SQFT</p>\r\n          <p><strong>BUILDING CLASS:</strong> ${property.buildingClass}</p>\r\n        </div>\r\n      </article>`;\r\n    }else{\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n        <span>OWNER</span>\r\n        <div>\r\n          <p>NO OWNER INFO</p>\r\n        </div>\r\n      </article>\r\n      <article class=\"info-section\">\r\n        <span>PROPERTY</span>\r\n        <div>\r\n          <p>NO PROPERTY INFO FOUND</p>\r\n        </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildRental(value){\r\n    let tempHTML = '';\r\n    if(value && value.data.features.length){\r\n      value.data.features.forEach(function(value){\r\n        tempHTML += `\r\n        \r\n        <article class=\"info-section\">\r\n        <span>RENTAL ENFORCEMENT STATUS</span>\r\n        <div>\r\n          <p><strong>REGISTER:</strong> ${moment(value.attributes.date).format('MMM DD, YYYY')}</p>\r\n          <p><strong>CERTIFIED:</strong> ${values['rental-cert-data'].data.features.length ? `${moment(values['rental-cert-data'].data.features[0].attributes.date).format('MMM DD, YYYY')}` : `Not certified`}</p>\r\n        </div>\r\n        `;\r\n      });\r\n      tempHTML += `<h4><a href=\"/departments/buildings-safety-engineering-and-environmental-department/property-maintenance-division/rental-property\" target=\"_blank\">MORE INFO</a></h4>\r\n      </article>`;\r\n    }else{\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n        <span>RENTAL ENFORCEMENT STATUS</span>\r\n      <div>\r\n        <p><strong>REGISTER:</strong> Not registered</p>\r\n        <p><strong>CERTIFIED:</strong> Not certified</p>\r\n      </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildBlight(value){\r\n    let tempHTML = '';\r\n    if(value && value.data.features.length){\r\n      value.data.features.forEach(function(value){\r\n        tempHTML += `\r\n        <article class=\"info-section\">\r\n        <span>BLIGHT TICKETS</span>\r\n        <div>\r\n          <p><strong>TICKET ID:</strong> ${value.attributes.ticket_number}</p>\r\n          <p><strong>FINE AMOUNT:</strong> $${value.attributes.fine_amount}</p>\r\n          <p><strong>AGENCY NAME:</strong> ${value.attributes.agency_name}</p>\r\n          <p><strong>DISPOSITION:</strong> ${value.attributes.disposition}</p>\r\n          <p><strong>DESCRIPTION:</strong> ${value.attributes.violation_description}</p>\r\n          <p><strong>HEARING DATE:</strong> ${moment(value.attributes.hearing_date).format('MMM DD, YYYY')}</p>\r\n          <p><strong>HEARING TIME:</strong> ${value.attributes.hearing_time}</p>\r\n        </div>\r\n        `;\r\n      });\r\n      tempHTML += `<h4><a href=\"https://data.detroitmi.gov/resource/s7hj-n86v\" target=\"_blank\">MORE INFO</a></h4></article>`;\r\n    }else{\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n      <span>BLIGHT TICKETS</span>\r\n      <div>\r\n        <p>NO BLIGHT TICKETS FOUND</p>\r\n      </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildPermit(value){\r\n    let tempHTML = '';\r\n    if(value && value.data.features.length){\r\n      value.data.features.forEach(function(value){\r\n        tempHTML += `\r\n        <article class=\"info-section\">\r\n        <span>BUILDING PERMITS</span>\r\n        <div>\r\n          <p><strong>PERMIT NUMBER:</strong> ${value.attributes.record_id}</p>\r\n          <p><strong>PERMIT TYPE:</strong> ${value.attributes.permit_type}</p>\r\n          <p><strong>PERMIT BUILDING TYPE:</strong> ${value.attributes.type_of_construction}</p>\r\n          <p><strong>PERMIT STATUS:</strong> ${value.attributes.status}</p>\r\n          <p><strong>PERMIT ISSUED:</strong> ${moment(value.attributes.permit_issue_date).format('MMM DD, YYYY')}</p>\r\n          <p><strong>PERMIT EXPIRED:</strong> ${moment(value.attributes.date_expiration).format('MMM DD, YYYY')}</p>\r\n          <p><strong>PERMIT DESCRIPTION:</strong> ${value.attributes.permit_description}</p>\r\n        </div>\r\n        `;\r\n      });\r\n      tempHTML += `<h4><a href=\"https://data.detroitmi.gov/resource/but4-ky7y\" target=\"_blank\">MORE INFO</a></h4>\r\n      </article>`;\r\n    }else{\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n        <span>BUILDING PERMITS</span>\r\n      <div>\r\n        <p>NO BUILDING PERMITS FOUND</p>\r\n      </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildDemoStatus(value){\r\n    let tempHTML = '';\r\n    if(value.data.features.length){\r\n      tempHTML = `<article class=\"info-section\">\r\n    <span>DEMOLITION STATUS</span>`;\r\n    value.data.features.forEach(function(value){\r\n      tempHTML += `\r\n        <div>\r\n          <p><STRONG>WARNING!</STRONG></p>\r\n          <p>THIS PROPERTY IS SCHEDULED FOR DEMOLITION</p> \r\n          ${(value.attributes.demolish_by_date == null) ? `Date to be determined`:`<p><strong>${moment(value.attributes.demolish_by_date).format('MMM DD, YYYY')}</stron></p>`}\r\n        </div>\r\n      `;\r\n    });\r\n    tempHTML += `\r\n    <h4><a href=\"https://data.detroitmi.gov/resource/nfx3-ihbp\" target=\"_blank\">MORE INFO</a></h4>\r\n    </article>`;\r\n    }\r\n\r\n    return tempHTML;\r\n  }\r\n\r\n  buildDemosNear(value){\r\n    let tempHTML = '';\r\n    if(value.data.features.length){\r\n      value.data.features.forEach(function(value){\r\n        tempHTML += `\r\n        <article class=\"info-section\">\r\n        <span>DEMOLITIONS NEAR YOU</span>\r\n        <div>\r\n          <p><strong>ADDRESS:</strong> ${value.attributes.address}</p>\r\n          <p><strong>COMMERCIAL:</strong> ${value.attributes.commercial_building}</p>\r\n          <p><strong>PRICE:</strong> $${parseInt(value.attributes.price).toLocaleString()}</p>\r\n          <p><strong>PARCEL:</strong> ${value.attributes.parcel_id}</p>\r\n          <p><strong>CONTRACTOR:</strong> ${value.attributes.contractor_name}</p>\r\n          <p><strong>COUNCIL DISTRICT:</strong> ${value.attributes.council_district}</p>\r\n          <p><strong>NEIGHBORHOOD:</strong> ${value.attributes.neighborhood}</p>\r\n          <p><strong>EXPECTED DATE:</strong> ${moment(value.attributes.demolish_by_date).format('MMM DD, YYYY')}</p>\r\n        </div>`;\r\n      });\r\n      tempHTML += `\r\n      <h4><a href=\"https://data.detroitmi.gov/resource/nfx3-ihbp\" target=\"_blank\">MORE INFO</a></h4>\r\n      </article>`;\r\n    }else{\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n      <span>DEMOLITIONS NEAR YOU</span>\r\n      <div>\r\n        <p>NO DEMOLITIONS FOUND</p>\r\n      </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  buildImproveDet(value){\r\n    let tempHTML = '';\r\n    if(value.data.features.length){\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n      <span>IMPROVE DETROIT ISSUES NEAR YOU</span>`;\r\n      value.data.features.forEach(function(value){\r\n        tempHTML += `\r\n        <div>\r\n          <p><strong>ID:</strong> <a href=\"${value.attributes.web_url}\" target=\"_blank\">${value.attributes.id}</a></p>\r\n          <p><strong>TYPE:</strong> ${value.attributes.request_type_title}</p>\r\n          <p><strong>STATUS:</strong> ${value.attributes.status}</p>\r\n          <p><strong>REPORTED ON:</strong> ${moment(value.attributes.created_at).format('MMM DD, YYYY')}</p>\r\n        </div>`;\r\n      });\r\n      tempHTML += `\r\n      <h4>\r\n      <a href=\"https://seeclickfix.com/enhanced_watch_areas/674\" target=\"_blank\">MORE INFO</a>\r\n      <a href=\"/webapp/improve-detroit-report-issue-online\" target=\"_blank\">REPORT ISSUE</a>\r\n      </h4>\r\n      </article>`;\r\n    }else{\r\n      tempHTML += `\r\n      <article class=\"info-section\">\r\n      <span>IMPROVE DETROIT</span>\r\n      <div>\r\n        <p>NO IMPROVE DETROIT ISSUES</p>\r\n      </div>\r\n      </article>`;\r\n    }\r\n    return tempHTML;\r\n  }\r\n\r\n  createMarkup(values, controller){\r\n    let tempHTML = '';\r\n    for (const [key, value] of Object.entries(values)) {\r\n      switch (key) {\r\n        case 'council':\r\n          tempHTML += controller.panel.buildCouncil(values.councilData);\r\n          break;\r\n\r\n        case 'neighborhood':\r\n          tempHTML += controller.panel.buildNeighborhood(value);\r\n          break;\r\n\r\n        case 'assessors-data':\r\n          tempHTML += controller.panel.buildAssessors(value);\r\n          break;\r\n\r\n        case 'permit-data':\r\n          tempHTML += controller.panel.buildPermit(value);\r\n          break;\r\n\r\n        case 'rental-data':\r\n          tempHTML += controller.panel.buildRental(value);\r\n          break;\r\n\r\n        case 'blight-data':\r\n          tempHTML += controller.panel.buildBlight(value);\r\n          break;\r\n\r\n        case 'demos-data':\r\n          tempHTML += controller.panel.buildDemosNear(value);\r\n          break;\r\n\r\n        case 'demo-status':\r\n          tempHTML += controller.panel.buildDemoStatus(value);\r\n          break;\r\n\r\n        case 'npo':\r\n          tempHTML += controller.panel.buildNPO(value);\r\n          break;\r\n\r\n        case 'improve-det':\r\n          tempHTML += controller.panel.buildImproveDet(value);\r\n          break;\r\n\r\n        case 'recycling':\r\n          tempHTML += controller.panel.buildRecycling(value);\r\n          break;\r\n\r\n        case 'historicDistrict':\r\n          tempHTML += controller.panel.buildHistoricDistrict(value);\r\n          break;\r\n      \r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return tempHTML;\r\n  }\r\n}","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e(t.turf={})}(this,function(t){\"use strict\";function e(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.bbox,i=n.id;if(void 0===t)throw new Error(\"geometry is required\");if(e&&e.constructor!==Object)throw new Error(\"properties must be an Object\");r&&N(r),i&&C(i);var o={type:\"Feature\"};return i&&(o.id=i),r&&(o.bbox=r),o.properties=e||{},o.geometry=t,o}function n(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var i=n.bbox;if(!t)throw new Error(\"type is required\");if(!e)throw new Error(\"coordinates is required\");if(!Array.isArray(e))throw new Error(\"coordinates must be an Array\");i&&N(i);var s;switch(t){case\"Point\":s=r(e).geometry;break;case\"LineString\":s=a(e).geometry;break;case\"Polygon\":s=o(e).geometry;break;case\"MultiPoint\":s=l(e).geometry;break;case\"MultiLineString\":s=h(e).geometry;break;case\"MultiPolygon\":s=p(e).geometry;break;default:throw new Error(t+\" is invalid\")}return i&&(s.bbox=i),s}function r(t,n,r){if(!t)throw new Error(\"coordinates is required\");if(!Array.isArray(t))throw new Error(\"coordinates must be an Array\");if(t.length<2)throw new Error(\"coordinates must be at least 2 numbers long\");if(!b(t[0])||!b(t[1]))throw new Error(\"coordinates must contain numbers\");return e({type:\"Point\",coordinates:t},n,r)}function i(t,e,n){if(!t)throw new Error(\"coordinates is required\");if(!Array.isArray(t))throw new Error(\"coordinates must be an Array\");return c(t.map(function(t){return r(t,e)}),n)}function o(t,n,r){if(!t)throw new Error(\"coordinates is required\");for(var i=0;i<t.length;i++){var o=t[i];if(o.length<4)throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");for(var s=0;s<o[o.length-1].length;s++){if(0===i&&0===s&&!b(o[0][0])||!b(o[0][1]))throw new Error(\"coordinates must contain numbers\");if(o[o.length-1][s]!==o[0][s])throw new Error(\"First and last Position are not equivalent.\")}}return e({type:\"Polygon\",coordinates:t},n,r)}function s(t,e,n){if(!t)throw new Error(\"coordinates is required\");if(!Array.isArray(t))throw new Error(\"coordinates must be an Array\");return c(t.map(function(t){return o(t,e)}),n)}function a(t,n,r){if(!t)throw new Error(\"coordinates is required\");if(t.length<2)throw new Error(\"coordinates must be an array of two or more positions\");if(!b(t[0][1])||!b(t[0][1]))throw new Error(\"coordinates must contain numbers\");return e({type:\"LineString\",coordinates:t},n,r)}function u(t,e,n){if(!t)throw new Error(\"coordinates is required\");if(!Array.isArray(t))throw new Error(\"coordinates must be an Array\");return c(t.map(function(t){return a(t,e)}),n)}function c(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.bbox,r=e.id;if(!t)throw new Error(\"No features passed\");if(!Array.isArray(t))throw new Error(\"features must be an Array\");n&&N(n),r&&C(r);var i={type:\"FeatureCollection\"};return r&&(i.id=r),n&&(i.bbox=n),i.features=t,i}function h(t,n,r){if(!t)throw new Error(\"coordinates is required\");return e({type:\"MultiLineString\",coordinates:t},n,r)}function l(t,n,r){if(!t)throw new Error(\"coordinates is required\");return e({type:\"MultiPoint\",coordinates:t},n,r)}function p(t,n,r){if(!t)throw new Error(\"coordinates is required\");return e({type:\"MultiPolygon\",coordinates:t},n,r)}function f(t,n,r){if(!t)throw new Error(\"geometries is required\");if(!Array.isArray(t))throw new Error(\"geometries must be an Array\");return e({type:\"GeometryCollection\",geometries:t},n,r)}function g(t,e){if(void 0===t||null===t||isNaN(t))throw new Error(\"num is required\");if(e&&!(e>=0))throw new Error(\"precision must be a positive number\");var n=Math.pow(10,e||0);return Math.round(t*n)/n}function d(t,e){if(void 0===t||null===t)throw new Error(\"radians is required\");if(e&&\"string\"!=typeof e)throw new Error(\"units must be a string\");var n=qo[e||\"kilometers\"];if(!n)throw new Error(e+\" units is invalid\");return t*n}function y(t,e){if(void 0===t||null===t)throw new Error(\"distance is required\");if(e&&\"string\"!=typeof e)throw new Error(\"units must be a string\");var n=qo[e||\"kilometers\"];if(!n)throw new Error(e+\" units is invalid\");return t/n}function _(t,e){return v(y(t,e))}function m(t){if(null===t||void 0===t)throw new Error(\"bearing is required\");var e=t%360;return e<0&&(e+=360),e}function v(t){if(null===t||void 0===t)throw new Error(\"radians is required\");return 180*(t%(2*Math.PI))/Math.PI}function x(t){if(null===t||void 0===t)throw new Error(\"degrees is required\");return t%360*Math.PI/180}function E(t,e,n){if(null===t||void 0===t)throw new Error(\"length is required\");if(!(t>=0))throw new Error(\"length must be a positive number\");return d(y(t,e),n||\"kilometers\")}function w(t,e,n){if(null===t||void 0===t)throw new Error(\"area is required\");if(!(t>=0))throw new Error(\"area must be a positive number\");var r=Bo[e||\"meters\"];if(!r)throw new Error(\"invalid original units\");var i=Bo[n||\"kilometers\"];if(!i)throw new Error(\"invalid final units\");return t/r*i}function b(t){return!isNaN(t)&&null!==t&&!Array.isArray(t)}function I(t){return!!t&&t.constructor===Object}function N(t){if(!t)throw new Error(\"bbox is required\");if(!Array.isArray(t))throw new Error(\"bbox must be an Array\");if(4!==t.length&&6!==t.length)throw new Error(\"bbox must be an Array of 4 or 6 numbers\");t.forEach(function(t){if(!b(t))throw new Error(\"bbox must only contain numbers\")})}function C(t){if(!t)throw new Error(\"id is required\");if(-1===[\"string\",\"number\"].indexOf(typeof t))throw new Error(\"id must be a number or a string\")}function S(t,e,n){if(null!==t)for(var r,i,o,s,a,u,c,h,l=0,p=0,f=t.type,g=\"FeatureCollection\"===f,d=\"Feature\"===f,y=g?t.features.length:1,_=0;_<y;_++){a=(h=!!(c=g?t.features[_].geometry:d?t.geometry:t)&&\"GeometryCollection\"===c.type)?c.geometries.length:1;for(var m=0;m<a;m++){var v=0,x=0;if(null!==(s=h?c.geometries[m]:c)){u=s.coordinates;var E=s.type;switch(l=!n||\"Polygon\"!==E&&\"MultiPolygon\"!==E?0:1,E){case null:break;case\"Point\":e(u,p,_,v,x),p++,v++;break;case\"LineString\":case\"MultiPoint\":for(r=0;r<u.length;r++)e(u[r],p,_,v,x),p++,\"MultiPoint\"===E&&v++;\"LineString\"===E&&v++;break;case\"Polygon\":case\"MultiLineString\":for(r=0;r<u.length;r++){for(i=0;i<u[r].length-l;i++)e(u[r][i],p,_,v,x),p++;\"MultiLineString\"===E&&v++,\"Polygon\"===E&&x++}\"Polygon\"===E&&v++;break;case\"MultiPolygon\":for(r=0;r<u.length;r++){for(\"MultiPolygon\"===E&&(x=0),i=0;i<u[r].length;i++){for(o=0;o<u[r][i].length-l;o++)e(u[r][i][o],p,_,v,x),p++;x++}v++}break;case\"GeometryCollection\":for(r=0;r<s.geometries.length;r++)S(s.geometries[r],e,n);break;default:throw new Error(\"Unknown Geometry Type\")}}}}}function M(t,e,n,r){var i=n;return S(t,function(t,r,o,s,a){i=0===r&&void 0===n?t:e(i,t,r,o,s,a)},r),i}function L(t,e){var n;switch(t.type){case\"FeatureCollection\":for(n=0;n<t.features.length;n++)e(t.features[n].properties,n);break;case\"Feature\":e(t.properties,0)}}function P(t,e,n){var r=n;return L(t,function(t,i){r=0===i&&void 0===n?t:e(r,t,i)}),r}function O(t,e){if(\"Feature\"===t.type)e(t,0);else if(\"FeatureCollection\"===t.type)for(var n=0;n<t.features.length;n++)e(t.features[n],n)}function R(t,e,n){var r=n;return O(t,function(t,i){r=0===i&&void 0===n?t:e(r,t,i)}),r}function T(t){var e=[];return S(t,function(t){e.push(t)}),e}function A(t,e){var n,r,i,o,s,a,u,c,h,l,p=0,f=\"FeatureCollection\"===t.type,g=\"Feature\"===t.type,d=f?t.features.length:1;for(n=0;n<d;n++){for(a=f?t.features[n].geometry:g?t.geometry:t,c=f?t.features[n].properties:g?t.properties:{},h=f?t.features[n].bbox:g?t.bbox:void 0,l=f?t.features[n].id:g?t.id:void 0,s=(u=!!a&&\"GeometryCollection\"===a.type)?a.geometries.length:1,i=0;i<s;i++)if(null!==(o=u?a.geometries[i]:a))switch(o.type){case\"Point\":case\"LineString\":case\"MultiPoint\":case\"Polygon\":case\"MultiLineString\":case\"MultiPolygon\":e(o,p,c,h,l);break;case\"GeometryCollection\":for(r=0;r<o.geometries.length;r++)e(o.geometries[r],p,c,h,l);break;default:throw new Error(\"Unknown Geometry Type\")}else e(null,p,c,h,l);p++}}function D(t,e,n){var r=n;return A(t,function(t,i,o,s,a){r=0===i&&void 0===n?t:e(r,t,i,o,s,a)}),r}function F(t,n){A(t,function(t,r,i,o,s){var a=null===t?null:t.type;switch(a){case null:case\"Point\":case\"LineString\":case\"Polygon\":return void n(e(t,i,{bbox:o,id:s}),r,0)}var u;switch(a){case\"MultiPoint\":u=\"Point\";break;case\"MultiLineString\":u=\"LineString\";break;case\"MultiPolygon\":u=\"Polygon\"}t.coordinates.forEach(function(t,o){n(e({type:u,coordinates:t},i),r,o)})})}function q(t,e,n){var r=n;return F(t,function(t,i,o){r=0===i&&0===o&&void 0===n?t:e(r,t,i,o)}),r}function G(t,e){F(t,function(t,n,r){var i=0;if(t.geometry){var o=t.geometry.type;\"Point\"!==o&&\"MultiPoint\"!==o&&M(t,function(o,s,u,c,h,l){var p=a([o,s],t.properties);return e(p,n,r,l,i),i++,s})}})}function B(t,e,n){var r=n,i=!1;return G(t,function(t,o,s,a,u){r=!1===i&&void 0===n?t:e(r,t,o,s,a,u),i=!0}),r}function k(t,e){if(!t)throw new Error(\"geojson is required\");F(t,function(t,n,r){if(null!==t.geometry){var i=t.geometry.type,o=t.geometry.coordinates;switch(i){case\"LineString\":e(t,n,r,0,0);break;case\"Polygon\":for(var s=0;s<o.length;s++)e(a(o[s],t.properties),n,r,s)}}})}function z(t,e,n){var r=n;return k(t,function(t,i,o,s){r=0===i&&void 0===n?t:e(r,t,i,o,s)}),r}function j(t){var e=[1/0,1/0,-1/0,-1/0];return S(t,function(t){e[0]>t[0]&&(e[0]=t[0]),e[1]>t[1]&&(e[1]=t[1]),e[2]<t[0]&&(e[2]=t[0]),e[3]<t[1]&&(e[3]=t[1])}),e}function X(t){if(!t)throw new Error(\"obj is required\");var e=U(t);if(e.length>1&&b(e[0])&&b(e[1]))return e;throw new Error(\"Coordinate is not a valid Point\")}function U(t){if(!t)throw new Error(\"obj is required\");var e;if(t.length?e=t:t.coordinates?e=t.coordinates:t.geometry&&t.geometry.coordinates&&(e=t.geometry.coordinates),e)return Y(e),e;throw new Error(\"No valid coordinates\")}function Y(t){if(t.length>1&&b(t[0])&&b(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return Y(t[0]);throw new Error(\"coordinates must only contain numbers\")}function V(t,e,n){if(!e||!n)throw new Error(\"type and name required\");if(!t||t.type!==e)throw new Error(\"Invalid input to \"+n+\": must be a \"+e+\", given \"+t.type)}function H(t,e,n){if(!t)throw new Error(\"No feature passed\");if(!n)throw new Error(\".featureOf() requires a name\");if(!t||\"Feature\"!==t.type||!t.geometry)throw new Error(\"Invalid input to \"+n+\", Feature with geometry required\");if(!t.geometry||t.geometry.type!==e)throw new Error(\"Invalid input to \"+n+\": must be a \"+e+\", given \"+t.geometry.type)}function W(t,e,n){if(!t)throw new Error(\"No featureCollection passed\");if(!n)throw new Error(\".collectionOf() requires a name\");if(!t||\"FeatureCollection\"!==t.type)throw new Error(\"Invalid input to \"+n+\", FeatureCollection required\");for(var r=0;r<t.features.length;r++){var i=t.features[r];if(!i||\"Feature\"!==i.type||!i.geometry)throw new Error(\"Invalid input to \"+n+\", Feature with geometry required\");if(!i.geometry||i.geometry.type!==e)throw new Error(\"Invalid input to \"+n+\": must be a \"+e+\", given \"+i.geometry.type)}}function J(t){if(!t)throw new Error(\"geojson is required\");if(void 0!==t.geometry)return t.geometry;if(t.coordinates||t.geometries)return t;throw new Error(\"geojson must be a valid Feature or Geometry Object\")}function Z(){throw new Error(\"invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType\")}function K(t,e){if(!t)throw new Error((e||\"geojson\")+\" is required\");if(t.geometry&&t.geometry.type)return t.geometry.type;if(t.type)return t.type;throw new Error((e||\"geojson\")+\" is invalid\")}function Q(t,e,n){n=n||{};for(var r=Object.keys(Xo),i=0;i<r.length;i++){var o=r[i],s=n[o];s=void 0!==s&&null!==s?s:Xo[o],Uo[o]=s}Uo.verbose&&console.log(\"MarchingSquaresJS-isoContours: computing isocontour for \"+e);var a=function(t){var e=[],n=0;t.rows,t.cols;return t.cells.forEach(function(r,i){r.forEach(function(r,o){if(void 0!==r&&!function(t){return 5===t.cval||10===t.cval}(r)&&!tt(r)){var s=function(t,e,n){var r,i,o,s=t.length,a=[],u=[0,0,1,1,0,0,0,0,-1,0,1,1,-1,0,-1,0],c=[0,-1,0,0,1,1,1,1,0,-1,0,0,0,-1,0,0],h=[\"none\",\"bottom\",\"right\",\"right\",\"top\",\"top\",\"top\",\"top\",\"left\",\"bottom\",\"right\",\"right\",\"left\",\"bottom\",\"left\",\"none\"],l=(t[e][n],t[e][n]),p=l.cval,f=nt(l,o=[\"none\",\"left\",\"bottom\",\"left\",\"right\",\"none\",\"bottom\",\"left\",\"top\",\"top\",\"none\",\"top\",\"right\",\"right\",\"bottom\",\"none\"][p]);a.push([n+f[0],e+f[1]]),f=nt(l,o=h[p]),a.push([n+f[0],e+f[1]]),et(l);for(var g=n+u[p],d=e+c[p],y=p;g>=0&&d>=0&&d<s&&(g!=n||d!=e)&&void 0!==(l=t[d][g]);){if(0===(p=l.cval)||15===p)return{path:a,info:\"mergeable\"};o=h[p],r=u[p],i=c[p],5!==p&&10!==p||(5===p?l.flipped?-1===c[y]?(o=\"left\",r=-1,i=0):(o=\"right\",r=1,i=0):-1===u[y]&&(o=\"bottom\",r=0,i=-1):10===p&&(l.flipped?-1===u[y]?(o=\"top\",r=0,i=1):(o=\"bottom\",r=0,i=-1):1===c[y]&&(o=\"left\",r=-1,i=0))),f=nt(l,o),a.push([g+f[0],d+f[1]]),et(l),g+=r,d+=i,y=p}return{path:a,info:\"closed\"}}(t.cells,i,o),a=!1;if(\"mergeable\"===s.info)for(var u=s.path[s.path.length-1][0],c=s.path[s.path.length-1][1],h=n-1;h>=0;h--)if(Math.abs(e[h][0][0]-u)<=1e-7&&Math.abs(e[h][0][1]-c)<=1e-7){for(var l=s.path.length-2;l>=0;--l)e[h].unshift(s.path[l]);a=!0;break}a||(e[n++]=s.path)}})}),e}(function(t,e){for(var n=t.length-1,r=t[0].length-1,i={rows:n,cols:r,cells:[]},o=0;o<n;++o){i.cells[o]=[];for(var s=0;s<r;++s){var a=0,u=t[o+1][s],c=t[o+1][s+1],h=t[o][s+1],l=t[o][s];if(!(isNaN(u)||isNaN(c)||isNaN(h)||isNaN(l))){a|=u>=e?8:0,a|=c>=e?4:0,a|=h>=e?2:0;var p=!1;if(5===(a|=l>=e?1:0)||10===a){var f=(u+c+h+l)/4;5===a&&f<e?(a=10,p=!0):10===a&&f<e&&(a=5,p=!0)}if(0!==a&&15!==a){var g,d,y,_;g=d=y=_=.5,1===a?(y=1-$(e,u,l),d=1-$(e,h,l)):2===a?(d=$(e,l,h),_=1-$(e,c,h)):3===a?(y=1-$(e,u,l),_=1-$(e,c,h)):4===a?(g=$(e,u,c),_=$(e,h,c)):5===a?(g=$(e,u,c),_=$(e,h,c),d=1-$(e,h,l),y=1-$(e,u,l)):6===a?(d=$(e,l,h),g=$(e,u,c)):7===a?(y=1-$(e,u,l),g=$(e,u,c)):8===a?(y=$(e,l,u),g=1-$(e,c,u)):9===a?(d=1-$(e,h,l),g=1-$(e,c,u)):10===a?(g=1-$(e,c,u),_=1-$(e,c,h),d=$(e,l,h),y=$(e,l,u)):11===a?(g=1-$(e,c,u),_=1-$(e,c,h)):12===a?(y=$(e,l,u),_=$(e,h,c)):13===a?(d=1-$(e,h,l),_=$(e,h,c)):14===a?(y=$(e,l,u),d=$(e,l,h)):console.log(\"MarchingSquaresJS-isoContours: Illegal cval detected: \"+a),i.cells[o][s]={cval:a,flipped:p,top:g,right:_,bottom:d,left:y}}}}}return i}(t,e));return\"function\"==typeof Uo.successCallback&&Uo.successCallback(a),a}function $(t,e,n){return(t-e)/(n-e)}function tt(t){return 0===t.cval||15===t.cval}function et(t){tt(t)||5===t.cval||10===t.cval||(t.cval=15)}function nt(t,e){return\"top\"===e?[t.top,1]:\"bottom\"===e?[t.bottom,0]:\"right\"===e?[1,t.right]:\"left\"===e?[0,t.left]:void 0}function rt(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.zProperty||\"elevation\",r=e.flip,i=e.flags;W(t,\"Point\",\"input must contain Points\");for(var o=function(t,e){var n={};O(t,function(t){var e=U(t)[1];n[e]||(n[e]=[]),n[e].push(t)});return Object.keys(n).map(function(t){var e=n[t],r=e.sort(function(t,e){return U(t)[0]-U(e)[0]});return r}).sort(function(t,n){return e?U(t[0])[1]-U(n[0])[1]:U(n[0])[1]-U(t[0])[1]})}(t,r),s=[],a=0;a<o.length;a++){for(var u=o[a],c=[],h=0;h<u.length;h++){var l=u[h];l.properties[n]?c.push(l.properties[n]):c.push(0),!0===i&&(l.properties.matrixPosition=[a,h])}s.push(c)}return s}function it(t,e,n,r,i){for(n=n||0,r=r||t.length-1,i=i||function(t,e){return t<e?-1:t>e?1:0};r>n;){if(r-n>600){var o=r-n+1,s=e-n+1,a=Math.log(o),u=.5*Math.exp(2*a/3),c=.5*Math.sqrt(a*u*(o-u)/o)*(s-o/2<0?-1:1);it(t,e,Math.max(n,Math.floor(e-s*u/o+c)),Math.min(r,Math.floor(e+(o-s)*u/o+c)),i)}var h=t[e],l=n,p=r;for(ot(t,n,e),i(t[r],h)>0&&ot(t,n,r);l<p;){for(ot(t,l,p),l++,p--;i(t[l],h)<0;)l++;for(;i(t[p],h)>0;)p--}0===i(t[n],h)?ot(t,n,p):ot(t,++p,r),p<=e&&(n=p+1),e<=p&&(r=p-1)}}function ot(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function st(t,e){if(!(this instanceof st))return new st(t,e);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),e&&this._initFormat(e),this.clear()}function at(t,e){ut(t,0,t.children.length,e,t)}function ut(t,e,n,r,i){i||(i=yt(null)),i.minX=1/0,i.minY=1/0,i.maxX=-1/0,i.maxY=-1/0;for(var o,s=e;s<n;s++)o=t.children[s],ct(i,t.leaf?r(o):o);return i}function ct(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function ht(t,e){return t.minX-e.minX}function lt(t,e){return t.minY-e.minY}function pt(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function ft(t){return t.maxX-t.minX+(t.maxY-t.minY)}function gt(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function dt(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function yt(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function _t(t,e,n,r,i){for(var o,s=[e,n];s.length;)(n=s.pop())-(e=s.pop())<=r||(o=e+Math.ceil((n-e)/r/2)*r,Yo(t,o,e,n,i),s.push(e,o,o,n))}function mt(t,e){return e={exports:{}},t(e,e.exports),e.exports}function vt(t,e){if(!(this instanceof vt))return new vt(t,e);if(this.data=t||[],this.length=this.data.length,this.compare=e||function(t,e){return t<e?-1:t>e?1:0},this.length>0)for(var n=(this.length>>1)-1;n>=0;n--)this._down(n)}function xt(t,e,n){e=Math.max(0,void 0===e?2:e),n=n||0;for(var r,i=function(t){for(var e=t[0],n=t[0],r=t[0],i=t[0],o=0;o<t.length;o++){var s=t[o];s[0]<e[0]&&(e=s),s[0]>r[0]&&(r=s),s[1]<n[1]&&(n=s),s[1]>i[1]&&(i=s)}var a=[e,n,r,i],u=a.slice();for(o=0;o<t.length;o++)is(t[o],a)||u.push(t[o]);var c=ts(u),h=[];for(o=0;o<c.length;o++)h.push(u[c[o]]);return h}(t),o=Vo(16,[\"[0]\",\"[1]\",\"[0]\",\"[1]\"]).load(t),s=[],a=0;a<i.length;a++){var u=i[a];o.remove(u),r=Nt(u,r),s.push(r)}var c=Vo(16);for(a=0;a<s.length;a++)c.insert(It(s[a]));for(var h=e*e,l=n*n;s.length;){var p=s.shift(),f=p.p,g=p.next.p,d=Ct(f,g);if(!(d<l)){var y=d/h;(u=function(t,e,n,r,i,o,s){var a=new ns(null,Et),u=t.data;for(;u;){for(var c=0;c<u.children.length;c++){var h=u.children[c],l=u.leaf?St(h,n,r):function(t,e,n){if(wt(t,n)||wt(e,n))return 0;var r=Mt(t[0],t[1],e[0],e[1],n.minX,n.minY,n.maxX,n.minY);if(0===r)return 0;var i=Mt(t[0],t[1],e[0],e[1],n.minX,n.minY,n.minX,n.maxY);if(0===i)return 0;var o=Mt(t[0],t[1],e[0],e[1],n.maxX,n.minY,n.maxX,n.maxY);if(0===o)return 0;var s=Mt(t[0],t[1],e[0],e[1],n.minX,n.maxY,n.maxX,n.maxY);return 0===s?0:Math.min(r,i,o,s)}(n,r,h);l>o||a.push({node:h,dist:l})}for(;a.length&&!a.peek().node.children;){var p=a.pop(),f=p.node,g=St(f,e,n),d=St(f,r,i);if(p.dist<g&&p.dist<d&&bt(n,f,s)&&bt(r,f,s))return f}(u=a.pop())&&(u=u.node)}return null}(o,p.prev.p,f,g,p.next.next.p,y,c))&&Math.min(Ct(u,f),Ct(u,g))<=y&&(s.push(p),s.push(Nt(u,p)),o.remove(u),c.remove(p),c.insert(It(p)),c.insert(It(p.next)))}}p=r;var _=[];do{_.push(p.p),p=p.next}while(p!==r);return _.push(p.p),_}function Et(t,e){return t.dist-e.dist}function wt(t,e){return t[0]>=e.minX&&t[0]<=e.maxX&&t[1]>=e.minY&&t[1]<=e.maxY}function bt(t,e,n){for(var r=Math.min(t[0],e[0]),i=Math.min(t[1],e[1]),o=Math.max(t[0],e[0]),s=Math.max(t[1],e[1]),a=n.search({minX:r,minY:i,maxX:o,maxY:s}),u=0;u<a.length;u++)if(function(t,e,n,r){return t!==r&&e!==n&&os(t,e,n)>0!=os(t,e,r)>0&&os(n,r,t)>0!=os(n,r,e)>0}(a[u].p,a[u].next.p,t,e))return!1;return!0}function It(t){var e=t.p,n=t.next.p;return t.minX=Math.min(e[0],n[0]),t.minY=Math.min(e[1],n[1]),t.maxX=Math.max(e[0],n[0]),t.maxY=Math.max(e[1],n[1]),t}function Nt(t,e){var n={p:t,prev:null,next:null,minX:0,minY:0,maxX:0,maxY:0};return e?(n.next=e.next,n.prev=e,e.next.prev=n,e.next=n):(n.prev=n,n.next=n),n}function Ct(t,e){var n=t[0]-e[0],r=t[1]-e[1];return n*n+r*r}function St(t,e,n){var r=e[0],i=e[1],o=n[0]-r,s=n[1]-i;if(0!==o||0!==s){var a=((t[0]-r)*o+(t[1]-i)*s)/(o*o+s*s);a>1?(r=n[0],i=n[1]):a>0&&(r+=o*a,i+=s*a)}return o=t[0]-r,s=t[1]-i,o*o+s*s}function Mt(t,e,n,r,i,o,s,a){var u,c,h,l,p=n-t,f=r-e,g=s-i,d=a-o,y=t-i,_=e-o,m=p*p+f*f,v=p*g+f*d,x=g*g+d*d,E=p*y+f*_,w=g*y+d*_,b=m*x-v*v,I=b,N=b;0===b?(c=0,I=1,l=w,N=x):(l=m*w-v*E,(c=v*w-x*E)<0?(c=0,l=w,N=x):c>I&&(c=I,l=w+v,N=x)),l<0?(l=0,-E<0?c=0:-E>m?c=I:(c=-E,I=m)):l>N&&(l=N,-E+v<0?c=0:-E+v>m?c=I:(c=-E+v,I=m)),u=0===c?0:c/I;var C=(1-(h=0===l?0:l/N))*i+h*s-((1-u)*t+u*n),S=(1-h)*o+h*a-((1-u)*e+u*r);return C*C+S*S}function Lt(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.concavity||1/0,r=[];if(S(t,function(t){r.push([t[0],t[1]])}),!r.length)return null;var i=ss(r,n);return i.length>3?o([i]):null}function Pt(t,e,n){if(\"object\"!=typeof(n=n||{}))throw new Error(\"options is invalid\");var r=n.ignoreBoundary;if(!t)throw new Error(\"point is required\");if(!e)throw new Error(\"polygon is required\");var i=X(t),o=U(e),s=e.geometry?e.geometry.type:e.type,a=e.bbox;if(a&&!1===function(t,e){return e[0]<=t[0]&&e[1]<=t[1]&&e[2]>=t[0]&&e[3]>=t[1]}(i,a))return!1;\"Polygon\"===s&&(o=[o]);for(var u=0,c=!1;u<o.length&&!c;u++)if(Ot(i,o[u][0],r)){for(var h=!1,l=1;l<o[u].length&&!h;)Ot(i,o[u][l],!r)&&(h=!0),l++;h||(c=!0)}return c}function Ot(t,e,n){var r=!1;e[0][0]===e[e.length-1][0]&&e[0][1]===e[e.length-1][1]&&(e=e.slice(0,e.length-1));for(var i=0,o=e.length-1;i<e.length;o=i++){var s=e[i][0],a=e[i][1],u=e[o][0],c=e[o][1];if(t[1]*(s-u)+a*(u-t[0])+c*(t[0]-s)==0&&(s-t[0])*(u-t[0])<=0&&(a-t[1])*(c-t[1])<=0)return!n;a>t[1]!=c>t[1]&&t[0]<(u-s)*(t[1]-a)/(c-a)+s&&(r=!r)}return r}function Rt(t,e){var n=[];return A(e,function(e){O(t,function(t){Pt(t,e)&&n.push(t)})}),c(n)}function Tt(t,e){if(\"FeatureCollection\"!==t.type)throw new Error(\"points must be a FeatureCollection\");var n=!1;return c(function(t){if(t.length<3)return[];t.sort(Dt);var e,n,r,i,o,s,a=t.length-1,u=t[a].x,c=t[0].x,h=t[a].y,l=h;for(;a--;)t[a].y<h&&(h=t[a].y),t[a].y>l&&(l=t[a].y);var p,f=c-u,g=l-h,d=f>g?f:g,y=.5*(c+u),_=.5*(l+h),m=[new At({x:y-20*d,y:_-d,__sentinel:!0},{x:y,y:_+20*d,__sentinel:!0},{x:y+20*d,y:_-d,__sentinel:!0})],v=[],x=[];a=t.length;for(;a--;){for(x.length=0,p=m.length;p--;)(f=t[a].x-m[p].x)>0&&f*f>m[p].r?(v.push(m[p]),m.splice(p,1)):(g=t[a].y-m[p].y,f*f+g*g>m[p].r||(x.push(m[p].a,m[p].b,m[p].b,m[p].c,m[p].c,m[p].a),m.splice(p,1)));for(Ft(x),p=x.length;p;)n=x[--p],e=x[--p],r=t[a],i=n.x-e.x,o=n.y-e.y,s=2*(i*(r.y-n.y)-o*(r.x-n.x)),Math.abs(s)>1e-12&&m.push(new At(e,n,r))}Array.prototype.push.apply(v,m),a=v.length;for(;a--;)(v[a].a.__sentinel||v[a].b.__sentinel||v[a].c.__sentinel)&&v.splice(a,1);return v}(t.features.map(function(t){var r={x:t.geometry.coordinates[0],y:t.geometry.coordinates[1]};return e?r.z=t.properties[e]:3===t.geometry.coordinates.length&&(n=!0,r.z=t.geometry.coordinates[2]),r})).map(function(t){var e=[t.a.x,t.a.y],r=[t.b.x,t.b.y],i=[t.c.x,t.c.y],s={};return n?(e.push(t.a.z),r.push(t.b.z),i.push(t.c.z)):s={a:t.a.z,b:t.b.z,c:t.c.z},o([[e,r,i,e]],s)}))}function At(t,e,n){this.a=t,this.b=e,this.c=n;var r,i,o=e.x-t.x,s=e.y-t.y,a=n.x-t.x,u=n.y-t.y,c=o*(t.x+e.x)+s*(t.y+e.y),h=a*(t.x+n.x)+u*(t.y+n.y),l=2*(o*(n.y-e.y)-s*(n.x-e.x));this.x=(u*c-s*h)/l,this.y=(o*h-a*c)/l,r=this.x-t.x,i=this.y-t.y,this.r=r*r+i*i}function Dt(t,e){return e.x-t.x}function Ft(t){var e,n,r,i,o,s=t.length;t:for(;s;)for(n=t[--s],e=t[--s],r=s;r;)if(o=t[--r],i=t[--r],e===i&&n===o||e===o&&n===i){t.splice(s,2),t.splice(r,2),s-=2;continue t}}function qt(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.units,i=X(t),o=X(e),s=x(o[1]-i[1]),a=x(o[0]-i[0]),u=x(i[1]),c=x(o[1]),h=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(a/2),2)*Math.cos(u)*Math.cos(c);return d(2*Math.atan2(Math.sqrt(h),Math.sqrt(1-h)),r)}function Gt(t){if(!t)throw new Error(\"geojson is required\");switch(t.type){case\"Feature\":return Bt(t);case\"FeatureCollection\":return function(t){var e={type:\"FeatureCollection\"};return Object.keys(t).forEach(function(n){switch(n){case\"type\":case\"features\":return;default:e[n]=t[n]}}),e.features=t.features.map(function(t){return Bt(t)}),e}(t);case\"Point\":case\"LineString\":case\"Polygon\":case\"MultiPoint\":case\"MultiLineString\":case\"MultiPolygon\":case\"GeometryCollection\":return zt(t);default:throw new Error(\"unknown GeoJSON type\")}}function Bt(t){var e={type:\"Feature\"};return Object.keys(t).forEach(function(n){switch(n){case\"type\":case\"properties\":case\"geometry\":return;default:e[n]=t[n]}}),e.properties=kt(t.properties),e.geometry=zt(t.geometry),e}function kt(t){var e={};return t?(Object.keys(t).forEach(function(n){var r=t[n];\"object\"==typeof r?null===r?e[n]=null:r.length?e[n]=r.map(function(t){return t}):e[n]=kt(r):e[n]=r}),e):e}function zt(t){var e={type:t.type};return t.bbox&&(e.bbox=t.bbox),\"GeometryCollection\"===t.type?(e.geometries=t.geometries.map(function(t){return zt(t)}),e):(e.coordinates=jt(t.coordinates),e)}function jt(t){return\"object\"!=typeof t[0]?t.slice():t.map(function(t){return jt(t)})}function Xt(t,e){function n(t,e){e.length&&e.pop();for(var n=c[t<0?~t:t],r=0,i=n.length;r<i;++r)e.push(u(n[r],r));t<0&&hs(e,i)}function r(t){return u(t)}function i(t){for(var e=[],r=0,i=t.length;r<i;++r)n(t[r],e);return e.length<2&&e.push(e[0]),e}function o(t){for(var e=i(t);e.length<4;)e.push(e[0]);return e}function s(t){return t.map(o)}function a(t){var e,n=t.type;switch(n){case\"GeometryCollection\":return{type:n,geometries:t.geometries.map(a)};case\"Point\":e=r(t.coordinates);break;case\"MultiPoint\":e=t.coordinates.map(r);break;case\"LineString\":e=i(t.arcs);break;case\"MultiLineString\":e=t.arcs.map(i);break;case\"Polygon\":e=s(t.arcs);break;case\"MultiPolygon\":e=t.arcs.map(s);break;default:return null}return{type:n,coordinates:e}}var u=cs(t.transform),c=t.arcs;return a(e)}function Ut(t,e){function n(t){switch(t.type){case\"GeometryCollection\":t.geometries.forEach(n);break;case\"Polygon\":r(t.arcs);break;case\"MultiPolygon\":t.arcs.forEach(r)}}function r(t){t.forEach(function(e){e.forEach(function(e){(o[e=e<0?~e:e]||(o[e]=[])).push(t)})}),s.push(t)}function i(e){return function(t){for(var e,n=-1,r=t.length,i=t[r-1],o=0;++n<r;)e=i,i=t[n],o+=e[0]*i[1]-e[1]*i[0];return Math.abs(o)}(Xt(t,{type:\"Polygon\",arcs:[e]}).coordinates[0])}var o={},s=[],a=[];return e.forEach(n),s.forEach(function(t){if(!t._){var e=[],n=[t];for(t._=1,a.push(e);t=n.pop();)e.push(t),t.forEach(function(t){t.forEach(function(t){o[t<0?~t:t].forEach(function(t){t._||(t._=1,n.push(t))})})})}}),s.forEach(function(t){delete t._}),{type:\"MultiPolygon\",arcs:a.map(function(e){var n,r=[];if(e.forEach(function(t){t.forEach(function(t){t.forEach(function(t){o[t<0?~t:t].length<2&&r.push(t)})})}),r=ls(t,r),(n=r.length)>1)for(var s,a,u=1,c=i(r[0]);u<n;++u)(s=i(r[u]))>c&&(a=r[0],r[0]=r[u],r[u]=a,c=s);return r})}}function Yt(t,e,n){for(var r,i=e+(n---e>>1);e<i;++e,--n)r=t[e],t[e]=t[n],t[n]=r}function Vt(t){return null==t?{type:null}:(\"FeatureCollection\"===t.type?function(t){var e={type:\"GeometryCollection\",geometries:t.features.map(Ht)};null!=t.bbox&&(e.bbox=t.bbox);return e}:\"Feature\"===t.type?Ht:Wt)(t)}function Ht(t){var e,n=Wt(t.geometry);null!=t.id&&(n.id=t.id),null!=t.bbox&&(n.bbox=t.bbox);for(e in t.properties){n.properties=t.properties;break}return n}function Wt(t){if(null==t)return{type:null};var e=\"GeometryCollection\"===t.type?{type:\"GeometryCollection\",geometries:t.geometries.map(Wt)}:\"Point\"===t.type||\"MultiPoint\"===t.type?{type:t.type,coordinates:t.coordinates}:{type:t.type,arcs:t.coordinates};return null!=t.bbox&&(e.bbox=t.bbox),e}function Jt(t){var e,n=t[0],r=t[1];return r<n&&(e=n,n=r,r=e),n+31*r}function Zt(t,e){var n,r=t[0],i=t[1],o=e[0],s=e[1];return i<r&&(n=r,r=i,i=n),s<o&&(n=o,o=s,s=n),r===o&&i===s}function Kt(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.mutate;if(\"FeatureCollection\"!==K(t))throw new Error(\"geojson must be a FeatureCollection\");if(!t.features.length)throw new Error(\"geojson is empty\");!1!==n&&void 0!==n||(t=Gt(t));var r=[],i=z(t,function(t,e){var n=function(t,e){var n,r=t.geometry.coordinates,i=e.geometry.coordinates,o=Qt(r[0]),s=Qt(r[r.length-1]),u=Qt(i[0]),c=Qt(i[i.length-1]);if(o===c)n=i.concat(r.slice(1));else if(u===s)n=r.concat(i.slice(1));else if(o===u)n=r.slice(1).reverse().concat(i);else{if(s!==c)return null;n=r.concat(i.reverse().slice(1))}return a(n)}(t,e);return n||(r.push(t),e)});return i&&r.push(i),r.length?1===r.length?r[0]:h(r.map(function(t){return t.coordinates})):null}function Qt(t){return t[0].toString()+\",\"+t[1].toString()}function $t(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.mutate;if(\"FeatureCollection\"!==K(t))throw new Error(\"geojson must be a FeatureCollection\");if(!t.features.length)throw new Error(\"geojson is empty\");!1!==n&&void 0!==n||(t=Gt(t));var r=function(t){var e={};F(t,function(t){e[t.geometry.type]=!0});var n=Object.keys(e);return 1===n.length?n[0]:null}(t);if(!r)throw new Error(\"geojson must be homogenous\");switch(r){case\"LineString\":return Kt(t,e);case\"Polygon\":return function(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.mutate;if(\"FeatureCollection\"!==K(t))throw new Error(\"geojson must be a FeatureCollection\");if(!t.features.length)throw new Error(\"geojson is empty\");!1!==n&&void 0!==n||(t=Gt(t));var r=[];F(t,function(t){r.push(t.geometry)});var i=ws({geoms:f(r).geometry});return ps(i,i.objects.geoms.geometries)}(t,e);default:throw new Error(r+\" is not supported\")}}function te(t,n){var r=\"object\"==typeof n?n.mutate:n;if(!t)throw new Error(\"geojson is required\");var i=K(t),o=[];switch(i){case\"LineString\":o=ee(t);break;case\"MultiLineString\":case\"Polygon\":U(t).forEach(function(t){o.push(ee(t))});break;case\"MultiPolygon\":U(t).forEach(function(t){var e=[];t.forEach(function(t){e.push(ee(t))}),o.push(e)});break;case\"Point\":return t;case\"MultiPoint\":var s={};U(t).forEach(function(t){var e=t.join(\"-\");s.hasOwnProperty(e)||(o.push(t),s[e]=!0)});break;default:throw new Error(i+\" geometry not supported\")}return t.coordinates?!0===r?(t.coordinates=o,t):{type:i,coordinates:o}:!0===r?(t.geometry.coordinates=o,t):e({type:i,coordinates:o},t.properties,t.bbox,t.id)}function ee(t){var e=U(t);if(2===e.length&&!function(t,e){return t[0]===e[0]&&t[1]===e[1]}(e[0],e[1]))return e;var n,r,i,o=[],s=e.length-1;o.push(e[0]);for(var a=1;a<s;a++)n=e[a-1],r=e[a],function(t,e,n){var r=n[0],i=n[1],o=t[0],s=t[1],a=e[0],u=e[1],c=a-o,h=u-s;return(r-o)*h-(i-s)*c==0&&(Math.abs(c)>=Math.abs(h)?c>0?o<=r&&r<=a:a<=r&&r<=o:h>0?s<=i&&i<=u:u<=i&&i<=s)}(n,i=e[a+1],r)||o.push(r);return o.push(i),o}function ne(t,e){var n=t.x-e.x,r=t.y-e.y;return n*n+r*r}function re(t,e,n){var r=e.x,i=e.y,o=n.x-r,s=n.y-i;if(0!==o||0!==s){var a=((t.x-r)*o+(t.y-i)*s)/(o*o+s*s);a>1?(r=n.x,i=n.y):a>0&&(r+=o*a,i+=s*a)}return o=t.x-r,s=t.y-i,o*o+s*s}function ie(t,e,n,r,i){for(var o,s=r,a=e+1;a<n;a++){var u=re(t[a],t[e],t[n]);u>s&&(o=a,s=u)}s>r&&(o-e>1&&ie(t,e,o,r,i),i.push(t[o]),n-o>1&&ie(t,o,n,r,i))}function oe(t,e,n){if(t.length<=2)return t;var r=void 0!==e?e*e:1;return t=n?t:function(t,e){for(var n,r=t[0],i=[r],o=1,s=t.length;o<s;o++)ne(n=t[o],r)>e&&(i.push(n),r=n);return r!==n&&i.push(n),i}(t,r),t=function(t,e){var n=t.length-1,r=[t[0]];return ie(t,0,n,e,r),r.push(t[n]),r}(t,r)}function se(t,e,n){return oe(t.map(function(t){return{x:t[0],y:t[1],z:t[2]}}),e,n).map(function(t){return t.z?[t.x,t.y,t.z]:[t.x,t.y]})}function ae(t,e,n){return t.map(function(t){var r=t.map(function(t){return{x:t[0],y:t[1]}});if(r.length<4)throw new Error(\"invalid polygon\");for(var i=oe(r,e,n).map(function(t){return[t.x,t.y]});!function(t){return!(t.length<3||3===t.length&&t[2][0]===t[0][0]&&t[2][1]===t[0][1])}(i);)i=oe(r,e-=.01*e,n).map(function(t){return[t.x,t.y]});return i[i.length-1][0]===i[0][0]&&i[i.length-1][1]===i[0][1]||i.push(i[0]),i})}function ue(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.resolution||1e4,r=e.sharpness||.85;if(!t)throw new Error(\"line is required\");if(!b(n))throw new Error(\"resolution must be an number\");if(!b(r))throw new Error(\"sharpness must be an number\");for(var i=[],o=new bs({points:J(t).coordinates.map(function(t){return{x:t[0],y:t[1]}}),duration:n,sharpness:r}),s=0;s<o.duration;s+=10){var u=o.pos(s);Math.floor(s/100)%2==0&&i.push([u.x,u.y])}return a(i,t.properties)}function ce(t){N(t);var e=Number(t[0]),n=Number(t[1]),r=Number(t[2]),i=Number(t[3]);if(6===t.length)throw new Error(\"@turf/bbox-polygon does not support BBox with 6 positions\");var s=[e,n];return o([[s,[r,n],[r,i],[e,i],s]])}function he(t){return ce(j(t))}function le(t){var e=t[0],n=t[1],r=t[2],i=t[3];if(qt(t.slice(0,2),[r,n])>=qt(t.slice(0,2),[e,i])){var o=(n+i)/2;return[e,o-(r-e)/2,r,o+(r-e)/2]}var s=(e+r)/2;return[s-(i-n)/2,n,s+(i-n)/2,i]}function pe(t,e,n,i){if(i=i||{},!I(i))throw new Error(\"options is invalid\");var o=i.units,s=i.properties,a=X(t),u=x(a[0]),c=x(a[1]),h=x(n),l=y(e,o),p=Math.asin(Math.sin(c)*Math.cos(l)+Math.cos(c)*Math.sin(l)*Math.cos(h));return r([v(u+Math.atan2(Math.sin(h)*Math.sin(l)*Math.cos(c),Math.cos(l)-Math.sin(c)*Math.sin(p))),v(p)],s)}function fe(t,e,n){var r=(n=n||{}).steps||64,i=n.properties;if(!t)throw new Error(\"center is required\");if(!e)throw new Error(\"radius is required\");if(\"object\"!=typeof n)throw new Error(\"options must be an object\");if(\"number\"!=typeof r)throw new Error(\"steps must be a number\");r=r||64,i=i||t.properties||{};for(var s=[],a=0;a<r;a++)s.push(pe(t,e,-360*a/r,n).geometry.coordinates);return s.push(s[0]),o([s],i)}function ge(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");if(!0===n.final)return function(t,e){var n=ge(e,t);return n=(n+180)%360}(t,e);var r=X(t),i=X(e),o=x(r[0]),s=x(i[0]),a=x(r[1]),u=x(i[1]),c=Math.sin(s-o)*Math.cos(u),h=Math.cos(a)*Math.sin(u)-Math.sin(a)*Math.cos(u)*Math.cos(s-o);return v(Math.atan2(c,h))}function de(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.properties;if(!t)throw new Error(\"geojson is required\");var i=j(t);return r([(i[0]+i[2])/2,(i[1]+i[3])/2],n)}function ye(t,e){var n=0,i=0,o=0;return S(t,function(t){n+=t[0],i+=t[1],o++},!0),r([n/o,i/o],e)}function _e(t,e){switch(K(t)){case\"Point\":return t;case\"Polygon\":var n=[];S(t,function(t){n.push(t)});var i,o,s,a,u,c,h,l,p=ye(t,e),f=p.geometry.coordinates,g=0,d=0,y=0,_=n.map(function(t){return[t[0]-f[0],t[1]-f[1]]});for(i=0;i<n.length-1;i++)a=(o=_[i])[0],c=o[1],u=(s=_[i+1])[0],y+=l=a*(h=s[1])-u*c,g+=(a+u)*l,d+=(c+h)*l;if(0===y)return p;var m=1/(6*(.5*y));return r([f[0]+m*g,f[1]+m*d],e);default:var v=Lt(t);return v?_e(v,e):ye(t,e)}}function me(t){var e=[];return\"FeatureCollection\"===t.type?O(t,function(t){S(t,function(n){e.push(r(n,t.properties))})}):S(t,function(n){e.push(r(n,t.properties))}),c(e)}function ve(t,e,n){n=n||2;var r=e&&e.length,i=r?e[0]*n:t.length,o=xe(t,0,i,n,!0),s=[];if(!o)return s;var a,u,c,h,l,p,f;if(r&&(o=function(t,e,n,r){var i,o,s,a,u,c=[];for(i=0,o=e.length;i<o;i++)s=e[i]*r,a=i<o-1?e[i+1]*r:t.length,(u=xe(t,s,a,r,!1))===u.next&&(u.steiner=!0),c.push(function(t){var e=t,n=t;do{e.x<n.x&&(n=e),e=e.next}while(e!==t);return n}(u));for(c.sort(be),i=0;i<c.length;i++)!function(t,e){if(e=function(t,e){var n,r=e,i=t.x,o=t.y,s=-1/0;do{if(o<=r.y&&o>=r.next.y&&r.next.y!==r.y){var a=r.x+(o-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(a<=i&&a>s){if(s=a,a===i){if(o===r.y)return r;if(o===r.next.y)return r.next}n=r.x<r.next.x?r:r.next}}r=r.next}while(r!==e);if(!n)return null;if(i===s)return n.prev;var u,c=n,h=n.x,l=n.y,p=1/0;for(r=n.next;r!==c;)i>=r.x&&r.x>=h&&i!==r.x&&Ne(o<l?i:s,o,h,l,o<l?s:i,o,r.x,r.y)&&((u=Math.abs(o-r.y)/(i-r.x))<p||u===p&&r.x>n.x)&&Le(r,t)&&(n=r,p=u),r=r.next;return n}(t,e)){var n=Pe(e,t);Ee(n,n.next)}}(c[i],n),n=Ee(n,n.next);return n}(t,e,o,n)),t.length>80*n){a=c=t[0],u=h=t[1];for(var g=n;g<i;g+=n)l=t[g],p=t[g+1],l<a&&(a=l),p<u&&(u=p),l>c&&(c=l),p>h&&(h=p);f=0!==(f=Math.max(c-a,h-u))?1/f:0}return we(o,s,n,a,u,f),s}function xe(t,e,n,r,i){var o,s;if(i===Ae(t,e,n,r)>0)for(o=e;o<n;o+=r)s=Oe(o,t[o],t[o+1],s);else for(o=n-r;o>=e;o-=r)s=Oe(o,t[o],t[o+1],s);return s&&Se(s,s.next)&&(Re(s),s=s.next),s}function Ee(t,e){if(!t)return t;e||(e=t);var n,r=t;do{if(n=!1,r.steiner||!Se(r,r.next)&&0!==Ce(r.prev,r,r.next))r=r.next;else{if(Re(r),(r=e=r.prev)===r.next)break;n=!0}}while(n||r!==e);return e}function we(t,e,n,r,i,o,s){if(t){!s&&o&&function(t,e,n,r){var i=t;do{null===i.z&&(i.z=Ie(i.x,i.y,e,n,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,function(t){var e,n,r,i,o,s,a,u,c=1;do{for(n=t,t=null,o=null,s=0;n;){for(s++,r=n,a=0,e=0;e<c&&(a++,r=r.nextZ);e++);for(u=c;a>0||u>0&&r;)0!==a&&(0===u||!r||n.z<=r.z)?(i=n,n=n.nextZ,a--):(i=r,r=r.nextZ,u--),o?o.nextZ=i:t=i,i.prevZ=o,o=i;n=r}o.nextZ=null,c*=2}while(s>1)}(i)}(t,r,i,o);for(var a,u,c=t;t.prev!==t.next;)if(a=t.prev,u=t.next,o?function(t,e,n,r){var i=t.prev,o=t,s=t.next;if(Ce(i,o,s)>=0)return!1;var a=i.x<o.x?i.x<s.x?i.x:s.x:o.x<s.x?o.x:s.x,u=i.y<o.y?i.y<s.y?i.y:s.y:o.y<s.y?o.y:s.y,c=i.x>o.x?i.x>s.x?i.x:s.x:o.x>s.x?o.x:s.x,h=i.y>o.y?i.y>s.y?i.y:s.y:o.y>s.y?o.y:s.y,l=Ie(a,u,e,n,r),p=Ie(c,h,e,n,r),f=t.nextZ;for(;f&&f.z<=p;){if(f!==t.prev&&f!==t.next&&Ne(i.x,i.y,o.x,o.y,s.x,s.y,f.x,f.y)&&Ce(f.prev,f,f.next)>=0)return!1;f=f.nextZ}f=t.prevZ;for(;f&&f.z>=l;){if(f!==t.prev&&f!==t.next&&Ne(i.x,i.y,o.x,o.y,s.x,s.y,f.x,f.y)&&Ce(f.prev,f,f.next)>=0)return!1;f=f.prevZ}return!0}(t,r,i,o):function(t){var e=t.prev,n=t,r=t.next;if(Ce(e,n,r)>=0)return!1;var i=t.next.next;for(;i!==t.prev;){if(Ne(e.x,e.y,n.x,n.y,r.x,r.y,i.x,i.y)&&Ce(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}(t))e.push(a.i/n),e.push(t.i/n),e.push(u.i/n),Re(t),t=u.next,c=u.next;else if((t=u)===c){s?1===s?we(t=function(t,e,n){var r=t;do{var i=r.prev,o=r.next.next;!Se(i,o)&&Me(i,r,r.next,o)&&Le(i,o)&&Le(o,i)&&(e.push(i.i/n),e.push(r.i/n),e.push(o.i/n),Re(r),Re(r.next),r=t=o),r=r.next}while(r!==t);return r}(t,e,n),e,n,r,i,o,2):2===s&&function(t,e,n,r,i,o){var s=t;do{for(var a=s.next.next;a!==s.prev;){if(s.i!==a.i&&function(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Me(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&Le(t,e)&&Le(e,t)&&function(t,e){var n=t,r=!1,i=(t.x+e.x)/2,o=(t.y+e.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&i<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==t);return r}(t,e)}(s,a)){var u=Pe(s,a);return s=Ee(s,s.next),u=Ee(u,u.next),we(s,e,n,r,i,o),void we(u,e,n,r,i,o)}a=a.next}s=s.next}while(s!==t)}(t,e,n,r,i,o):we(Ee(t),e,n,r,i,o,1);break}}}function be(t,e){return t.x-e.x}function Ie(t,e,n,r,i){return t=32767*(t-n)*i,e=32767*(e-r)*i,t=16711935&(t|t<<8),t=252645135&(t|t<<4),t=858993459&(t|t<<2),t=1431655765&(t|t<<1),e=16711935&(e|e<<8),e=252645135&(e|e<<4),e=858993459&(e|e<<2),e=1431655765&(e|e<<1),t|e<<1}function Ne(t,e,n,r,i,o,s,a){return(i-s)*(e-a)-(t-s)*(o-a)>=0&&(t-s)*(r-a)-(n-s)*(e-a)>=0&&(n-s)*(o-a)-(i-s)*(r-a)>=0}function Ce(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function Se(t,e){return t.x===e.x&&t.y===e.y}function Me(t,e,n,r){return!!(Se(t,e)&&Se(n,r)||Se(t,r)&&Se(n,e))||Ce(t,e,n)>0!=Ce(t,e,r)>0&&Ce(n,r,t)>0!=Ce(n,r,e)>0}function Le(t,e){return Ce(t.prev,t,t.next)<0?Ce(t,e,t.next)>=0&&Ce(t,t.prev,e)>=0:Ce(t,e,t.prev)<0||Ce(t,t.next,e)<0}function Pe(t,e){var n=new Te(t.i,t.x,t.y),r=new Te(e.i,e.x,e.y),i=t.next,o=e.prev;return t.next=e,e.prev=t,n.next=i,i.prev=n,r.next=n,n.prev=r,o.next=r,r.prev=o,r}function Oe(t,e,n,r){var i=new Te(t,e,n);return r?(i.next=r.next,i.prev=r,r.next.prev=i,r.next=i):(i.prev=i,i.next=i),i}function Re(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Te(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Ae(t,e,n,r){for(var i=0,o=e,s=n-r;o<n;o+=r)i+=(t[s]-t[o])*(t[o+1]+t[s+1]),s=o;return i}function De(t){var e=function(t){for(var e=t[0][0].length,n={vertices:[],holes:[],dimensions:e},r=0,i=0;i<t.length;i++){for(var o=0;o<t[i].length;o++)for(var s=0;s<e;s++)n.vertices.push(t[i][o][s]);i>0&&(r+=t[i-1].length,n.holes.push(r))}return n}(t),n=Is(e.vertices,e.holes,2),r=[],i=[];n.forEach(function(t,r){var o=n[r];i.push([e.vertices[2*o],e.vertices[2*o+1]])});for(var s=0;s<i.length;s+=3){var a=i.slice(s,s+3);a.push(i[s]),r.push(o([a]))}return r}function Fe(t,e){if(!t)throw new Error(\"targetPoint is required\");if(!e)throw new Error(\"points is required\");var n,r=1/0;return O(e,function(e,i){var o=qt(t,e);o<r&&((n=Gt(e)).properties.featureIndex=i,n.properties.distanceToPoint=o,r=o)}),n}function qe(t,e,n,r,i){Ge(t,e,n||0,r||t.length-1,i||function(t,e){return t<e?-1:t>e?1:0})}function Ge(t,e,n,r,i){for(;r>n;){if(r-n>600){var o=r-n+1,s=e-n+1,a=Math.log(o),u=.5*Math.exp(2*a/3),c=.5*Math.sqrt(a*u*(o-u)/o)*(s-o/2<0?-1:1);Ge(t,e,Math.max(n,Math.floor(e-s*u/o+c)),Math.min(r,Math.floor(e+(o-s)*u/o+c)),i)}var h=t[e],l=n,p=r;for(Be(t,n,e),i(t[r],h)>0&&Be(t,n,r);l<p;){for(Be(t,l,p),l++,p--;i(t[l],h)<0;)l++;for(;i(t[p],h)>0;)p--}0===i(t[n],h)?Be(t,n,p):Be(t,++p,r),p<=e&&(n=p+1),e<=p&&(r=p-1)}}function Be(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function ke(t,e){if(!(this instanceof ke))return new ke(t,e);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),e&&this._initFormat(e),this.clear()}function ze(t,e){je(t,0,t.children.length,e,t)}function je(t,e,n,r,i){i||(i=Ze(null)),i.minX=1/0,i.minY=1/0,i.maxX=-1/0,i.maxY=-1/0;for(var o,s=e;s<n;s++)o=t.children[s],Xe(i,t.leaf?r(o):o);return i}function Xe(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function Ue(t,e){return t.minX-e.minX}function Ye(t,e){return t.minY-e.minY}function Ve(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function He(t){return t.maxX-t.minX+(t.maxY-t.minY)}function We(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function Je(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function Ze(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function Ke(t,e,n,r,i){for(var o,s=[e,n];s.length;)(n=s.pop())-(e=s.pop())<=r||(qe(t,o=e+Math.ceil((n-e)/r/2)*r,e,n,i),s.push(e,o,o,n))}function Qe(t){var e=ke(t);return e.insert=function(t){if(Array.isArray(t)){var e=t;(t=$e(e)).bbox=e}else t.bbox=t.bbox?t.bbox:tn(t);return ke.prototype.insert.call(this,t)},e.load=function(t){var e=[];return Array.isArray(t)?t.forEach(function(t){var n=$e(t);n.bbox=t,e.push(n)}):O(t,function(t){t.bbox=t.bbox?t.bbox:tn(t),e.push(t)}),ke.prototype.load.call(this,e)},e.remove=function(t){if(Array.isArray(t)){var e=t;(t=$e(e)).bbox=e}return ke.prototype.remove.call(this,t)},e.clear=function(){return ke.prototype.clear.call(this)},e.search=function(t){return{type:\"FeatureCollection\",features:ke.prototype.search.call(this,this.toBBox(t))}},e.collides=function(t){return ke.prototype.collides.call(this,this.toBBox(t))},e.all=function(){return{type:\"FeatureCollection\",features:ke.prototype.all.call(this)}},e.toJSON=function(){return ke.prototype.toJSON.call(this)},e.fromJSON=function(t){return ke.prototype.fromJSON.call(this,t)},e.toBBox=function(t){var e;return e=t.bbox?t.bbox:Array.isArray(t)&&4===t.length?t:tn(t),{minX:e[0],minY:e[1],maxX:e[2],maxY:e[3]}},e}function $e(t){var e=[t[0],t[1]],n=[t[0],t[3]],r=[t[2],t[3]];return{type:\"Feature\",bbox:t,properties:{},geometry:{type:\"Polygon\",coordinates:[[e,[t[2],t[1]],r,n,e]]}}}function tn(t){var e=[1/0,1/0,-1/0,-1/0];return S(t,function(t){e[0]>t[0]&&(e[0]=t[0]),e[1]>t[1]&&(e[1]=t[1]),e[2]<t[0]&&(e[2]=t[0]),e[3]<t[1]&&(e[3]=t[1])}),e}function en(t){if(!t)throw new Error(\"geojson is required\");var e=[];return F(t,function(t){!function(t,e){var n=[],r=t.geometry;switch(r.type){case\"Polygon\":n=U(r);break;case\"LineString\":n=[U(r)]}n.forEach(function(n){var r=function(t,e){var n=[];return t.reduce(function(t,r){var i=a([t,r],e);return i.bbox=function(t,e){var n=t[0],r=t[1],i=e[0],o=e[1];return[n<i?n:i,r<o?r:o,n>i?n:i,r>o?r:o]}(t,r),n.push(i),r}),n}(n,t.properties);r.forEach(function(t){t.id=e.length,e.push(t)})})}(t,e)}),c(e)}function nn(t,n){var r={},i=[];if(\"LineString\"===t.type&&(t=e(t)),\"LineString\"===n.type&&(n=e(n)),\"Feature\"===t.type&&\"Feature\"===n.type&&\"LineString\"===t.geometry.type&&\"LineString\"===n.geometry.type&&2===t.geometry.coordinates.length&&2===n.geometry.coordinates.length){var o=rn(t,n);return o&&i.push(o),c(i)}var s=Qe();return s.load(en(n)),O(en(t),function(t){O(s.search(t),function(e){var n=rn(t,e);if(n){var o=U(n).join(\",\");r[o]||(r[o]=!0,i.push(n))}})}),c(i)}function rn(t,e){var n=U(t),i=U(e);if(2!==n.length)throw new Error(\"<intersects> line1 must only contain 2 coordinates\");if(2!==i.length)throw new Error(\"<intersects> line2 must only contain 2 coordinates\");var o=n[0][0],s=n[0][1],a=n[1][0],u=n[1][1],c=i[0][0],h=i[0][1],l=i[1][0],p=i[1][1],f=(p-h)*(a-o)-(l-c)*(u-s),g=(l-c)*(s-h)-(p-h)*(o-c),d=(a-o)*(s-h)-(u-s)*(o-c);if(0===f)return null;var y=g/f,_=d/f;if(y>=0&&y<=1&&_>=0&&_<=1){return r([o+y*(a-o),s+y*(u-s)])}return null}function on(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var i=t.geometry?t.geometry.type:t.type;if(\"LineString\"!==i&&\"MultiLineString\"!==i)throw new Error(\"lines must be LineString or MultiLineString\");var o=r([1/0,1/0],{dist:1/0}),s=0;return F(t,function(t){for(var i=U(t),u=0;u<i.length-1;u++){var c=r(i[u]);c.properties.dist=qt(e,c,n);var h=r(i[u+1]);h.properties.dist=qt(e,h,n);var l=qt(c,h,n),p=Math.max(c.properties.dist,h.properties.dist),f=ge(c,h),g=pe(e,p,f+90,n),d=pe(e,p,f-90,n),y=nn(a([g.geometry.coordinates,d.geometry.coordinates]),a([c.geometry.coordinates,h.geometry.coordinates])),_=null;y.features.length>0&&((_=y.features[0]).properties.dist=qt(e,_,n),_.properties.location=s+qt(c,_,n)),c.properties.dist<o.properties.dist&&((o=c).properties.index=u,o.properties.location=s),h.properties.dist<o.properties.dist&&((o=h).properties.index=u+1,o.properties.location=s+l),_&&_.properties.dist<o.properties.dist&&((o=_).properties.index=u),s+=l}}),o}function sn(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.final;if(!t)throw new Error(\"start point is required\");if(!e)throw new Error(\"end point is required\");var i;return(i=r?an(X(e),X(t)):an(X(t),X(e)))>180?-(360-i):i}function an(t,e){var n=x(t[1]),r=x(e[1]),i=x(e[0]-t[0]);i>Math.PI&&(i-=2*Math.PI),i<-Math.PI&&(i+=2*Math.PI);var o=Math.log(Math.tan(r/2+Math.PI/4)/Math.tan(n/2+Math.PI/4));return(v(Math.atan2(i,o))+360)%360}function un(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.units;if(!t)throw new Error(\"from point is required\");if(!e)throw new Error(\"to point is required\");var i=X(t),o=X(e);o[0]+=o[0]-i[0]>180?-360:i[0]-o[0]>180?360:0;return E(function(t,e,n){var r=n=void 0===n?Fo:Number(n),i=t[1]*Math.PI/180,o=e[1]*Math.PI/180,s=o-i,a=Math.abs(e[0]-t[0])*Math.PI/180;a>Math.PI&&(a-=2*Math.PI);var u=Math.log(Math.tan(o/2+Math.PI/4)/Math.tan(i/2+Math.PI/4)),c=Math.abs(u)>1e-11?s/u:Math.cos(i);return Math.sqrt(s*s+c*c*a*a)*r}(i,o),\"meters\",r)}function cn(t,e){return ln(t,\"mercator\",e)}function hn(t,e){return ln(t,\"wgs84\",e)}function ln(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.mutate;if(!t)throw new Error(\"geojson is required\");return Array.isArray(t)&&b(t[0])?t=\"mercator\"===e?pn(t):fn(t):(!0!==r&&(t=Gt(t)),S(t,function(t){var n=\"mercator\"===e?pn(t):fn(t);t[0]=n[0],t[1]=n[1]})),t}function pn(t){var e=Math.PI/180,n=20037508.342789244,r=[6378137*(Math.abs(t[0])<=180?t[0]:t[0]-360*function(t){return t<0?-1:t>0?1:0}(t[0]))*e,6378137*Math.log(Math.tan(.25*Math.PI+.5*t[1]*e))];return r[0]>n&&(r[0]=n),r[0]<-n&&(r[0]=-n),r[1]>n&&(r[1]=n),r[1]<-n&&(r[1]=-n),r}function fn(t){var e=180/Math.PI;return[t[0]*e/6378137,(.5*Math.PI-2*Math.atan(Math.exp(-t[1]/6378137)))*e]}function gn(t,n,i){if(i=i||{},!I(i))throw new Error(\"options is invalid\");if(!t)throw new Error(\"pt is required\");if(Array.isArray(t)?t=r(t):\"Point\"===t.type?t=e(t):H(t,\"Point\",\"point\"),!n)throw new Error(\"line is required\");Array.isArray(n)?n=a(n):\"LineString\"===n.type?n=e(n):H(n,\"LineString\",\"line\");var o=1/0,s=t.geometry.coordinates;return G(n,function(t){var e=t.geometry.coordinates[0],n=t.geometry.coordinates[1],a=function(t,e,n,i){var o=i.mercator,s=!0!==o?qt(e,t,i):dn(e,t,i),a=m(!0!==o?ge(e,t):sn(e,t)),u=m(!0!==o?ge(e,n):sn(e,n)),c=Math.abs(a-u);if(c>90)return s;var h=(u+180)%360,l=m(!0!==o?ge(n,t):sn(n,t)),p=Math.abs(l-h);p>180&&(p=Math.abs(p-360));return p>90?!0!==o?qt(t,n,i):dn(t,n,i):!0!==o?s*Math.sin(x(c)):function(t,e,n,i){var o=0;(Math.abs(t[0])>=180||Math.abs(e[0])>=180||Math.abs(n[0])>=180)&&(o=t[0]>0||e[0]>0||n[0]>0?-180:180);var s=r(n),a=cn([t[0]+o,t[1]]),u=cn([e[0]+o,e[1]]),c=cn([n[0]+o,n[1]]),h=hn(function(t,e,n){var r=t[0],i=t[1],o=e[0],s=e[1],a=n[0],u=n[1],c=o-r,h=s-i,l=((a-r)*c+(u-i)*h)/(c*c+h*h);return[r+l*c,i+l*h]}(a,u,c));return 0!==o&&(h[0]-=o),un(s,h,i)}(e,n,t,i)}(s,e,n,i);o>a&&(o=a)}),o}function dn(t,e,n){var r=n.units,i=0;Math.abs(t[0])>=180&&(i=t[0]>0?-180:180),Math.abs(e[0])>=180&&(i=e[0]>0?-180:180);var o=cn([t[0]+i,t[1]]),s=cn([e[0]+i,e[1]]),a=function(t){return t*t},u=a(o[0]-s[0])+a(o[1]-s[1]);return E(Math.sqrt(u),\"meters\",r)}function yn(t){for(var n=function(t){if(\"FeatureCollection\"!==t.type)return\"Feature\"!==t.type?c([e(t)]):c([t]);return t}(t),i=de(n),o=!1,s=0;!o&&s<n.features.length;){var a,u=n.features[s].geometry,h=!1;if(\"Point\"===u.type)i.geometry.coordinates[0]===u.coordinates[0]&&i.geometry.coordinates[1]===u.coordinates[1]&&(o=!0);else if(\"MultiPoint\"===u.type){var l=!1;for(a=0;!l&&a<u.coordinates.length;)i.geometry.coordinates[0]===u.coordinates[a][0]&&i.geometry.coordinates[1]===u.coordinates[a][1]&&(o=!0,l=!0),a++}else if(\"LineString\"===u.type)for(a=0;!h&&a<u.coordinates.length-1;)_n(i.geometry.coordinates[0],i.geometry.coordinates[1],u.coordinates[a][0],u.coordinates[a][1],u.coordinates[a+1][0],u.coordinates[a+1][1])&&(h=!0,o=!0),a++;else if(\"MultiLineString\"===u.type)for(var p=0;p<u.coordinates.length;){h=!1,a=0;for(var f=u.coordinates[p];!h&&a<f.length-1;)_n(i.geometry.coordinates[0],i.geometry.coordinates[1],f[a][0],f[a][1],f[a+1][0],f[a+1][1])&&(h=!0,o=!0),a++;p++}else\"Polygon\"!==u.type&&\"MultiPolygon\"!==u.type||Pt(i,u)&&(o=!0);s++}if(o)return i;var g=c([]);for(s=0;s<n.features.length;s++)g.features=g.features.concat(me(n.features[s]).features);return r(Fe(i,g).geometry.coordinates)}function _n(t,e,n,r,i,o){return Math.sqrt((i-n)*(i-n)+(o-r)*(o-r))===Math.sqrt((t-n)*(t-n)+(e-r)*(e-r))+Math.sqrt((i-t)*(i-t)+(o-e)*(o-e))}function mn(t){return D(t,function(t,e){return t+vn(e)},0)}function vn(t){var e,n=0;switch(t.type){case\"Polygon\":return xn(t.coordinates);case\"MultiPolygon\":for(e=0;e<t.coordinates.length;e++)n+=xn(t.coordinates[e]);return n;case\"Point\":case\"MultiPoint\":case\"LineString\":case\"MultiLineString\":return 0;case\"GeometryCollection\":for(e=0;e<t.geometries.length;e++)n+=vn(t.geometries[e]);return n}}function xn(t){var e=0;if(t&&t.length>0){e+=Math.abs(En(t[0]));for(var n=1;n<t.length;n++)e-=Math.abs(En(t[n]))}return e}function En(t){var e,n,r,i,o,s,a=0,u=t.length;if(u>2){for(s=0;s<u;s++)s===u-2?(r=u-2,i=u-1,o=0):s===u-1?(r=u-1,i=0,o=1):(r=s,i=s+1,o=s+2),e=t[r],n=t[i],a+=(wn(t[o][0])-wn(e[0]))*Math.sin(wn(n[1]));a=a*Ss*Ss/2}return a}function wn(t){return t*Math.PI/180}function bn(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");if(!t)throw new Error(\"geojson is required\");return B(t,function(t,n){var r=n.geometry.coordinates;return t+qt(r[0],r[1],e)},0)}function In(t,e,n,r){if(r=r||{},!I(r))throw new Error(\"options is invalid\");var i,o=[];if(\"Feature\"===t.type)i=t.geometry.coordinates;else{if(\"LineString\"!==t.type)throw new Error(\"input must be a LineString Feature or Geometry\");i=t.coordinates}for(var s,u,c,h=0,l=0;l<i.length&&!(e>=h&&l===i.length-1);l++){if(h>e&&0===o.length){if(!(s=e-h))return o.push(i[l]),a(o);u=ge(i[l],i[l-1])-180,c=pe(i[l],s,u,r),o.push(c.geometry.coordinates)}if(h>=n)return(s=n-h)?(u=ge(i[l],i[l-1])-180,c=pe(i[l],s,u,r),o.push(c.geometry.coordinates),a(o)):(o.push(i[l]),a(o));if(h>=e&&o.push(i[l]),l===i.length-1)return a(o);h+=qt(i[l],i[l+1],r)}return a(i[i.length-1])}function Nn(t,e,n){var r=(n=n||{}).ignoreEndVertices;if(!I(n))throw new Error(\"invalid options\");if(!t)throw new Error(\"pt is required\");if(!e)throw new Error(\"line is required\");for(var i=X(t),o=U(e),s=0;s<o.length-1;s++){var a=!1;if(r&&(0===s&&(a=\"start\"),s===o.length-2&&(a=\"end\"),0===s&&s+1===o.length-1&&(a=\"both\")),function(t,e,n,r){var i=n[0],o=n[1],s=t[0],a=t[1],u=e[0],c=e[1],h=n[0]-s,l=n[1]-a,p=u-s,f=c-a;if(h*f-l*p!=0)return!1;{if(!r)return Math.abs(p)>=Math.abs(f)?p>0?s<=i&&i<=u:u<=i&&i<=s:f>0?a<=o&&o<=c:c<=o&&o<=a;if(\"start\"===r)return Math.abs(p)>=Math.abs(f)?p>0?s<i&&i<=u:u<=i&&i<s:f>0?a<o&&o<=c:c<=o&&o<a;if(\"end\"===r)return Math.abs(p)>=Math.abs(f)?p>0?s<=i&&i<u:u<i&&i<=s:f>0?a<=o&&o<c:c<o&&o<=a;if(\"both\"===r)return Math.abs(p)>=Math.abs(f)?p>0?s<i&&i<u:u<i&&i<s:f>0?a<o&&o<c:c<o&&o<a}}(o[s],o[s+1],i,a))return!0}return!1}function Cn(t,e){var n=K(t),r=K(e),i=J(t),o=J(e);switch(n){case\"Point\":switch(r){case\"MultiPoint\":return function(t,e){var n,r=!1;for(n=0;n<e.coordinates.length;n++)if(Mn(e.coordinates[n],t.coordinates)){r=!0;break}return r}(i,o);case\"LineString\":return Nn(i,o,{ignoreEndVertices:!0});case\"Polygon\":return Pt(i,o,{ignoreBoundary:!0});default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}case\"MultiPoint\":switch(r){case\"MultiPoint\":return function(t,e){for(var n=0;n<t.coordinates.length;n++){for(var r=!1,i=0;i<e.coordinates.length;i++)Mn(t.coordinates[n],e.coordinates[i])&&(r=!0);if(!r)return!1}return!0}(i,o);case\"LineString\":return function(t,e){for(var n=!1,r=0;r<t.coordinates.length;r++){if(!Nn(t.coordinates[r],e))return!1;n||(n=Nn(t.coordinates[r],e,{ignoreEndVertices:!0}))}return n}(i,o);case\"Polygon\":return function(t,e){for(var n=!0,r=0;r<t.coordinates.length;r++){var i=Pt(t.coordinates[1],e);if(!i){n=!1;break}i=Pt(t.coordinates[1],e,{ignoreBoundary:!0})}return n&&i}(i,o);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}case\"LineString\":switch(r){case\"LineString\":return function(t,e){for(var n=0;n<t.coordinates.length;n++)if(!Nn(t.coordinates[n],e))return!1;return!0}(i,o);case\"Polygon\":return function(t,e){var n=j(e),r=j(t);if(!Sn(n,r))return!1;for(var i=!1,o=0;o<t.coordinates.length-1;o++){if(!Pt(t.coordinates[o],e))return!1;if(i||(i=Pt(t.coordinates[o],e,{ignoreBoundary:!0})),!i){var s=function(t,e){return[(t[0]+e[0])/2,(t[1]+e[1])/2]}(t.coordinates[o],t.coordinates[o+1]);i=Pt(s,e,{ignoreBoundary:!0})}}return i}(i,o);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}case\"Polygon\":switch(r){case\"Polygon\":return function(t,e){var n=j(t);if(!Sn(j(e),n))return!1;for(var r=0;r<t.coordinates[0].length;r++)if(!Pt(t.coordinates[0][r],e))return!1;return!0}(i,o);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}default:throw new Error(\"feature1 \"+n+\" geometry not supported\")}}function Sn(t,e){return!(t[0]>e[0])&&(!(t[2]<e[2])&&(!(t[1]>e[1])&&!(t[3]<e[3])))}function Mn(t,e){return t[0]===e[0]&&t[1]===e[1]}function Ln(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var i=n.mask,o=n.properties,s=[];if(null===e||void 0===e)throw new Error(\"cellSide is required\");if(!b(e))throw new Error(\"cellSide is invalid\");if(!t)throw new Error(\"bbox is required\");if(!Array.isArray(t))throw new Error(\"bbox must be array\");if(4!==t.length)throw new Error(\"bbox must contain 4 numbers\");if(i&&-1===[\"Polygon\",\"MultiPolygon\"].indexOf(K(i)))throw new Error(\"options.mask must be a (Multi)Polygon\");for(var a=t[0],u=t[1],h=t[2],l=t[3],p=e/qt([a,u],[h,u],n)*(h-a),f=e/qt([a,u],[a,l],n)*(l-u),g=h-a,d=l-u,y=Math.floor(g/p),_=(d-Math.floor(d/f)*f)/2,m=a+(g-y*p)/2;m<=h;){for(var v=u+_;v<=l;){var x=r([m,v],o);i?Cn(x,i)&&s.push(x):s.push(x),v+=f}m+=p}return c(s)}function Pn(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.precision,r=e.coordinates,i=e.mutate;if(n=void 0===n||null===n||isNaN(n)?6:n,r=void 0===r||null===r||isNaN(r)?3:r,!t)throw new Error(\"<geojson> is required\");if(\"number\"!=typeof n)throw new Error(\"<precision> must be a number\");if(\"number\"!=typeof r)throw new Error(\"<coordinates> must be a number\");!1!==i&&void 0!==i||(t=JSON.parse(JSON.stringify(t)));var o=Math.pow(10,n);return S(t,function(t){!function(t,e,n){t.length>n&&t.splice(n,t.length);for(var r=0;r<t.length;r++)t[r]=Math.round(t[r]*e)/e}(t,o,r)}),t}function On(t,e){if(!t||!e)return!1;if(t.length!==e.length)return!1;for(var n=0,r=t.length;n<r;n++)if(t[n]instanceof Array&&e[n]instanceof Array){if(!On(t[n],e[n]))return!1}else if(t[n]!==e[n])return!1;return!0}function Rn(t,e){if(void 0===e&&(e=!0),3!=t.length)throw new Error(\"This function requires an array of three points [x,y]\");return(t[1][0]-t[0][0])*(t[2][1]-t[0][1])-(t[1][1]-t[0][1])*(t[2][0]-t[0][0])>=0==e}function Tn(t,e){if(!t||!e)return!1;if(t.length!=e.length)return!1;for(var n=0,r=t.length;n<r;n++)if(t[n]instanceof Array&&e[n]instanceof Array){if(!Tn(t[n],e[n]))return!1}else if(t[n]!=e[n])return!1;return!0}function An(t,e){var n=[],r=Qe();return F(e,function(e){if(n.forEach(function(t,e){t.id=e}),n.length){var i=r.search(e);if(i.features.length){var o=Fn(e,i);n=n.filter(function(t){return t.id!==o.id}),r.remove(o),O(Dn(o,e),function(t){n.push(t),r.insert(t)})}}else(n=Dn(t,e).features).forEach(function(t){t.bbox||(t.bbox=le(j(t)))}),r.load(c(n))}),c(n)}function Dn(t,e){var n=[],r=U(t)[0],i=U(t)[t.geometry.coordinates.length-1];if(qn(r,X(e))||qn(i,X(e)))return c([t]);var o=Qe(),s=en(t);o.load(s);var u=o.search(e);if(!u.features.length)return c([t]);var h=Fn(e,u),l=R(s,function(t,r,i){var o=U(r)[1],s=X(e);return i===h.id?(t.push(s),n.push(a(t)),qn(s,o)?[s]:[s,o]):(t.push(o),t)},[r]);return l.length>1&&n.push(a(l)),c(n)}function Fn(t,e){if(!e.features.length)throw new Error(\"lines must contain features\");if(1===e.features.length)return e.features[0];var n,r=1/0;return O(e,function(e){var i=on(e,t).properties.dist;i<r&&(n=e,r=i)}),n}function qn(t,e){return t[0]===e[0]&&t[1]===e[1]}function Gn(t,e,n,r,i){if(i=i||{},!I(i))throw new Error(\"options is invalid\");var o=i.steps,s=i.units;if(!t)throw new Error(\"center is required\");if(!e)throw new Error(\"radius is required\");if(void 0===n||null===n)throw new Error(\"bearing1 is required\");if(void 0===r||null===r)throw new Error(\"bearing2 is required\");if(\"object\"!=typeof i)throw new Error(\"options must be an object\");o=o||64;var u=Bn(n),c=Bn(r),h=t.properties;if(u===c)return a(fe(t,e,i).geometry.coordinates[0],h);for(var l=u,p=u<c?c:c+360,f=l,g=[],d=0;f<p;)g.push(pe(t,e,f,s).geometry.coordinates),f=l+360*++d/o;return f>p&&g.push(pe(t,e,p,s).geometry.coordinates),a(g,h)}function Bn(t){var e=t%360;return e<0&&(e+=360),e}function kn(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.properties,r=K(t),i=U(t);if(n=n||t.properties||{},!i.length)throw new Error(\"polygon must contain coordinates\");switch(r){case\"Polygon\":return zn(i,n);case\"MultiPolygon\":var o=[];return i.forEach(function(t){o.push(zn(t,n))}),c(o);default:throw new Error(\"geom \"+r+\" not supported\")}}function zn(t,e){return t.length>1?h(t,e):a(t[0],e)}function jn(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.properties,r=e.autoComplete,i=e.orderCoords;if(!t)throw new Error(\"lines is required\");r=void 0===r||r,i=void 0===i||i;switch(K(t)){case\"FeatureCollection\":case\"GeometryCollection\":var o=[];return(t.features?t.features:t.geometries).forEach(function(t){o.push(U(Xn(t,{},r,i)))}),p(o,n)}return Xn(t,n,r,i)}function Xn(t,e,n,r){e=e||t.properties||{};var i=U(t),s=K(t);if(!i.length)throw new Error(\"line must contain coordinates\");switch(s){case\"LineString\":return n&&(i=Un(i)),o([i],e);case\"MultiLineString\":var u=[],c=0;return i.forEach(function(t){if(n&&(t=Un(t)),r){var e=function(t){var e=t[0],n=t[1],r=t[2],i=t[3];return Math.abs(e-r)*Math.abs(n-i)}(j(a(t)));e>c?(u.unshift(t),c=e):u.push(t)}else u.push(t)}),o(u,e);default:throw new Error(\"geometry type \"+s+\" is not supported\")}}function Un(t){var e=t[0],n=e[0],r=e[1],i=t[t.length-1],o=i[0],s=i[1];return n===o&&r===s||t.push(e),t}function Yn(t,e,n){var r,i,o,s,a,u=t.length,c=Hn(t[0],e),h=[];for(n||(n=[]),r=1;r<u;r++){for(i=t[r-1],s=a=Hn(o=t[r],e);;){if(!(c|s)){h.push(i),s!==a?(h.push(o),r<u-1&&(n.push(h),h=[])):r===u-1&&h.push(o);break}if(c&s)break;c?c=Hn(i=Vn(i,o,c,e),e):s=Hn(o=Vn(i,o,s,e),e)}c=a}return h.length&&n.push(h),n}function Vn(t,e,n,r){return 8&n?[t[0]+(e[0]-t[0])*(r[3]-t[1])/(e[1]-t[1]),r[3]]:4&n?[t[0]+(e[0]-t[0])*(r[1]-t[1])/(e[1]-t[1]),r[1]]:2&n?[r[2],t[1]+(e[1]-t[1])*(r[2]-t[0])/(e[0]-t[0])]:1&n?[r[0],t[1]+(e[1]-t[1])*(r[0]-t[0])/(e[0]-t[0])]:null}function Hn(t,e){var n=0;return t[0]<e[0]?n|=1:t[0]>e[2]&&(n|=2),t[1]<e[1]?n|=4:t[1]>e[3]&&(n|=8),n}function Wn(t,e){for(var n=[],r=0;r<t.length;r++){var i=Gs.polygon(t[r],e);i.length>0&&(i[0][0]===i[i.length-1][0]&&i[0][1]===i[i.length-1][1]||i.push(i[0]),i.length>=4&&n.push(i))}return n}function Jn(t){return\"[object Arguments]\"===Object.prototype.toString.call(t)}function Zn(t,e,n){return n||(n={}),t===e||(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():!t||!e||\"object\"!=typeof t&&\"object\"!=typeof e?(n.strict,t===e):function(t,e,n){var r,i;if(Kn(t)||Kn(e))return!1;if(t.prototype!==e.prototype)return!1;if(Jn(t))return!!Jn(e)&&(t=Bs.call(t),e=Bs.call(e),Zn(t,e,n));if(Qn(t)){if(!Qn(e))return!1;if(t.length!==e.length)return!1;for(r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0}try{var o=Object.keys(t),s=Object.keys(e)}catch(t){return!1}if(o.length!==s.length)return!1;for(o.sort(),s.sort(),r=o.length-1;r>=0;r--)if(o[r]!==s[r])return!1;for(r=o.length-1;r>=0;r--)if(i=o[r],!Zn(t[i],e[i],n))return!1;return typeof t==typeof e}(t,e,n))}function Kn(t){return null===t||void 0===t}function Qn(t){return!(!t||\"object\"!=typeof t||\"number\"!=typeof t.length)&&(\"function\"==typeof t.copy&&\"function\"==typeof t.slice&&!(t.length>0&&\"number\"!=typeof t[0]))}function $n(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.tolerance||0,i=[],o=Qe();o.load(en(t));var s;return G(e,function(t){var e=!1;O(o.search(t),function(n){if(!1===e){var i=U(t).sort(),o=U(n).sort();Zn(i,o)?(e=!0,s=s?tr(s,t):t):(0===r?Nn(i[0],n)&&Nn(i[1],n):on(n,i[0]).properties.dist<=r&&on(n,i[1]).properties.dist<=r)?(e=!0,s=s?tr(s,t):t):(0===r?Nn(o[0],t)&&Nn(o[1],t):on(t,o[0]).properties.dist<=r&&on(t,o[1]).properties.dist<=r)&&(s=s?tr(s,n):n)}}),!1===e&&s&&(i.push(s),s=void 0)}),s&&i.push(s),c(i)}function tr(t,e){var n=U(e),r=U(t),i=r[0],o=r[r.length-1],s=t.geometry.coordinates;return Zn(n[0],i)?s.unshift(n[1]):Zn(n[0],o)?s.push(n[1]):Zn(n[1],i)?s.unshift(n[0]):Zn(n[1],o)&&s.push(n[0]),t}function er(t){var e=t%360;return e<0&&(e+=360),e}function nr(t,e,n,i){if(i=i||{},!I(i))throw new Error(\"options is invalid\");var o=i.units,s=i.properties;if(!t)throw new Error(\"origin is required\");if(void 0===e||null===e)throw new Error(\"distance is required\");if(void 0===n||null===n)throw new Error(\"bearing is required\");if(!(e>=0))throw new Error(\"distance must be greater than 0\");var a=E(e,o,\"meters\"),u=X(t),c=function(t,e,n,r){r=void 0===r?Fo:Number(r);var i=e/r,o=t[0]*Math.PI/180,s=x(t[1]),a=x(n),u=i*Math.cos(a),c=s+u;Math.abs(c)>Math.PI/2&&(c=c>0?Math.PI-c:-Math.PI-c);var h=Math.log(Math.tan(c/2+Math.PI/4)/Math.tan(s/2+Math.PI/4)),l=Math.abs(h)>1e-11?u/h:Math.cos(s),p=i*Math.sin(a)/l;return[(180*(o+p)/Math.PI+540)%360-180,180*c/Math.PI]}(u,a,n);return c[0]+=c[0]-u[0]>180?-360:u[0]-c[0]>180?360:0,r(c,s)}function rr(t,e,n,r,i,o){for(var s=0;s<t.length;s++){var a=t[s],u=t[s+1];s===t.length-1&&(u=t[0]),r=ir(a,u,e),n<=0&&r>0?function(t,e,n){return ir(t,e,n)<0}(e,a,i)||(i=a):n>0&&r<=0&&(function(t,e,n){return ir(t,e,n)>0}(e,a,o)||(o=a)),n=r}return[i,o]}function ir(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(n[0]-t[0])*(e[1]-t[1])}function or(t){if(!t)throw new Error(\"line is required\");var e=t.geometry?t.geometry.type:t.type;if(!Array.isArray(t)&&\"LineString\"!==e)throw new Error(\"geometry must be a LineString\");for(var n,r,i=U(t),o=0,s=1;s<i.length;)n=r||i[0],o+=((r=i[s])[0]-n[0])*(r[1]+n[1]),s++;return o>0}function sr(t,e){switch(\"Feature\"===t.type?t.geometry.type:t.type){case\"GeometryCollection\":return A(t,function(t){sr(t,e)}),t;case\"LineString\":return ar(U(t),e),t;case\"Polygon\":return ur(U(t),e),t;case\"MultiLineString\":return U(t).forEach(function(t){ar(t,e)}),t;case\"MultiPolygon\":return U(t).forEach(function(t){ur(t,e)}),t;case\"Point\":case\"MultiPoint\":return t}}function ar(t,e){or(t)===e&&t.reverse()}function ur(t,e){or(t[0])!==e&&t[0].reverse();for(var n=1;n<t.length;n++)or(t[n])===e&&t[n].reverse()}function cr(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.zProperty||\"elevation\",r=e.flip,i=e.flags;W(t,\"Point\",\"input must contain Points\");for(var o=function(t,e){var n={};O(t,function(t){var e=U(t)[1];n[e]||(n[e]=[]),n[e].push(t)});return Object.keys(n).map(function(t){var e=n[t],r=e.sort(function(t,e){return U(t)[0]-U(e)[0]});return r}).sort(function(t,n){return e?U(t[0])[1]-U(n[0])[1]:U(n[0])[1]-U(t[0])[1]})}(t,r),s=[],a=0;a<o.length;a++){for(var u=o[a],c=[],h=0;h<u.length;h++){var l=u[h];l.properties[n]?c.push(l.properties[n]):c.push(0),!0===i&&(l.properties.matrixPosition=[a,h])}s.push(c)}return s}function hr(t,e,n,r){r=r||{};for(var i=Object.keys(ks),o=0;o<i.length;o++){var s=i[o],a=r[s];a=void 0!==a&&null!==a?a:ks[s],zs[s]=a}zs.verbose&&console.log(\"MarchingSquaresJS-isoBands: computing isobands for [\"+e+\":\"+(e+n)+\"]\");var u,c=function(t,e,n){for(var r=t.length-1,i=t[0].length-1,o={rows:r,cols:i,cells:[]},s=e+Math.abs(n),a=0;a<r;++a){o.cells[a]=[];for(var u=0;u<i;++u){var c=0,h=t[a+1][u],l=t[a+1][u+1],p=t[a][u+1],f=t[a][u];if(!(isNaN(h)||isNaN(l)||isNaN(p)||isNaN(f))){c|=h<e?0:h>s?128:64,c|=l<e?0:l>s?32:16,c|=p<e?0:p>s?8:4;var g=+(c|=f<e?0:f>s?2:1),d=0;if(17===c||18===c||33===c||34===c||38===c||68===c||72===c||98===c||102===c||132===c||136===c||137===c||152===c||153===c){var y=(h+l+p+f)/4;d=y>s?2:y<e?0:1,34===c?1===d?c=35:0===d&&(c=136):136===c?1===d?(c=35,d=4):0===d&&(c=34):17===c?1===d?(c=155,d=4):0===d&&(c=153):68===c?1===d?(c=103,d=4):0===d&&(c=102):153===c?1===d&&(c=155):102===c?1===d&&(c=103):152===c?d<2&&(c=156,d=1):137===c?d<2&&(c=139,d=1):98===c?d<2&&(c=99,d=1):38===c?d<2&&(c=39,d=1):18===c?d>0?(c=156,d=4):c=152:33===c?d>0?(c=139,d=4):c=137:72===c?d>0?(c=99,d=4):c=98:132===c&&(d>0?(c=39,d=4):c=38)}if(0!=c&&170!=c){var _,m,v,x,E,w,b,I;_=m=v=x=E=w=b=I=.5;var N=[];1===c?(v=1-lr(e,p,f),I=1-lr(e,h,f),N.push(Sa[c])):169===c?(v=lr(s,f,p),I=lr(s,f,h),N.push(Sa[c])):4===c?(w=1-lr(e,l,p),x=lr(e,f,p),N.push(Na[c])):166===c?(w=lr(s,p,l),x=1-lr(s,p,f),N.push(Na[c])):16===c?(E=lr(e,p,l),m=lr(e,h,l),N.push(Ia[c])):154===c?(E=1-lr(s,l,p),m=1-lr(s,l,h),N.push(Ia[c])):64===c?(b=lr(e,f,h),_=1-lr(e,l,h),N.push(La[c])):106===c?(b=1-lr(s,h,f),_=lr(s,h,l),N.push(La[c])):168===c?(x=lr(s,f,p),v=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),N.push(Ca[c]),N.push(Sa[c])):2===c?(x=1-lr(e,p,f),v=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),N.push(Ca[c]),N.push(Sa[c])):162===c?(E=lr(s,p,l),w=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),N.push(Ca[c]),N.push(Sa[c])):8===c?(E=1-lr(e,l,p),w=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),N.push(Ia[c]),N.push(Na[c])):138===c?(E=1-lr(e,l,p),w=1-lr(s,l,p),_=1-lr(s,l,h),m=1-lr(e,l,h),N.push(Ia[c]),N.push(Na[c])):32===c?(E=lr(s,p,l),w=lr(e,p,l),_=lr(e,h,l),m=lr(s,h,l),N.push(Ia[c]),N.push(Na[c])):42===c?(I=1-lr(s,h,f),b=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l),N.push(Ma[c]),N.push(La[c])):128===c&&(I=lr(e,f,h),b=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h),N.push(Ma[c]),N.push(La[c])),5===c?(w=1-lr(e,l,p),I=1-lr(e,h,f),N.push(Na[c])):165===c?(w=lr(s,p,l),I=lr(s,f,h),N.push(Na[c])):20===c?(x=lr(e,f,p),m=lr(e,h,l),N.push(Ca[c])):150===c?(x=1-lr(s,p,f),m=1-lr(s,l,h),N.push(Ca[c])):80===c?(E=lr(e,p,l),b=lr(e,f,h),N.push(Ia[c])):90===c?(E=1-lr(s,l,p),b=1-lr(s,h,f),N.push(Ia[c])):65===c?(v=1-lr(e,p,f),_=1-lr(e,l,h),N.push(Sa[c])):105===c?(v=lr(s,f,p),_=lr(s,h,l),N.push(Sa[c])):160===c?(E=lr(s,p,l),w=lr(e,p,l),I=lr(e,f,h),b=lr(s,f,h),N.push(Ia[c]),N.push(Na[c])):10===c?(E=1-lr(e,l,p),w=1-lr(s,l,p),I=1-lr(s,h,f),b=1-lr(e,h,f),N.push(Ia[c]),N.push(Na[c])):130===c?(x=1-lr(e,p,f),v=1-lr(s,p,f),_=1-lr(s,l,h),m=1-lr(e,l,h),N.push(Ca[c]),N.push(Sa[c])):40===c?(x=lr(s,f,p),v=lr(e,f,p),_=lr(e,h,l),m=lr(s,h,l),N.push(Ca[c]),N.push(Sa[c])):101===c?(w=lr(s,p,l),_=lr(s,h,l),N.push(Na[c])):69===c?(w=1-lr(e,l,p),_=1-lr(e,l,h),N.push(Na[c])):149===c?(I=lr(s,f,h),m=1-lr(s,l,h),N.push(Ma[c])):21===c?(I=1-lr(e,h,f),m=lr(e,h,l),N.push(Ma[c])):86===c?(x=1-lr(s,p,f),b=1-lr(s,h,f),N.push(Ca[c])):84===c?(x=lr(e,f,p),b=lr(e,f,h),N.push(Ca[c])):89===c?(E=1-lr(s,l,p),v=lr(s,f,p),N.push(Sa[c])):81===c?(E=lr(e,p,l),v=1-lr(e,p,f),N.push(Sa[c])):96===c?(E=lr(s,p,l),w=lr(e,p,l),b=lr(e,f,h),_=lr(s,h,l),N.push(Ia[c]),N.push(Na[c])):74===c?(E=1-lr(e,l,p),w=1-lr(s,l,p),b=1-lr(s,h,f),_=1-lr(e,l,h),N.push(Ia[c]),N.push(Na[c])):24===c?(E=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),m=lr(e,h,l),N.push(Ia[c]),N.push(Sa[c])):146===c?(E=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),m=1-lr(s,l,h),N.push(Ia[c]),N.push(Sa[c])):6===c?(w=1-lr(e,l,p),x=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),N.push(Na[c]),N.push(Ca[c])):164===c?(w=lr(s,p,l),x=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),N.push(Na[c]),N.push(Ca[c])):129===c?(v=1-lr(e,p,f),I=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h),N.push(Sa[c]),N.push(Ma[c])):41===c?(v=lr(s,f,p),I=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l),N.push(Sa[c]),N.push(Ma[c])):66===c?(x=1-lr(e,p,f),v=1-lr(s,p,f),b=1-lr(s,h,f),_=1-lr(e,l,h),N.push(Ca[c]),N.push(Sa[c])):104===c?(x=lr(s,f,p),v=lr(e,f,p),b=lr(e,f,h),_=lr(s,h,l),N.push(Sa[c]),N.push(Pa[c])):144===c?(E=lr(e,p,l),I=lr(e,f,h),b=lr(s,f,h),m=1-lr(s,l,h),N.push(Ia[c]),N.push(La[c])):26===c?(E=1-lr(s,l,p),I=1-lr(s,h,f),b=1-lr(e,h,f),m=lr(e,h,l),N.push(Ia[c]),N.push(La[c])):36===c?(w=lr(s,p,l),x=lr(e,f,p),_=lr(e,h,l),m=lr(s,h,l),N.push(Na[c]),N.push(Ca[c])):134===c?(w=1-lr(e,l,p),x=1-lr(s,p,f),_=1-lr(s,l,h),m=1-lr(e,l,h),N.push(Na[c]),N.push(Ca[c])):9===c?(E=1-lr(e,l,p),w=1-lr(s,l,p),v=lr(s,f,p),I=1-lr(e,h,f),N.push(Ia[c]),N.push(Na[c])):161===c?(E=lr(s,p,l),w=lr(e,p,l),v=1-lr(e,p,f),I=lr(s,f,h),N.push(Ia[c]),N.push(Na[c])):37===c?(w=lr(s,p,l),I=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l),N.push(Na[c]),N.push(Ma[c])):133===c?(w=1-lr(e,l,p),I=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h),N.push(Na[c]),N.push(Ma[c])):148===c?(x=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),m=1-lr(s,l,h),N.push(Ca[c]),N.push(La[c])):22===c?(x=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),m=lr(e,h,l),N.push(Ca[c]),N.push(La[c])):82===c?(E=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),b=1-lr(s,h,f),N.push(Ia[c]),N.push(Sa[c])):88===c?(E=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),b=lr(e,f,h),N.push(Ia[c]),N.push(Sa[c])):73===c?(E=1-lr(e,l,p),w=1-lr(s,l,p),v=lr(s,f,p),_=1-lr(e,l,h),N.push(Ia[c]),N.push(Na[c])):97===c?(E=lr(s,p,l),w=lr(e,p,l),v=1-lr(e,p,f),_=lr(s,h,l),N.push(Ia[c]),N.push(Na[c])):145===c?(E=lr(e,p,l),v=1-lr(e,p,f),I=lr(s,f,h),m=1-lr(s,l,h),N.push(Ia[c]),N.push(Ma[c])):25===c?(E=1-lr(s,l,p),v=lr(s,f,p),I=1-lr(e,h,f),m=lr(e,h,l),N.push(Ia[c]),N.push(Ma[c])):70===c?(w=1-lr(e,l,p),x=1-lr(s,p,f),b=1-lr(s,h,f),_=1-lr(e,l,h),N.push(Na[c]),N.push(Ca[c])):100===c?(w=lr(s,p,l),x=lr(e,f,p),b=lr(e,f,h),_=lr(s,h,l),N.push(Na[c]),N.push(Ca[c])):34===c?(0===d?(E=1-lr(e,l,p),w=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h)):(E=lr(s,p,l),w=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l)),N.push(Ia[c]),N.push(Na[c]),N.push(Ma[c]),N.push(La[c])):35===c?(4===d?(E=1-lr(e,l,p),w=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h)):(E=lr(s,p,l),w=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l)),N.push(Ia[c]),N.push(Na[c]),N.push(Sa[c]),N.push(La[c])):136===c?(0===d?(E=lr(s,p,l),w=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l)):(E=1-lr(e,l,p),w=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h)),N.push(Ia[c]),N.push(Na[c]),N.push(Ma[c]),N.push(La[c])):153===c?(0===d?(E=lr(e,p,l),v=1-lr(e,p,f),I=1-lr(e,h,f),m=lr(e,h,l)):(E=1-lr(s,l,p),v=lr(s,f,p),I=lr(s,f,h),m=1-lr(s,l,h)),N.push(Ia[c]),N.push(Sa[c])):102===c?(0===d?(w=1-lr(e,l,p),x=lr(e,f,p),b=lr(e,f,h),_=1-lr(e,l,h)):(w=lr(s,p,l),x=1-lr(s,p,f),b=1-lr(s,h,f),_=lr(s,h,l)),N.push(Na[c]),N.push(La[c])):155===c?(4===d?(E=lr(e,p,l),v=1-lr(e,p,f),I=1-lr(e,h,f),m=lr(e,h,l)):(E=1-lr(s,l,p),v=lr(s,f,p),I=lr(s,f,h),m=1-lr(s,l,h)),N.push(Ia[c]),N.push(Ma[c])):103===c?(4===d?(w=1-lr(e,l,p),x=lr(e,f,p),b=lr(e,f,h),_=1-lr(e,l,h)):(w=lr(s,p,l),x=1-lr(s,p,f),b=1-lr(s,h,f),_=lr(s,h,l)),N.push(Na[c]),N.push(Ca[c])):152===c?(0===d?(E=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),m=lr(e,h,l)):(E=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),m=1-lr(s,l,h)),N.push(Ia[c]),N.push(Ca[c]),N.push(Sa[c])):156===c?(4===d?(E=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),m=lr(e,h,l)):(E=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),m=1-lr(s,l,h)),N.push(Ia[c]),N.push(Sa[c]),N.push(La[c])):137===c?(0===d?(E=lr(s,p,l),w=lr(e,p,l),v=1-lr(e,p,f),I=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l)):(E=1-lr(e,l,p),w=1-lr(s,l,p),v=lr(s,f,p),I=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h)),N.push(Ia[c]),N.push(Na[c]),N.push(Sa[c])):139===c?(4===d?(E=lr(s,p,l),w=lr(e,p,l),v=1-lr(e,p,f),I=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l)):(E=1-lr(e,l,p),w=1-lr(s,l,p),v=lr(s,f,p),I=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h)),N.push(Ia[c]),N.push(Na[c]),N.push(Ma[c])):98===c?(0===d?(E=1-lr(e,l,p),w=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),b=lr(e,f,h),_=1-lr(e,l,h)):(E=lr(s,p,l),w=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),b=1-lr(s,h,f),_=lr(s,h,l)),N.push(Ia[c]),N.push(Na[c]),N.push(La[c])):99===c?(4===d?(E=1-lr(e,l,p),w=1-lr(s,l,p),x=lr(s,f,p),v=lr(e,f,p),b=lr(e,f,h),_=1-lr(e,l,h)):(E=lr(s,p,l),w=lr(e,p,l),x=1-lr(e,p,f),v=1-lr(s,p,f),b=1-lr(s,h,f),_=lr(s,h,l)),N.push(Ia[c]),N.push(Na[c]),N.push(Sa[c])):38===c?(0===d?(w=1-lr(e,l,p),x=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h)):(w=lr(s,p,l),x=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l)),N.push(Na[c]),N.push(Ma[c]),N.push(La[c])):39===c?(4===d?(w=1-lr(e,l,p),x=lr(e,f,p),I=lr(e,f,h),b=lr(s,f,h),_=1-lr(s,l,h),m=1-lr(e,l,h)):(w=lr(s,p,l),x=1-lr(s,p,f),I=1-lr(s,h,f),b=1-lr(e,h,f),_=lr(e,h,l),m=lr(s,h,l)),N.push(Na[c]),N.push(Ca[c]),N.push(La[c])):85===c&&(E=1,w=0,x=1,v=0,I=0,b=1,_=0,m=1),(_<0||_>1||m<0||m>1||E<0||E>1||x<0||x>1||I<0||I>1||b<0||b>1)&&console.log(\"MarchingSquaresJS-isoBands: \"+c+\" \"+g+\" \"+h+\",\"+l+\",\"+p+\",\"+f+\" \"+d+\" \"+_+\" \"+m+\" \"+E+\" \"+w+\" \"+x+\" \"+v+\" \"+I+\" \"+b),o.cells[a][u]={cval:c,cval_real:g,flipped:d,topleft:_,topright:m,righttop:E,rightbottom:w,bottomright:x,bottomleft:v,leftbottom:I,lefttop:b,edges:N}}}}}return o}(t,e,n);return zs.polygons?(zs.verbose&&console.log(\"MarchingSquaresJS-isoBands: returning single polygons for each grid cell\"),u=function(t){var e=[],n=0;return t.cells.forEach(function(t,r){t.forEach(function(t,i){if(void 0!==t){var o=Ra[t.cval](t);\"object\"==typeof o&&pr(o)?\"object\"==typeof o[0]&&pr(o[0])?\"object\"==typeof o[0][0]&&pr(o[0][0])?o.forEach(function(t){t.forEach(function(t){t[0]+=i,t[1]+=r}),e[n++]=t}):(o.forEach(function(t){t[0]+=i,t[1]+=r}),e[n++]=o):console.log(\"MarchingSquaresJS-isoBands: bandcell polygon with malformed coordinates\"):console.log(\"MarchingSquaresJS-isoBands: bandcell polygon with null coordinates\")}})}),e}(c)):(zs.verbose&&console.log(\"MarchingSquaresJS-isoBands: returning polygon paths for entire data grid\"),u=function(t){for(var e=[],n=t.rows,r=t.cols,i=[],o=0;o<n;o++)for(var s=0;s<r;s++)if(void 0!==t.cells[o][s]&&t.cells[o][s].edges.length>0){var a=t.cells[o][s],u=function(t){if(t.edges.length>0){var e=t.edges[t.edges.length-1],n=t.cval_real;switch(e){case 0:return n&Xs?{p:[1,t.righttop],x:-1,y:0,o:1}:{p:[t.topleft,1],x:0,y:-1,o:0};case 1:return n&Us?{p:[t.topleft,1],x:0,y:-1,o:0}:{p:[1,t.rightbottom],x:-1,y:0,o:0};case 2:return n&Us?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[t.topleft,1],x:0,y:-1,o:0};case 3:return n&Ys?{p:[t.topleft,1],x:0,y:-1,o:0}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 4:return n&Xs?{p:[1,t.righttop],x:-1,y:0,o:1}:{p:[t.topright,1],x:0,y:-1,o:1};case 5:return n&Us?{p:[t.topright,1],x:0,y:-1,o:1}:{p:[1,t.rightbottom],x:-1,y:0,o:0};case 6:return n&Us?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[t.topright,1],x:0,y:-1,o:1};case 7:return n&Ys?{p:[t.topright,1],x:0,y:-1,o:1}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 8:return n&Us?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[1,t.righttop],x:-1,y:0,o:1};case 9:return n&Ys?{p:[1,t.righttop],x:-1,y:0,o:1}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 10:return n&Ys?{p:[0,t.leftbottom],x:1,y:0,o:0}:{p:[1,t.righttop],x:-1,y:0,o:1};case 11:return n&js?{p:[1,t.righttop],x:-1,y:0,o:1}:{p:[0,t.lefttop],x:1,y:0,o:1};case 12:return n&Us?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[1,t.rightbottom],x:-1,y:0,o:0};case 13:return n&Ys?{p:[1,t.rightbottom],x:-1,y:0,o:0}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 14:return n&Ys?{p:[0,t.leftbottom],x:1,y:0,o:0}:{p:[1,t.rightbottom],x:-1,y:0,o:0};case 15:return n&js?{p:[1,t.rightbottom],x:-1,y:0,o:0}:{p:[0,t.lefttop],x:1,y:0,o:1};case 16:return n&Us?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[0,t.leftbottom],x:1,y:0,o:0};case 17:return n&js?{p:[t.bottomright,0],x:0,y:1,o:1}:{p:[0,t.lefttop],x:1,y:0,o:1};case 18:return n&Ys?{p:[0,t.leftbottom],x:1,y:0,o:0}:{p:[t.bottomleft,0],x:0,y:1,o:0};case 19:return n&js?{p:[t.bottomleft,0],x:0,y:1,o:0}:{p:[0,t.lefttop],x:1,y:0,o:1};case 20:return n&js?{p:[t.topleft,1],x:0,y:-1,o:0}:{p:[0,t.leftbottom],x:1,y:0,o:0};case 21:return n&Xs?{p:[0,t.leftbottom],x:1,y:0,o:0}:{p:[t.topright,1],x:0,y:-1,o:1};case 22:return n&js?{p:[t.topleft,1],x:0,y:-1,o:0}:{p:[0,t.lefttop],x:1,y:0,o:1};case 23:return n&Xs?{p:[0,t.lefttop],x:1,y:0,o:1}:{p:[t.topright,1],x:0,y:-1,o:1};default:console.log(\"MarchingSquaresJS-isoBands: edge index out of range!\"),console.log(t)}}return null}(a),c=null,h=s,l=o;null!==u&&i.push([u.p[0]+h,u.p[1]+l]);do{if(null===(c=function(t,e,n,r){var i,o,s,a,u,c=t.cval;switch(e){case-1:switch(r){case 0:i=Na[c],s=ea[c],a=na[c],u=ra[c];break;default:i=Ia[c],s=Qs[c],a=$s[c],u=ta[c]}break;case 1:switch(r){case 0:i=Ma[c],s=fa[c],a=ga[c],u=da[c];break;default:i=La[c],s=ha[c],a=la[c],u=pa[c]}break;default:switch(n){case-1:switch(r){case 0:i=Pa[c],s=Vs[c],a=Hs[c],u=Ws[c];break;default:i=Oa[c],s=Js[c],a=Zs[c],u=Ks[c]}break;case 1:switch(r){case 0:i=Sa[c],s=ia[c],a=oa[c],u=sa[c];break;default:i=Ca[c],s=aa[c],a=ua[c],u=ca[c]}}}{if(o=t.edges.indexOf(i),void 0===t.edges[o])return null;!function(t,e){delete t.edges[e];for(var n=e+1;n<t.edges.length;n++)t.edges[n-1]=t.edges[n];t.edges.pop()}(t,o)}switch(c=t.cval_real,i){case 0:c&Xs?(e=t.topleft,n=1):(e=1,n=t.righttop);break;case 1:c&Us?(e=1,n=t.rightbottom):(e=t.topleft,n=1);break;case 2:c&Us?(e=t.topleft,n=1):(e=t.bottomright,n=0);break;case 3:c&Ys?(e=t.bottomleft,n=0):(e=t.topleft,n=1);break;case 4:c&Xs?(e=t.topright,n=1):(e=1,n=t.righttop);break;case 5:c&Us?(e=1,n=t.rightbottom):(e=t.topright,n=1);break;case 6:c&Us?(e=t.topright,n=1):(e=t.bottomright,n=0);break;case 7:c&Ys?(e=t.bottomleft,n=0):(e=t.topright,n=1);break;case 8:c&Us?(e=1,n=t.righttop):(e=t.bottomright,n=0);break;case 9:c&Ys?(e=t.bottomleft,n=0):(e=1,n=t.righttop);break;case 10:c&Ys?(e=1,n=t.righttop):(e=0,n=t.leftbottom);break;case 11:c&js?(e=0,n=t.lefttop):(e=1,n=t.righttop);break;case 12:c&Us?(e=1,n=t.rightbottom):(e=t.bottomright,n=0);break;case 13:c&Ys?(e=t.bottomleft,n=0):(e=1,n=t.rightbottom);break;case 14:c&Ys?(e=1,n=t.rightbottom):(e=0,n=t.leftbottom);break;case 15:c&js?(e=0,n=t.lefttop):(e=1,n=t.rightbottom);break;case 16:c&Us?(e=0,n=t.leftbottom):(e=t.bottomright,n=0);break;case 17:c&js?(e=0,n=t.lefttop):(e=t.bottomright,n=0);break;case 18:c&Ys?(e=t.bottomleft,n=0):(e=0,n=t.leftbottom);break;case 19:c&js?(e=0,n=t.lefttop):(e=t.bottomleft,n=0);break;case 20:c&js?(e=0,n=t.leftbottom):(e=t.topleft,n=1);break;case 21:c&Xs?(e=t.topright,n=1):(e=0,n=t.leftbottom);break;case 22:c&js?(e=0,n=t.lefttop):(e=t.topleft,n=1);break;case 23:c&Xs?(e=t.topright,n=1):(e=0,n=t.lefttop);break;default:return console.log(\"MarchingSquaresJS-isoBands: edge index out of range!\"),console.log(t),null}void 0!==e&&void 0!==n&&void 0!==s&&void 0!==a&&void 0!==u||(console.log(\"MarchingSquaresJS-isoBands: undefined value!\"),console.log(t),console.log(e+\" \"+n+\" \"+s+\" \"+a+\" \"+u));return{p:[e,n],x:s,y:a,o:u}}(t.cells[l][h],u.x,u.y,u.o)))break;if(i.push([c.p[0]+h,c.p[1]+l]),h+=c.x,l+=c.y,u=c,l<0||l>=n||h<0||h>=r||void 0===t.cells[l][h]){h-=c.x,l-=c.y;var p=function(t,e,n,r,i,o){var s=t.cells[n][e],a=s.cval_real,u=e+r,c=n+i,h=[],l=!1;for(;!l;){if(void 0===t.cells[c]||void 0===t.cells[c][u])if(c-=i,u-=r,s=t.cells[c][u],a=s.cval_real,-1===i)if(0===o)if(a&Ys)h.push([u,c]),r=-1,i=0,o=0;else{if(!(a&Us)){h.push([u+s.bottomright,c]),r=0,i=1,o=1,l=!0;break}h.push([u+1,c]),r=1,i=0,o=0}else{if(!(a&Ys)){if(a&Us){h.push([u+s.bottomright,c]),r=0,i=1,o=1,l=!0;break}h.push([u+s.bottomleft,c]),r=0,i=1,o=0,l=!0;break}h.push([u,c]),r=-1,i=0,o=0}else if(1===i)if(0===o){if(!(a&Xs)){if(a&js){h.push([u+s.topleft,c+1]),r=0,i=-1,o=0,l=!0;break}h.push([u+s.topright,c+1]),r=0,i=-1,o=1,l=!0;break}h.push([u+1,c+1]),r=1,i=0,o=1}else h.push([u+1,c+1]),r=1,i=0,o=1;else if(-1===r)if(0===o){if(!(a&js)){if(a&Ys){h.push([u,c+s.leftbottom]),r=1,i=0,o=0,l=!0;break}h.push([u,c+s.lefttop]),r=1,i=0,o=1,l=!0;break}h.push([u,c+1]),r=0,i=1,o=0}else{if(!(a&js)){console.log(\"MarchingSquaresJS-isoBands: wtf\");break}h.push([u,c+1]),r=0,i=1,o=0}else{if(1!==r){console.log(\"MarchingSquaresJS-isoBands: we came from nowhere!\");break}if(0===o){if(!(a&Us)){h.push([u+1,c+s.rightbottom]),r=-1,i=0,o=0,l=!0;break}h.push([u+1,c]),r=0,i=-1,o=1}else{if(!(a&Us)){if(a&Xs){h.push([u+1,c+s.righttop]),r=-1,i=0,o=1;break}h.push([u+1,c+s.rightbottom]),r=-1,i=0,o=0,l=!0;break}h.push([u+1,c]),r=0,i=-1,o=1}}else if(s=t.cells[c][u],a=s.cval_real,-1===r)if(0===o)if(void 0!==t.cells[c-1]&&void 0!==t.cells[c-1][u])r=0,i=-1,o=1;else{if(!(a&Ys)){h.push([u+s.bottomright,c]),r=0,i=1,o=1,l=!0;break}h.push([u,c])}else{if(!(a&js)){console.log(\"MarchingSquaresJS-isoBands: found entry from top at \"+u+\",\"+c);break}console.log(\"MarchingSquaresJS-isoBands: proceeding in x-direction!\")}else if(1===r){if(0===o){console.log(\"MarchingSquaresJS-isoBands: wtf\");break}if(void 0!==t.cells[c+1]&&void 0!==t.cells[c+1][u])r=0,i=1,o=0;else{if(!(a&Xs)){h.push([u+s.topleft,c+1]),r=0,i=-1,o=0,l=!0;break}h.push([u+1,c+1]),r=1,i=0,o=1}}else if(-1===i){if(1!==o){console.log(\"MarchingSquaresJS-isoBands: wtf\");break}if(void 0!==t.cells[c][u+1])r=1,i=0,o=1;else{if(!(a&Us)){h.push([u+1,c+s.righttop]),r=-1,i=0,o=1,l=!0;break}h.push([u+1,c]),r=0,i=-1,o=1}}else{if(1!==i){console.log(\"MarchingSquaresJS-isoBands: where did we came from???\");break}if(0!==o){console.log(\"MarchingSquaresJS-isoBands: wtf\");break}if(void 0!==t.cells[c][u-1])r=-1,i=0,o=0;else{if(!(a&js)){h.push([u,c+s.leftbottom]),r=1,i=0,o=0,l=!0;break}h.push([u,c+1]),r=0,i=1,o=0}}if(u+=r,c+=i,u===e&&c===n)break}return{path:h,i:u,j:c,x:r,y:i,o:o}}(t,h,l,c.x,c.y,c.o);if(null===p)break;p.path.forEach(function(t){i.push(t)}),h=p.i,l=p.j,u=p}}while(void 0!==t.cells[l][h]&&t.cells[l][h].edges.length>0);e.push(i),i=[],t.cells[o][s].edges.length>0&&s--}return e}(c)),\"function\"==typeof zs.successCallback&&zs.successCallback(u),u}function lr(t,e,n){return(t-e)/(n-e)}function pr(t){return t.constructor.toString().indexOf(\"Array\")>-1}function fr(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.pivot,i=n.mutate;if(!t)throw new Error(\"geojson is required\");if(void 0===e||null===e||isNaN(e))throw new Error(\"angle is required\");return 0===e?t:(r||(r=ye(t)),!1!==i&&void 0!==i||(t=Gt(t)),S(t,function(t){var n=sn(r,t)+e,i=un(r,t),o=U(nr(r,i,n));t[0]=o[0],t[1]=o[1]}),t)}function gr(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.origin,i=n.mutate;if(!t)throw new Error(\"geojson required\");if(\"number\"!=typeof e||0===e)throw new Error(\"invalid factor\");var o=Array.isArray(r)||\"object\"==typeof r;return!0!==i&&(t=Gt(t)),\"FeatureCollection\"!==t.type||o?dr(t,e,r):(O(t,function(n,i){t.features[i]=dr(n,e,r)}),t)}function dr(t,e,n){var i=\"Point\"===K(t);return n=function(t,e){void 0!==e&&null!==e||(e=\"centroid\");if(Array.isArray(e)||\"object\"==typeof e)return X(e);var n=t.bbox?t.bbox:j(t),i=n[0],o=n[1],s=n[2],a=n[3];switch(e){case\"sw\":case\"southwest\":case\"westsouth\":case\"bottomleft\":return r([i,o]);case\"se\":case\"southeast\":case\"eastsouth\":case\"bottomright\":return r([s,o]);case\"nw\":case\"northwest\":case\"westnorth\":case\"topleft\":return r([i,a]);case\"ne\":case\"northeast\":case\"eastnorth\":case\"topright\":return r([s,a]);case\"center\":return de(t);case void 0:case null:case\"centroid\":return ye(t);default:throw new Error(\"invalid origin\")}}(t,n),1===e||i?t:(S(t,function(t){var r=un(n,t),i=sn(n,t),o=U(nr(n,r*e,i));t[0]=o[0],t[1]=o[1],3===t.length&&(t[2]*=e)}),t)}function yr(t){var e=t[0],n=t[1];return[n[0]-e[0],n[1]-e[1]]}function _r(t,e){return t[0]*e[1]-e[0]*t[1]}function mr(t,e){return!function(t,e){return 0===_r(yr(t),yr(e))}(t,e)&&function(t,e){var n=t[0],r=yr(t),i=e[0],o=yr(e),s=_r(r,o);return function(t,e){return[t[0]+e[0],t[1]+e[1]]}(n,function(t,e){return[t*e[0],t*e[1]]}(_r(function(t,e){return[t[0]-e[0],t[1]-e[1]]}(i,n),o)/s,r))}(t,e)}function vr(t,e,n){var r=[],i=_(e,n),o=U(t),s=[];return o.forEach(function(t,e){if(e!==o.length-1){var n=function(t,e,n){var r=Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])),i=t[0]+n*(e[1]-t[1])/r,o=e[0]+n*(e[1]-t[1])/r,s=t[1]+n*(t[0]-e[0])/r,a=e[1]+n*(t[0]-e[0])/r;return[[i,s],[o,a]]}(t,o[e+1],i);if(r.push(n),e>0){var a=r[e-1],u=mr(n,a);!1!==u&&(a[1]=u,n[0]=u),s.push(a[0]),e===o.length-2&&(s.push(n[0]),s.push(n[1]))}2===o.length&&(s.push(n[0]),s.push(n[1]))}}),a(s,t.properties)}function xr(t,e,n){var r=e[0]-t[0],i=e[1]-t[1],o=n[0]-e[0],s=n[1]-e[1];return Math.sign(r*s-o*i)}function Er(t,e){return e.geometry.coordinates[0].every(function(e){return Pt(r(e),t)})}function wr(t,e){for(var n=0;n<t.coordinates.length-1;n++)if(function(t,e,n){var r=n[0]-t[0],i=n[1]-t[1],o=e[0]-t[0],s=e[1]-t[1];if(r*s-i*o!=0)return!1;return Math.abs(o)>=Math.abs(s)?o>0?t[0]<=n[0]&&n[0]<=e[0]:e[0]<=n[0]&&n[0]<=t[0]:s>0?t[1]<=n[1]&&n[1]<=e[1]:e[1]<=n[1]&&n[1]<=t[1]}(t.coordinates[n],t.coordinates[n+1],e.coordinates))return!0;return!1}function br(t,e){return nn(e,kn(t)).features.length>0}function Ir(t,e){return!(t[0]>e[0])&&(!(t[2]<e[2])&&(!(t[1]>e[1])&&!(t[3]<e[3])))}function Nr(t,e){return t[0]===e[0]&&t[1]===e[1]}function Cr(t,e){for(var n=!1,r=!1,i=t.coordinates.length,o=0;o<i&&!n&&!r;){for(var s=0;s<e.coordinates.length-1;s++){var a=!0;0!==s&&s!==e.coordinates.length-2||(a=!1),Lr(e.coordinates[s],e.coordinates[s+1],t.coordinates[o],a)?n=!0:r=!0}o++}return n&&r}function Sr(t,e){return nn(t,kn(e)).features.length>0}function Mr(t,e){for(var n=!1,i=!1,o=t.coordinates[0].length,s=0;s<o&&n&&i;)Pt(r(t.coordinates[0][s]),e)?n=!0:i=!0,s++;return i&&i}function Lr(t,e,n,r){var i=n[0]-t[0],o=n[1]-t[1],s=e[0]-t[0],a=e[1]-t[1];return 0==i*a-o*s&&(r?Math.abs(s)>=Math.abs(a)?s>0?t[0]<=n[0]&&n[0]<=e[0]:e[0]<=n[0]&&n[0]<=t[0]:a>0?t[1]<=n[1]&&n[1]<=e[1]:e[1]<=n[1]&&n[1]<=t[1]:Math.abs(s)>=Math.abs(a)?s>0?t[0]<n[0]&&n[0]<e[0]:e[0]<n[0]&&n[0]<t[0]:a>0?t[1]<n[1]&&n[1]<e[1]:e[1]<n[1]&&n[1]<t[1])}function Pr(t){return t.coordinates.map(function(e){return{type:t.type.replace(\"Multi\",\"\"),coordinates:e}})}function Or(t,e){return t.hasOwnProperty(\"coordinates\")?t.coordinates.length===e.coordinates.length:t.length===e.length}function Rr(t,e){return ka(t,e,{strict:!0})}function Tr(t,e){if(!t)throw new Error(\"feature1 is required\");if(!e)throw new Error(\"feature2 is required\");var n=K(t);if(n!==K(e))throw new Error(\"features must be of the same type\");if(\"Point\"===n)throw new Error(\"Point geometry not supported\");if(new ja({precision:6}).compare(t,e))return!1;var r=0;switch(n){case\"MultiPoint\":var i=T(t),o=T(e);i.forEach(function(t){o.forEach(function(e){t[0]===e[0]&&t[1]===e[1]&&r++})});break;case\"LineString\":case\"MultiLineString\":G(t,function(t){G(e,function(e){$n(t,e).features.length&&r++})});break;case\"Polygon\":case\"MultiPolygon\":G(t,function(t){G(e,function(e){nn(t,e).features.length&&r++})})}return r>0}function Ar(t,e,n){n=n||[];for(var r=0;r<t;r++)n[r]=e;return n}function Dr(t,e){if(t.geometry&&t.geometry.type)return t.geometry.type;if(t.type)return t.type;throw new Error(\"Invalid GeoJSON object for \"+e)}function Fr(t){for(var e=t,n=[];e.parent;)n.unshift(e),e=e.parent;return n}function qr(t,e){e=e||{},this.nodes=[],this.diagonal=!!e.diagonal,this.grid=[];for(var n=0;n<t.length;n++){this.grid[n]=[];for(var r=0,i=t[n];r<i.length;r++){var o=new Gr(n,r,i[r]);this.grid[n][r]=o,this.nodes.push(o)}}this.init()}function Gr(t,e,n){this.x=t,this.y=e,this.weight=n}function Br(t){this.content=[],this.scoreFunction=t}function kr(t){return t[0]}function zr(t){return t[1]}function jr(){this._=null}function Xr(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Ur(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Yr(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Vr(t){for(;t.L;)t=t.L;return t}function Hr(t,e,n,r){var i=[null,null],o=uu.push(i)-1;return i.left=t,i.right=e,n&&Jr(i,t,e,n),r&&Jr(i,e,t,r),su[t.index].halfedges.push(o),su[e.index].halfedges.push(o),i}function Wr(t,e,n){var r=[e,n];return r.left=t,r}function Jr(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Zr(t,e,n,r,i){var o,s=t[0],a=t[1],u=s[0],c=s[1],h=0,l=1,p=a[0]-u,f=a[1]-c;if(o=e-u,p||!(o>0)){if(o/=p,p<0){if(o<h)return;o<l&&(l=o)}else if(p>0){if(o>l)return;o>h&&(h=o)}if(o=r-u,p||!(o<0)){if(o/=p,p<0){if(o>l)return;o>h&&(h=o)}else if(p>0){if(o<h)return;o<l&&(l=o)}if(o=n-c,f||!(o>0)){if(o/=f,f<0){if(o<h)return;o<l&&(l=o)}else if(f>0){if(o>l)return;o>h&&(h=o)}if(o=i-c,f||!(o<0)){if(o/=f,f<0){if(o>l)return;o>h&&(h=o)}else if(f>0){if(o<h)return;o<l&&(l=o)}return!(h>0||l<1)||(h>0&&(t[0]=[u+h*p,c+h*f]),l<1&&(t[1]=[u+l*p,c+l*f]),!0)}}}}}function Kr(t,e,n,r,i){var o=t[1];if(o)return!0;var s,a,u=t[0],c=t.left,h=t.right,l=c[0],p=c[1],f=h[0],g=h[1],d=(l+f)/2,y=(p+g)/2;if(g===p){if(d<e||d>=r)return;if(l>f){if(u){if(u[1]>=i)return}else u=[d,n];o=[d,i]}else{if(u){if(u[1]<n)return}else u=[d,i];o=[d,n]}}else if(s=(l-f)/(g-p),a=y-s*d,s<-1||s>1)if(l>f){if(u){if(u[1]>=i)return}else u=[(n-a)/s,n];o=[(i-a)/s,i]}else{if(u){if(u[1]<n)return}else u=[(i-a)/s,i];o=[(n-a)/s,n]}else if(p<g){if(u){if(u[0]>=r)return}else u=[e,s*e+a];o=[r,s*r+a]}else{if(u){if(u[0]<e)return}else u=[r,s*r+a];o=[e,s*e+a]}return t[0]=u,t[1]=o,!0}function Qr(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function $r(t,e){return e[+(e.left!==t.site)]}function ti(t,e){return e[+(e.left===t.site)]}function ei(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var s=i[0],a=i[1],u=r[0]-s,c=r[1]-a,h=o[0]-s,l=o[1]-a,p=2*(u*l-c*h);if(!(p>=-pu)){var f=u*u+c*c,g=h*h+l*l,d=(l*f-c*g)/p,y=(u*g-h*f)/p,_=cu.pop()||new function(){Xr(this),this.x=this.y=this.arc=this.site=this.cy=null};_.arc=t,_.site=i,_.x=d+s,_.y=(_.cy=y+a)+Math.sqrt(d*d+y*y),t.circle=_;for(var m=null,v=au._;v;)if(_.y<v.y||_.y===v.y&&_.x<=v.x){if(!v.L){m=v.P;break}v=v.L}else{if(!v.R){m=v;break}v=v.R}au.insert(m,_),m||(iu=_)}}}}function ni(t){var e=t.circle;e&&(e.P||(iu=e.N),au.remove(e),cu.push(e),Xr(e),t.circle=null)}function ri(t){var e=hu.pop()||new function(){Xr(this),this.edge=this.site=this.circle=null};return e.site=t,e}function ii(t){ni(t),ou.remove(t),hu.push(t),Xr(t)}function oi(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,s=t.N,a=[t];ii(t);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<lu&&Math.abs(r-u.circle.cy)<lu;)o=u.P,a.unshift(u),ii(u),u=o;a.unshift(u),ni(u);for(var c=s;c.circle&&Math.abs(n-c.circle.x)<lu&&Math.abs(r-c.circle.cy)<lu;)s=c.N,a.push(c),ii(c),c=s;a.push(c),ni(c);var h,l=a.length;for(h=1;h<l;++h)c=a[h],u=a[h-1],Jr(c.edge,u.site,c.site,i);u=a[0],(c=a[l-1]).edge=Hr(u.site,c.site,null,i),ei(u),ei(c)}function si(t){for(var e,n,r,i,o=t[0],s=t[1],a=ou._;a;)if((r=ai(a,s)-o)>lu)a=a.L;else{if(!((i=o-function(t,e){var n=t.N;if(n)return ai(n,e);var r=t.site;return r[1]===e?r[0]:1/0}(a,s))>lu)){r>-lu?(e=a.P,n=a):i>-lu?(e=a,n=a.N):e=n=a;break}if(!a.R){e=a;break}a=a.R}!function(t){su[t.index]={site:t,halfedges:[]}}(t);var u=ri(t);if(ou.insert(e,u),e||n){if(e===n)return ni(e),n=ri(e.site),ou.insert(u,n),u.edge=n.edge=Hr(e.site,u.site),ei(e),void ei(n);if(n){ni(e),ni(n);var c=e.site,h=c[0],l=c[1],p=t[0]-h,f=t[1]-l,g=n.site,d=g[0]-h,y=g[1]-l,_=2*(p*y-f*d),m=p*p+f*f,v=d*d+y*y,x=[(y*m-f*v)/_+h,(p*v-d*m)/_+l];Jr(n.edge,c,g,x),u.edge=Hr(c,t,null,x),n.edge=Hr(t,g,null,x),ei(e),ei(n)}else u.edge=Hr(e.site,u.site)}}function ai(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var s=t.P;if(!s)return-1/0;var a=(n=s.site)[0],u=n[1],c=u-e;if(!c)return a;var h=a-r,l=1/o-1/c,p=h/c;return l?(-p+Math.sqrt(p*p-2*l*(h*h/(-2*c)-u+c/2+i-o/2)))/l+r:(r+a)/2}function ui(t,e,n){return(t[0]-n[0])*(e[1]-t[1])-(t[0]-e[0])*(n[1]-t[1])}function ci(t,e){return e[1]-t[1]||e[0]-t[0]}function hi(t,e){var n,r,i,o=t.sort(ci).pop();for(uu=[],su=new Array(t.length),ou=new jr,au=new jr;;)if(i=iu,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(si(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;oi(i.arc)}if(function(){for(var t,e,n,r,i=0,o=su.length;i<o;++i)if((t=su[i])&&(r=(e=t.halfedges).length)){var s=new Array(r),a=new Array(r);for(n=0;n<r;++n)s[n]=n,a[n]=Qr(t,uu[e[n]]);for(s.sort(function(t,e){return a[e]-a[t]}),n=0;n<r;++n)a[n]=e[s[n]];for(n=0;n<r;++n)e[n]=a[n]}}(),e){var s=+e[0][0],a=+e[0][1],u=+e[1][0],c=+e[1][1];!function(t,e,n,r){for(var i,o=uu.length;o--;)Kr(i=uu[o],t,e,n,r)&&Zr(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>lu||Math.abs(i[0][1]-i[1][1])>lu)||delete uu[o]}(s,a,u,c),function(t,e,n,r){var i,o,s,a,u,c,h,l,p,f,g,d,y=su.length,_=!0;for(i=0;i<y;++i)if(o=su[i]){for(s=o.site,a=(u=o.halfedges).length;a--;)uu[u[a]]||u.splice(a,1);for(a=0,c=u.length;a<c;)g=(f=ti(o,uu[u[a]]))[0],d=f[1],l=(h=$r(o,uu[u[++a%c]]))[0],p=h[1],(Math.abs(g-l)>lu||Math.abs(d-p)>lu)&&(u.splice(a,0,uu.push(Wr(s,f,Math.abs(g-t)<lu&&r-d>lu?[t,Math.abs(l-t)<lu?p:r]:Math.abs(d-r)<lu&&n-g>lu?[Math.abs(p-r)<lu?l:n,r]:Math.abs(g-n)<lu&&d-e>lu?[n,Math.abs(l-n)<lu?p:e]:Math.abs(d-e)<lu&&g-t>lu?[Math.abs(p-e)<lu?l:t,e]:null))-1),++c);c&&(_=!1)}if(_){var m,v,x,E=1/0;for(i=0,_=null;i<y;++i)(o=su[i])&&(x=(m=(s=o.site)[0]-t)*m+(v=s[1]-e)*v)<E&&(E=x,_=o);if(_){var w=[t,e],b=[t,r],I=[n,r],N=[n,e];_.halfedges.push(uu.push(Wr(s=_.site,w,b))-1,uu.push(Wr(s,b,I))-1,uu.push(Wr(s,I,N))-1,uu.push(Wr(s,N,w))-1)}}for(i=0;i<y;++i)(o=su[i])&&(o.halfedges.length||delete su[i])}(s,a,u,c)}this.edges=uu,this.cells=su,ou=au=uu=su=null}function li(t){return(t=t.slice()).push(t[0]),o([t])}function pi(t,e,n,r){var i=(r=r||{}).steps||64,s=r.units||\"kilometers\",a=r.angle||0,u=r.pivot||t,c=r.properties||t.properties||{};if(!t)throw new Error(\"center is required\");if(!e)throw new Error(\"xSemiAxis is required\");if(!n)throw new Error(\"ySemiAxis is required\");if(!I(r))throw new Error(\"options must be an object\");if(!b(i))throw new Error(\"steps must be a number\");if(!b(a))throw new Error(\"angle must be a number\");var h=X(t);if(\"degrees\"===s)var l=x(a);else e=nr(t,e,90,{units:s}),n=nr(t,n,0,{units:s}),e=X(e)[0]-h[0],n=X(n)[1]-h[1];for(var p=[],f=0;f<i;f+=1){var g=-360*f/i,d=e*n/Math.sqrt(Math.pow(n,2)+Math.pow(e,2)*Math.pow(fi(g),2)),y=e*n/Math.sqrt(Math.pow(e,2)+Math.pow(n,2)/Math.pow(fi(g),2));if(g<-90&&g>=-270&&(d=-d),g<-180&&g>=-360&&(y=-y),\"degrees\"===s){var _=d*Math.cos(l)+y*Math.sin(l),m=y*Math.cos(l)-d*Math.sin(l);d=_,y=m}p.push([d+h[0],y+h[1]])}return p.push(p[0]),\"degrees\"===s?o([p],c):fr(o([p],c),a,{pivot:u})}function fi(t){var e=t*Math.PI/180;return Math.tan(e)}function gi(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.properties,i=e.weight;if(!t)throw new Error(\"geojson is required\");var o=0,s=0,a=0;return A(t,function(t,e,n){var r=n[i];if(r=void 0===r||null===r?1:r,!b(r))throw new Error(\"weight value must be a number for feature index \"+e);(r=Number(r))>0&&S(t,function(t){o+=t[0]*r,s+=t[1]*r,a+=r})}),r([o/a,s/a],n)}function di(t,e,n,i){var o=n.properties.tolerance||.001,s=0,a=0,u=0,c=0;if(O(n,function(e){var n=e.properties.weight,r=void 0===n||null===n?1:n;if(r=Number(r),!b(r))throw new Error(\"weight value must be a number\");if(r>0){c+=1;var i=r*qt(e,t);0===i&&(i=1);var o=r/i;s+=e.geometry.coordinates[0]*o,a+=e.geometry.coordinates[1]*o,u+=o}}),c<1)throw new Error(\"no features to measure\");var h=s/u,l=a/u;return 1===c||0===i||Math.abs(h-e[0])<o&&Math.abs(l-e[1])<o?r([h,l],{medianCandidates:n.properties.medianCandidates}):(n.properties.medianCandidates.push([h,l]),di([h,l],t,n,i-1))}function yi(t,e){return{x:t[0]-e[0],y:t[1]-e[1]}}function _i(t){if(I(t)&&(t=t.bbox),t&&!Array.isArray(t))throw new Error(\"bbox is invalid\");return t?function(t){return[Math.random()*(t[2]-t[0])+t[0],Math.random()*(t[3]-t[1])+t[1]]}(t):[360*Ei(),180*Ei()]}function mi(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.bbox;void 0!==t&&null!==t||(t=1);for(var i=[],o=0;o<t;o++)i.push(r(_i(n)));return c(i)}function vi(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.bbox,r=e.num_vertices,i=e.max_radial_length;void 0!==t&&null!==t||(t=1),b(r)||(r=10),b(i)||(i=10);for(var s=[],a=0;a<t;a++){var u=[],h=Array.apply(null,new Array(r+1)).map(Math.random);h.forEach(function(t,e,n){n[e]=e>0?t+n[e-1]:t}),h.forEach(function(t){t=2*t*Math.PI/h[h.length-1];var e=Math.random();u.push([e*i*Math.sin(t),e*i*Math.cos(t)])}),u[u.length-1]=u[0],u=u.map(function(t){return function(e){return[e[0]+t[0],e[1]+t[1]]}}(_i(n))),s.push(o([u]))}return c(s)}function xi(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.bbox,r=e.num_vertices,i=e.max_length,o=e.max_rotation;void 0!==t&&null!==t||(t=1),(!b(r)||r<2)&&(r=10),b(i)||(i=1e-4),b(o)||(o=Math.PI/8);for(var s=[],u=0;u<t;u++){for(var h=[_i(n)],l=0;l<r-1;l++){var p=(0===l?2*Math.random()*Math.PI:Math.tan((h[l][1]-h[l-1][1])/(h[l][0]-h[l-1][0])))+(Math.random()-.5)*o*2,f=Math.random()*i;h.push([h[l][0]+f*Math.cos(p),h[l][1]+f*Math.sin(p)])}s.push(a(h))}return c(s)}function Ei(){return Math.random()-.5}function wi(t,e){if(!t)throw new Error(\"geojson is required\");if(\"FeatureCollection\"!==t.type)throw new Error(\"geojson must be a FeatureCollection\");if(void 0===e||null===e)throw new Error(\"filter is required\");var n=[];return O(t,function(t){Ci(t.properties,e)&&n.push(t)}),c(n)}function bi(t,e,n){if(!t)throw new Error(\"geojson is required\");if(\"FeatureCollection\"!==t.type)throw new Error(\"geojson must be a FeatureCollection\");if(void 0===e||null===e)throw new Error(\"property is required\");for(var r=Ni(t,e),i=Object.keys(r),o=0;o<i.length;o++){for(var s=i[o],a=r[s],u=[],h=0;h<a.length;h++)u.push(t.features[a[h]]);n(c(u),s,o)}}function Ii(t,e,n,r){var i=r;return bi(t,e,function(t,e,o){i=0===o&&void 0===r?t:n(i,t,e,o)}),i}function Ni(t,e){var n={};return O(t,function(t,r){var i=t.properties||{};if(i.hasOwnProperty(e)){var o=i[e];n.hasOwnProperty(o)?n[o].push(r):n[o]=[r]}}),n}function Ci(t,e){if(void 0===t)return!1;var n=typeof e;if(\"number\"===n||\"string\"===n)return t.hasOwnProperty(e);if(Array.isArray(e)){for(var r=0;r<e.length;r++)if(!Ci(t,e[r]))return!1;return!0}return Si(t,e)}function Si(t,e){for(var n=Object.keys(e),r=0;r<n.length;r++){var i=n[r];if(t[i]!==e[i])return!1}return!0}function Mi(t,e){if(!e)return{};if(!e.length)return{};for(var n={},r=0;r<e.length;r++){var i=e[r];t.hasOwnProperty(i)&&(n[i]=t[i])}return n}function Li(){}function Pi(t){this.message=t||\"\"}function Oi(t){this.message=t||\"\"}function Ri(){}function Ti(t){return null===t?Ac:t.color}function Ai(t){return null===t?null:t.parent}function Di(t,e){null!==t&&(t.color=e)}function Fi(t){return null===t?null:t.left}function qi(t){return null===t?null:t.right}function Gi(){this.root_=null,this.size_=0}function Bi(){}function ki(){this.array_=[],arguments[0]instanceof vc&&this.addAll(arguments[0])}function zi(){}function ji(t){this.message=t||\"\"}function Xi(){this.array_=[]}function Ui(t){switch(t.type){case\"Polygon\":return mn(t)>1?t:null;case\"MultiPolygon\":var e=[];if(F(t,function(t){mn(t)>1&&e.push(t.geometry.coordinates)}),e.length)return{type:\"MultiPolygon\",coordinates:e}}}function Yi(){this.reset()}function Vi(t,e,n){var r=t.s=e+n,i=r-e,o=r-i;t.t=e-o+(n-i)}function Hi(t){return t>1?kf:t<-1?-kf:Math.asin(t)}function Wi(){}function Ji(t,e){t&&eg.hasOwnProperty(t.type)&&eg[t.type](t,e)}function Zi(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function Ki(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)Zi(t[n],e,1);e.polygonEnd()}function Qi(t){return[Hf(t[1],t[0]),Hi(t[2])]}function $i(t){var e=t[0],n=t[1],r=Wf(n);return[r*Wf(e),r*Kf(e),Kf(n)]}function to(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function eo(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function no(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function ro(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function io(t){var e=Qf(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function oo(t,e){return[t>Bf?t-jf:t<-Bf?t+jf:t,e]}function so(t,e,n){return(t%=jf)?e||n?rg(uo(t),co(e,n)):uo(t):e||n?co(e,n):oo}function ao(t){return function(e,n){return e+=t,[e>Bf?e-jf:e<-Bf?e+jf:e,n]}}function uo(t){var e=ao(t);return e.invert=ao(-t),e}function co(t,e){function n(t,e){var n=Wf(e),a=Wf(t)*n,u=Kf(t)*n,c=Kf(e),h=c*r+a*i;return[Hf(u*o-h*s,a*r-c*i),Hi(h*o+u*s)]}var r=Wf(t),i=Kf(t),o=Wf(e),s=Kf(e);return n.invert=function(t,e){var n=Wf(e),a=Wf(t)*n,u=Kf(t)*n,c=Kf(e),h=c*o-u*s;return[Hf(u*o+c*s,a*r+h*i),Hi(h*r-a*i)]},n}function ho(t,e){(e=$i(e))[0]-=t,io(e);var n=function(t){return t>1?0:t<-1?Bf:Math.acos(t)}(-e[1]);return((-e[2]<0?-n:n)+jf-Gf)%jf}function lo(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function po(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function fo(t,e,n,r){function i(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function o(i,o,a,c){var h=0,l=0;if(null==i||(h=s(i,a))!==(l=s(o,a))||u(i,o)<0^a>0)do{c.point(0===h||3===h?t:n,h>1?r:e)}while((h=(h+a+4)%4)!==l);else c.point(o[0],o[1])}function s(r,i){return Yf(r[0]-t)<Gf?i>0?0:3:Yf(r[0]-n)<Gf?i>0?2:1:Yf(r[1]-e)<Gf?i>0?1:0:i>0?3:2}function a(t,e){return u(t.x,e.x)}function u(t,e){var n=s(t,1),r=s(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(s){function u(t,e){i(t,e)&&E.point(t,e)}function c(o,s){var a=i(o,s);if(l&&p.push([o,s]),v)f=o,g=s,d=a,v=!1,a&&(E.lineStart(),E.point(o,s));else if(a&&m)E.point(o,s);else{var u=[y=Math.max(pg,Math.min(lg,y)),_=Math.max(pg,Math.min(lg,_))],c=[o=Math.max(pg,Math.min(lg,o)),s=Math.max(pg,Math.min(lg,s))];sg(u,c,t,e,n,r)?(m||(E.lineStart(),E.point(u[0],u[1])),E.point(c[0],c[1]),a||E.lineEnd(),x=!1):a&&(E.lineStart(),E.point(o,s),x=!1)}y=o,_=s,m=a}var h,l,p,f,g,d,y,_,m,v,x,E=s,w=og(),b={point:u,lineStart:function(){b.point=c,l&&l.push(p=[]),v=!0,m=!1,y=_=NaN},lineEnd:function(){h&&(c(f,g),d&&m&&w.rejoin(),h.push(w.result())),b.point=u,m&&E.lineEnd()},polygonStart:function(){E=w,h=[],l=[],x=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,i=l.length;n<i;++n)for(var o,s,a=l[n],u=1,c=a.length,h=a[0],p=h[0],f=h[1];u<c;++u)o=p,s=f,p=(h=a[u])[0],f=h[1],s<=r?f>r&&(p-o)*(r-s)>(f-s)*(t-o)&&++e:f<=r&&(p-o)*(r-s)<(f-s)*(t-o)&&--e;return e}(),n=x&&e,i=(h=hg(h)).length;(n||i)&&(s.polygonStart(),n&&(s.lineStart(),o(null,null,1,s),s.lineEnd()),i&&ug(h,a,e,o,s),s.polygonEnd()),E=s,h=l=p=null}};return b}}function go(t){return t.length>1}function yo(t,e){return((t=t.x)[0]<0?t[1]-kf-Gf:kf-t[1])-((e=e.x)[0]<0?e[1]-kf-Gf:kf-e[1])}function _o(t){return function(e){var n=new mo;for(var r in t)n[r]=t[r];return n.stream=e,n}}function mo(){}function vo(t,e,n){var r=e[1][0]-e[0][0],i=e[1][1]-e[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),ng(n,t.stream(vg));var s=vg.result(),a=Math.min(r/(s[1][0]-s[0][0]),i/(s[1][1]-s[0][1])),u=+e[0][0]+(r-a*(s[1][0]+s[0][0]))/2,c=+e[0][1]+(i-a*(s[1][1]+s[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*a).translate([u,c])}function xo(t){return function(t){function e(t){return t=c(t[0]*Uf,t[1]*Uf),[t[0]*d+s,a-t[1]*d]}function n(t,e){return t=o(t,e),[t[0]*d+s,a-t[1]*d]}function r(){c=rg(u=so(x,E,w),o);var t=o(m,v);return s=y-t[0]*d,a=_+t[1]*d,i()}function i(){return f=g=null,e}var o,s,a,u,c,h,l,p,f,g,d=150,y=480,_=250,m=0,v=0,x=0,E=0,w=0,b=null,I=Eg,N=null,C=gg,S=.5,M=Ng(n,S);e.stream=function(t){return f&&g===t?f:f=Cg(I(u,M(C(g=t))))},e.clipAngle=function(t){return arguments.length?(I=+t?wg(b=t*Uf,6*Uf):(b=null,Eg),i()):b*Xf},e.clipExtent=function(t){return arguments.length?(C=null==t?(N=h=l=p=null,gg):fo(N=+t[0][0],h=+t[0][1],l=+t[1][0],p=+t[1][1]),i()):null==N?null:[[N,h],[l,p]]},e.scale=function(t){return arguments.length?(d=+t,r()):d},e.translate=function(t){return arguments.length?(y=+t[0],_=+t[1],r()):[y,_]},e.center=function(t){return arguments.length?(m=t[0]%360*Uf,v=t[1]%360*Uf,r()):[m*Xf,v*Xf]},e.rotate=function(t){return arguments.length?(x=t[0]%360*Uf,E=t[1]%360*Uf,w=t.length>2?t[2]%360*Uf:0,r()):[x*Xf,E*Xf,w*Xf]},e.precision=function(t){return arguments.length?(M=Ng(n,S=t*t),i()):Qf(S)},e.fitExtent=function(t,n){return vo(e,t,n)},e.fitSize=function(t,n){return function(t,e,n){return vo(t,[[0,0],e],n)}(e,t,n)};return function(){return o=t.apply(this,arguments),e.invert=o.invert&&function(t){return(t=c.invert((t[0]-s)/d,(a-t[1])/d))&&[t[0]*Xf,t[1]*Xf]},r()}}(function(){return t})()}function Eo(t,e){return[t,Zf($f((kf+e)/2))]}function wo(t,e){return[Zf($f((kf+e)/2)),-t]}function bo(t,n,r,i){var o=t.properties||{},s=\"Feature\"===t.type?t.geometry:t;if(\"GeometryCollection\"===s.type){var a=[];return A(t,function(t){var e=bo(t,n,r,i);e&&a.push(e)}),c(a)}var u,h=j(t),l=h[1]>50&&h[3]>50;u=l?{type:s.type,coordinates:No(s.coordinates,So(s))}:cn(s);var p=(new bh).read(u),f=d(y(n,r),\"meters\"),g=gp.bufferOp(p,f);if(g=(new Ih).write(g),!Io(g.coordinates)){var _;return(_=l?{type:g.type,coordinates:Co(g.coordinates,So(s))}:hn(g)).geometry?_:e(_,o)}}function Io(t){return Array.isArray(t[0])?Io(t[0]):isNaN(t[0])}function No(t,e){return\"object\"!=typeof t[0]?e(t):t.map(function(t){return No(t,e)})}function Co(t,e){return\"object\"!=typeof t[0]?e.invert(t):t.map(function(t){return Co(t,e)})}function So(t){var e=de(t).geometry.coordinates.reverse(),n=e.map(function(t){return-t});return Sg().center(e).rotate(n).scale(Fo)}function Mo(){for(var t=new bh,e=t.read(JSON.stringify(arguments[0].geometry)),n=1;n<arguments.length;n++)e=Df.union(e,t.read(JSON.stringify(arguments[n].geometry)));return e=(new Ih).write(e),{type:\"Feature\",geometry:e,properties:arguments[0].properties}}function Lo(t,n){var r=J(t),i=J(n);if(te(Pn(i,{precision:4})).coordinates[0].length<4)return null;if(te(Pn(r,{precision:4})).coordinates[0].length<4)return null;var o=new bh,s=o.read(Pn(r)),a=o.read(Pn(i)),u=Cf.intersection(s,a);if(u.isEmpty())return null;return e((new Ih).write(u))}function Po(t,e){return function(t,e,n){var r,i;if(!Array.isArray(e))throw new Error(\"Get closest expects an array as second argument\");return e.forEach(function(e,o){var s=n(e,t);s>=0&&(void 0===i||s<i)&&(i=s,r=o)}),r}(t,e,function(t,e){return t-e})}function Oo(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.properties||{},i=n.triangles,s=n.mask;if(null===e||void 0===e)throw new Error(\"cellSide is required\");if(!b(e))throw new Error(\"cellSide is invalid\");if(!t)throw new Error(\"bbox is required\");if(!Array.isArray(t))throw new Error(\"bbox must be array\");if(4!==t.length)throw new Error(\"bbox must contain 4 numbers\");if(s&&-1===[\"Polygon\",\"MultiPolygon\"].indexOf(K(s)))throw new Error(\"options.mask must be a (Multi)Polygon\");var a=t[0],u=t[1],h=t[2],l=t[3],p=(u+l)/2,f=(a+h)/2,g=2*e/qt([a,p],[h,p],n)*(h-a),d=2*e/qt([f,u],[f,l],n)*(l-u),y=g/2,_=2*y,m=Math.sqrt(3)/2*d,v=h-a,x=l-u,E=.75*_,w=m,N=(v-_)/(_-y/2),C=Math.floor(N),S=(C*E-y/2-v)/2-y/2+E/2,M=Math.floor((x-m)/m),L=(x-M*m)/2,P=M*m-x>m/2;P&&(L-=m/4);for(var O=[],R=[],T=0;T<6;T++){var A=2*Math.PI/6*T;O.push(Math.cos(A)),R.push(Math.sin(A))}for(var D=[],F=0;F<=C;F++)for(var q=0;q<=M;q++){var G=F%2==1;if((0!==q||!G)&&(0!==q||!P)){var B=F*E+a-S,k=q*w+u+L;if(G&&(k-=m/2),!0===i)(function(t,e,n,r,i,s){for(var a=[],u=0;u<6;u++){var c=[];c.push(t),c.push([t[0]+e*i[u],t[1]+n*s[u]]),c.push([t[0]+e*i[(u+1)%6],t[1]+n*s[(u+1)%6]]),c.push(t),a.push(o([c],r))}return a})([B,k],g/2,d/2,r,O,R).forEach(function(t){s?Lo(s,t)&&D.push(t):D.push(t)});else{var z=function(t,e,n,r,i,s){for(var a=[],u=0;u<6;u++){var c=t[0]+e*i[u],h=t[1]+n*s[u];a.push([c,h])}return a.push(a[0].slice()),o([a],r)}([B,k],g/2,d/2,r,O,R);s?Lo(s,z)&&D.push(z):D.push(z)}}}return c(D)}function Ro(t){if(t.features.length<=1)return t;var e=function(t){var e=Vo(),n=[];return F(t,function(t,e){var r=j(t);n.push({minX:r[0],minY:r[1],maxX:r[2],maxY:r[3],geojson:t,index:e})}),e.load(n),e}(t),n=[],r={};return F(t,function(t,i){if(r[i])return!0;for(e.remove({index:i},To),r[i]=!0;;){var o=j(t),s=e.search({minX:o[0],minY:o[1],maxX:o[2],maxY:o[3]});if(s.length>0){var a=s.map(function(t){return r[t.index]=!0,e.remove({index:t.index},To),t.geojson});a.push(t),t=Mo.apply(this,a)}if(0===s.length)break}n.push(t)}),c(n)}function To(t,e){return t.index===e.index}function Ao(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.properties,i=n.mask,s=[];if(null===e||void 0===e)throw new Error(\"cellSide is required\");if(!b(e))throw new Error(\"cellSide is invalid\");if(!t)throw new Error(\"bbox is required\");if(!Array.isArray(t))throw new Error(\"bbox must be array\");if(4!==t.length)throw new Error(\"bbox must contain 4 numbers\");if(i&&-1===[\"Polygon\",\"MultiPolygon\"].indexOf(K(i)))throw new Error(\"options.mask must be a (Multi)Polygon\");for(var a=t[0],u=t[1],h=t[2],l=t[3],p=e/qt([a,u],[h,u],n)*(h-a),f=e/qt([a,u],[a,l],n)*(l-u),g=h-a,d=l-u,y=Math.floor(g/p),_=Math.floor(d/f),m=(d-_*f)/2,v=a+(g-y*p)/2,x=0;x<y;x++){for(var E=u+m,w=0;w<_;w++){var N=o([[[v,E],[v,E+f],[v+p,E+f],[v+p,E],[v,E]]],r);i?Lo(i,N)&&s.push(N):s.push(N),E+=f}v+=p}return c(s)}function Do(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.properties,i=n.mask,s=[];if(null===e||void 0===e)throw new Error(\"cellSide is required\");if(!b(e))throw new Error(\"cellSide is invalid\");if(!t)throw new Error(\"bbox is required\");if(!Array.isArray(t))throw new Error(\"bbox must be array\");if(4!==t.length)throw new Error(\"bbox must contain 4 numbers\");if(i&&-1===[\"Polygon\",\"MultiPolygon\"].indexOf(K(i)))throw new Error(\"options.mask must be a (Multi)Polygon\");for(var a=e/qt([t[0],t[1]],[t[2],t[1]],n)*(t[2]-t[0]),u=e/qt([t[0],t[1]],[t[0],t[3]],n)*(t[3]-t[1]),h=0,l=t[0];l<=t[2];){for(var p=0,f=t[1];f<=t[3];){var g=null,d=null;h%2==0&&p%2==0?(g=o([[[l,f],[l,f+u],[l+a,f],[l,f]]],r),d=o([[[l,f+u],[l+a,f+u],[l+a,f],[l,f+u]]],r)):h%2==0&&p%2==1?(g=o([[[l,f],[l+a,f+u],[l+a,f],[l,f]]],r),d=o([[[l,f],[l,f+u],[l+a,f+u],[l,f]]],r)):p%2==0&&h%2==1?(g=o([[[l,f],[l,f+u],[l+a,f+u],[l,f]]],r),d=o([[[l,f],[l+a,f+u],[l+a,f],[l,f]]],r)):p%2==1&&h%2==1&&(g=o([[[l,f],[l,f+u],[l+a,f],[l,f]]],r),d=o([[[l,f+u],[l+a,f+u],[l+a,f],[l,f+u]]],r)),i?(Lo(i,g)&&s.push(g),Lo(i,d)&&s.push(d)):(s.push(g),s.push(d)),f+=u,p++}h++,l+=a}return c(s)}var Fo=6371008.8,qo={meters:Fo,metres:Fo,millimeters:1e3*Fo,millimetres:1e3*Fo,centimeters:100*Fo,centimetres:100*Fo,kilometers:Fo/1e3,kilometres:Fo/1e3,miles:Fo/1609.344,nauticalmiles:Fo/1852,inches:39.37*Fo,yards:Fo/1.0936,feet:3.28084*Fo,radians:1,degrees:Fo/111325},Go={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/Fo,degrees:1/111325},Bo={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006},ko=Object.freeze({earthRadius:Fo,factors:qo,unitsFactors:Go,areaFactors:Bo,feature:e,geometry:n,point:r,points:i,polygon:o,polygons:s,lineString:a,lineStrings:u,featureCollection:c,multiLineString:h,multiPoint:l,multiPolygon:p,geometryCollection:f,round:g,radiansToLength:d,lengthToRadians:y,lengthToDegrees:_,bearingToAzimuth:m,radiansToDegrees:v,degreesToRadians:x,convertLength:E,convertArea:w,isNumber:b,isObject:I,validateBBox:N,validateId:C,radians2degrees:function(){throw new Error(\"method has been renamed to `radiansToDegrees`\")},degrees2radians:function(){throw new Error(\"method has been renamed to `degreesToRadians`\")},distanceToDegrees:function(){throw new Error(\"method has been renamed to `lengthToDegrees`\")},distanceToRadians:function(){throw new Error(\"method has been renamed to `lengthToRadians`\")},radiansToDistance:function(){throw new Error(\"method has been renamed to `radiansToLength`\")},bearingToAngle:function(){throw new Error(\"method has been renamed to `bearingToAzimuth`\")},convertDistance:function(){throw new Error(\"method has been renamed to `convertLength`\")}}),zo=Object.freeze({coordEach:S,coordReduce:M,propEach:L,propReduce:P,featureEach:O,featureReduce:R,coordAll:T,geomEach:A,geomReduce:D,flattenEach:F,flattenReduce:q,segmentEach:G,segmentReduce:B,lineEach:k,lineReduce:z}),jo=Object.freeze({getCoord:X,getCoords:U,containsNumber:Y,geojsonType:V,featureOf:H,collectionOf:W,getGeom:J,getGeomType:Z,getType:K}),Xo={successCallback:null,verbose:!1},Uo={},Yo=it,Vo=st;st.prototype={all:function(){return this._all(this.data,[])},search:function(t){var e=this.data,n=[],r=this.toBBox;if(!dt(t,e))return n;for(var i,o,s,a,u=[];e;){for(i=0,o=e.children.length;i<o;i++)s=e.children[i],dt(t,a=e.leaf?r(s):s)&&(e.leaf?n.push(s):gt(t,a)?this._all(s,n):u.push(s));e=u.pop()}return n},collides:function(t){var e=this.data,n=this.toBBox;if(!dt(t,e))return!1;for(var r,i,o,s,a=[];e;){for(r=0,i=e.children.length;r<i;r++)if(o=e.children[r],s=e.leaf?n(o):o,dt(t,s)){if(e.leaf||gt(t,s))return!0;a.push(o)}e=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0,n=t.length;e<n;e++)this.insert(t[e]);return this}var r=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===r.height)this._splitRoot(this.data,r);else{if(this.data.height<r.height){var i=this.data;this.data=r,r=i}this._insert(r,this.data.height-r.height-1,!0)}else this.data=r;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=yt([]),this},remove:function(t,e){if(!t)return this;for(var n,r,i,o,s=this.data,a=this.toBBox(t),u=[],c=[];s||u.length;){if(s||(s=u.pop(),r=u[u.length-1],n=c.pop(),o=!0),s.leaf&&-1!==(i=function(t,e,n){if(!n)return e.indexOf(t);for(var r=0;r<e.length;r++)if(n(t,e[r]))return r;return-1}(t,s.children,e)))return s.children.splice(i,1),u.push(s),this._condense(u),this;o||s.leaf||!gt(s,a)?r?(n++,s=r.children[n],o=!1):s=null:(u.push(s),c.push(n),n=0,r=s,s=s.children[0])}return this},toBBox:function(t){return t},compareMinX:ht,compareMinY:lt,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,e){for(var n=[];t;)t.leaf?e.push.apply(e,t.children):n.push.apply(n,t.children),t=n.pop();return e},_build:function(t,e,n,r){var i,o=n-e+1,s=this._maxEntries;if(o<=s)return i=yt(t.slice(e,n+1)),at(i,this.toBBox),i;r||(r=Math.ceil(Math.log(o)/Math.log(s)),s=Math.ceil(o/Math.pow(s,r-1))),(i=yt([])).leaf=!1,i.height=r;var a,u,c,h,l=Math.ceil(o/s),p=l*Math.ceil(Math.sqrt(s));for(_t(t,e,n,p,this.compareMinX),a=e;a<=n;a+=p)for(_t(t,a,c=Math.min(a+p-1,n),l,this.compareMinY),u=a;u<=c;u+=l)h=Math.min(u+l-1,c),i.children.push(this._build(t,u,h,r-1));return at(i,this.toBBox),i},_chooseSubtree:function(t,e,n,r){for(var i,o,s,a,u,c,h,l;r.push(e),!e.leaf&&r.length-1!==n;){for(h=l=1/0,i=0,o=e.children.length;i<o;i++)u=pt(s=e.children[i]),(c=function(t,e){return(Math.max(e.maxX,t.maxX)-Math.min(e.minX,t.minX))*(Math.max(e.maxY,t.maxY)-Math.min(e.minY,t.minY))}(t,s)-u)<l?(l=c,h=u<h?u:h,a=s):c===l&&u<h&&(h=u,a=s);e=a||e.children[0]}return e},_insert:function(t,e,n){var r=this.toBBox,i=n?t:r(t),o=[],s=this._chooseSubtree(i,this.data,e,o);for(s.children.push(t),ct(s,i);e>=0&&o[e].children.length>this._maxEntries;)this._split(o,e),e--;this._adjustParentBBoxes(i,o,e)},_split:function(t,e){var n=t[e],r=n.children.length,i=this._minEntries;this._chooseSplitAxis(n,i,r);var o=this._chooseSplitIndex(n,i,r),s=yt(n.children.splice(o,n.children.length-o));s.height=n.height,s.leaf=n.leaf,at(n,this.toBBox),at(s,this.toBBox),e?t[e-1].children.push(s):this._splitRoot(n,s)},_splitRoot:function(t,e){this.data=yt([t,e]),this.data.height=t.height+1,this.data.leaf=!1,at(this.data,this.toBBox)},_chooseSplitIndex:function(t,e,n){var r,i,o,s,a,u,c,h;for(u=c=1/0,r=e;r<=n-e;r++)s=function(t,e){var n=Math.max(t.minX,e.minX),r=Math.max(t.minY,e.minY),i=Math.min(t.maxX,e.maxX),o=Math.min(t.maxY,e.maxY);return Math.max(0,i-n)*Math.max(0,o-r)}(i=ut(t,0,r,this.toBBox),o=ut(t,r,n,this.toBBox)),a=pt(i)+pt(o),s<u?(u=s,h=r,c=a<c?a:c):s===u&&a<c&&(c=a,h=r);return h},_chooseSplitAxis:function(t,e,n){var r=t.leaf?this.compareMinX:ht,i=t.leaf?this.compareMinY:lt;this._allDistMargin(t,e,n,r)<this._allDistMargin(t,e,n,i)&&t.children.sort(r)},_allDistMargin:function(t,e,n,r){t.children.sort(r);var i,o,s=this.toBBox,a=ut(t,0,e,s),u=ut(t,n-e,n,s),c=ft(a)+ft(u);for(i=e;i<n-e;i++)o=t.children[i],ct(a,t.leaf?s(o):o),c+=ft(a);for(i=n-e-1;i>=e;i--)o=t.children[i],ct(u,t.leaf?s(o):o),c+=ft(u);return c},_adjustParentBBoxes:function(t,e,n){for(var r=n;r>=0;r--)ct(e[r],t)},_condense:function(t){for(var e,n=t.length-1;n>=0;n--)0===t[n].children.length?n>0?(e=t[n-1].children).splice(e.indexOf(t[n]),1):this.clear():at(t[n],this.toBBox)},_initFormat:function(t){var e=[\"return a\",\" - b\",\";\"];this.compareMinX=new Function(\"a\",\"b\",e.join(t[0])),this.compareMinY=new Function(\"a\",\"b\",e.join(t[1])),this.toBBox=new Function(\"a\",\"return {minX: a\"+t[0]+\", minY: a\"+t[1]+\", maxX: a\"+t[2]+\", maxY: a\"+t[3]+\"};\")}};var Ho=function(t,e,n){var r=t*e,i=Wo*t,o=i-(i-t),s=t-o,a=Wo*e,u=a-(a-e),c=e-u,h=s*c-(r-o*u-s*u-o*c);return n?(n[0]=h,n[1]=r,n):[h,r]},Wo=+(Math.pow(2,27)+1),Jo=function(t,e){var n=0|t.length,r=0|e.length;if(1===n&&1===r)return function(t,e){var n=t+e,r=n-t,i=t-(n-r)+(e-r);return i?[i,n]:[n]}(t[0],e[0]);var i,o,s=n+r,a=new Array(s),u=0,c=0,h=0,l=Math.abs,p=t[c],f=l(p),g=e[h],d=l(g);f<d?(o=p,(c+=1)<n&&(f=l(p=t[c]))):(o=g,(h+=1)<r&&(d=l(g=e[h]))),c<n&&f<d||h>=r?(i=p,(c+=1)<n&&(f=l(p=t[c]))):(i=g,(h+=1)<r&&(d=l(g=e[h])));for(var y,_,m=i+o,v=m-i,x=o-v,E=x,w=m;c<n&&h<r;)f<d?(i=p,(c+=1)<n&&(f=l(p=t[c]))):(i=g,(h+=1)<r&&(d=l(g=e[h]))),(x=(o=E)-(v=(m=i+o)-i))&&(a[u++]=x),E=w-((y=w+m)-(_=y-w))+(m-_),w=y;for(;c<n;)(x=(o=E)-(v=(m=(i=p)+o)-i))&&(a[u++]=x),E=w-((y=w+m)-(_=y-w))+(m-_),w=y,(c+=1)<n&&(p=t[c]);for(;h<r;)(x=(o=E)-(v=(m=(i=g)+o)-i))&&(a[u++]=x),E=w-((y=w+m)-(_=y-w))+(m-_),w=y,(h+=1)<r&&(g=e[h]);return E&&(a[u++]=E),w&&(a[u++]=w),u||(a[u++]=0),a.length=u,a},Zo=function(t,e,n){var r=t+e,i=r-t,o=e-i,s=t-(r-i);return n?(n[0]=s+o,n[1]=r,n):[s+o,r]},Ko=function(t,e){var n=t.length;if(1===n){var r=Ho(t[0],e);return r[0]?r:[r[1]]}var i=new Array(2*n),o=[.1,.1],s=[.1,.1],a=0;Ho(t[0],e,o),o[0]&&(i[a++]=o[0]);for(var u=1;u<n;++u){Ho(t[u],e,s);var c=o[1];Zo(c,s[0],o),o[0]&&(i[a++]=o[0]);var h=s[1],l=o[1],p=h+l,f=l-(p-h);o[1]=p,f&&(i[a++]=f)}return o[1]&&(i[a++]=o[1]),0===a&&(i[a++]=0),i.length=a,i},Qo=function(t,e){var n=0|t.length,r=0|e.length;if(1===n&&1===r)return function(t,e){var n=t+e,r=n-t,i=t-(n-r)+(e-r);return i?[i,n]:[n]}(t[0],-e[0]);var i,o,s=n+r,a=new Array(s),u=0,c=0,h=0,l=Math.abs,p=t[c],f=l(p),g=-e[h],d=l(g);f<d?(o=p,(c+=1)<n&&(f=l(p=t[c]))):(o=g,(h+=1)<r&&(d=l(g=-e[h]))),c<n&&f<d||h>=r?(i=p,(c+=1)<n&&(f=l(p=t[c]))):(i=g,(h+=1)<r&&(d=l(g=-e[h])));for(var y,_,m=i+o,v=m-i,x=o-v,E=x,w=m;c<n&&h<r;)f<d?(i=p,(c+=1)<n&&(f=l(p=t[c]))):(i=g,(h+=1)<r&&(d=l(g=-e[h]))),(x=(o=E)-(v=(m=i+o)-i))&&(a[u++]=x),E=w-((y=w+m)-(_=y-w))+(m-_),w=y;for(;c<n;)(x=(o=E)-(v=(m=(i=p)+o)-i))&&(a[u++]=x),E=w-((y=w+m)-(_=y-w))+(m-_),w=y,(c+=1)<n&&(p=t[c]);for(;h<r;)(x=(o=E)-(v=(m=(i=g)+o)-i))&&(a[u++]=x),E=w-((y=w+m)-(_=y-w))+(m-_),w=y,(h+=1)<r&&(g=-e[h]);return E&&(a[u++]=E),w&&(a[u++]=w),u||(a[u++]=0),a.length=u,a},$o=mt(function(t){function e(t,e){for(var n=new Array(t.length-1),r=1;r<t.length;++r)for(var i=n[r-1]=new Array(t.length-1),o=0,s=0;o<t.length;++o)o!==e&&(i[s++]=t[r][o]);return n}function n(t){return 1&t?\"-\":\"\"}function r(t){if(1===t.length)return t[0];if(2===t.length)return[\"sum(\",t[0],\",\",t[1],\")\"].join(\"\");var e=t.length>>1;return[\"sum(\",r(t.slice(0,e)),\",\",r(t.slice(e)),\")\"].join(\"\")}function i(t){if(2===t.length)return[[\"sum(prod(\",t[0][0],\",\",t[1][1],\"),prod(-\",t[0][1],\",\",t[1][0],\"))\"].join(\"\")];for(var o=[],s=0;s<t.length;++s)o.push([\"scale(\",r(i(e(t,s))),\",\",n(s),t[0][s],\")\"].join(\"\"));return o}function o(t){for(var n=[],o=[],s=function(t){for(var e=new Array(t),n=0;n<t;++n){e[n]=new Array(t);for(var r=0;r<t;++r)e[n][r]=[\"m\",r,\"[\",t-n-1,\"]\"].join(\"\")}return e}(t),a=[],u=0;u<t;++u)0==(1&u)?n.push.apply(n,i(e(s,u))):o.push.apply(o,i(e(s,u))),a.push(\"m\"+u);var c=r(n),h=r(o),l=\"orientation\"+t+\"Exact\",p=[\"function \",l,\"(\",a.join(),\"){var p=\",c,\",n=\",h,\",d=sub(p,n);return d[d.length-1];};return \",l].join(\"\");return new Function(\"sum\",\"prod\",\"scale\",\"sub\",p)(Jo,Ho,Ko,Qo)}var s=5,a=o(3),u=o(4),c=[function(){return 0},function(){return 0},function(t,e){return e[0]-t[0]},function(t,e,n){var r,i=(t[1]-n[1])*(e[0]-n[0]),o=(t[0]-n[0])*(e[1]-n[1]),s=i-o;if(i>0){if(o<=0)return s;r=i+o}else{if(!(i<0))return s;if(o>=0)return s;r=-(i+o)}var u=3.3306690738754716e-16*r;return s>=u||s<=-u?s:a(t,e,n)},function(t,e,n,r){var i=t[0]-r[0],o=e[0]-r[0],s=n[0]-r[0],a=t[1]-r[1],c=e[1]-r[1],h=n[1]-r[1],l=t[2]-r[2],p=e[2]-r[2],f=n[2]-r[2],g=o*h,d=s*c,y=s*a,_=i*h,m=i*c,v=o*a,x=l*(g-d)+p*(y-_)+f*(m-v),E=7.771561172376103e-16*((Math.abs(g)+Math.abs(d))*Math.abs(l)+(Math.abs(y)+Math.abs(_))*Math.abs(p)+(Math.abs(m)+Math.abs(v))*Math.abs(f));return x>E||-x>E?x:u(t,e,n,r)}];!function(){for(;c.length<=s;)c.push(o(c.length));for(var e=[],n=[\"slow\"],r=0;r<=s;++r)e.push(\"a\"+r),n.push(\"o\"+r);var i=[\"function getOrientation(\",e.join(),\"){switch(arguments.length){case 0:case 1:return 0;\"];for(r=2;r<=s;++r)i.push(\"case \",r,\":return o\",r,\"(\",e.slice(0,r).join(),\");\");i.push(\"}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation\"),n.push(i.join(\"\"));var a=Function.apply(void 0,n);for(t.exports=a.apply(void 0,[function(t){var e=c[t.length];return e||(e=c[t.length]=o(t.length)),e.apply(void 0,t)}].concat(c)),r=0;r<=s;++r)t.exports[r]=c[r]}()}),ts=function(t){var e=t.length;if(e<3){for(var n=new Array(e),r=0;r<e;++r)n[r]=r;return 2===e&&t[0][0]===t[1][0]&&t[0][1]===t[1][1]?[0]:n}var i=new Array(e);for(r=0;r<e;++r)i[r]=r;i.sort(function(e,n){var r=t[e][0]-t[n][0];return r||t[e][1]-t[n][1]});var o=[i[0],i[1]],s=[i[0],i[1]];for(r=2;r<e;++r){for(var a=i[r],u=t[a],c=o.length;c>1&&es(t[o[c-2]],t[o[c-1]],u)<=0;)c-=1,o.pop();for(o.push(a),c=s.length;c>1&&es(t[s[c-2]],t[s[c-1]],u)>=0;)c-=1,s.pop();s.push(a)}n=new Array(s.length+o.length-2);for(var h=0,l=(r=0,o.length);r<l;++r)n[h++]=o[r];for(var p=s.length-2;p>0;--p)n[h++]=s[p];return n},es=$o[3],ns=vt,rs=vt;vt.prototype={push:function(t){this.data.push(t),this.length++,this._up(this.length-1)},pop:function(){if(0!==this.length){var t=this.data[0];return this.length--,this.length>0&&(this.data[0]=this.data[this.length],this._down(0)),this.data.pop(),t}},peek:function(){return this.data[0]},_up:function(t){for(var e=this.data,n=this.compare,r=e[t];t>0;){var i=t-1>>1,o=e[i];if(n(r,o)>=0)break;e[t]=o,t=i}e[t]=r},_down:function(t){for(var e=this.data,n=this.compare,r=this.length>>1,i=e[t];t<r;){var o=1+(t<<1),s=o+1,a=e[o];if(s<this.length&&n(e[s],a)<0&&(o=s,a=e[s]),n(a,i)>=0)break;e[t]=a,t=o}e[t]=i}},ns.default=rs;var is=function(t,e){for(var n=t[0],r=t[1],i=!1,o=0,s=e.length-1;o<e.length;s=o++){var a=e[o][0],u=e[o][1],c=e[s][0],h=e[s][1];u>r!=h>r&&n<(c-a)*(r-u)/(h-u)+a&&(i=!i)}return i},os=$o[3],ss=xt,as=xt;ss.default=as;var us=function(t){return t},cs=function(t){if(null==t)return us;var e,n,r=t.scale[0],i=t.scale[1],o=t.translate[0],s=t.translate[1];return function(t,a){a||(e=n=0);var u=2,c=t.length,h=new Array(c);for(h[0]=(e+=t[0])*r+o,h[1]=(n+=t[1])*i+s;u<c;)h[u]=t[u],++u;return h}},hs=function(t,e){for(var n,r=t.length,i=r-e;i<--r;)n=t[i],t[i++]=t[r],t[r]=n},ls=function(t,e){function n(t,e){for(var n in t){var i=t[n];delete e[i.start],delete i.start,delete i.end,i.forEach(function(t){r[t<0?~t:t]=1}),s.push(i)}}var r={},i={},o={},s=[],a=-1;return e.forEach(function(n,r){var i,o=t.arcs[n<0?~n:n];o.length<3&&!o[1][0]&&!o[1][1]&&(i=e[++a],e[a]=n,e[r]=i)}),e.forEach(function(e){var n,r,s=function(e){var n,r=t.arcs[e<0?~e:e],i=r[0];return t.transform?(n=[0,0],r.forEach(function(t){n[0]+=t[0],n[1]+=t[1]})):n=r[r.length-1],e<0?[n,i]:[i,n]}(e),a=s[0],u=s[1];if(n=o[a])if(delete o[n.end],n.push(e),n.end=u,r=i[u]){delete i[r.start];var c=r===n?n:n.concat(r);i[c.start=n.start]=o[c.end=r.end]=c}else i[n.start]=o[n.end]=n;else if(n=i[u])if(delete i[n.start],n.unshift(e),n.start=a,r=o[a]){delete o[r.end];var h=r===n?n:r.concat(n);i[h.start=r.start]=o[h.end=n.end]=h}else i[n.start]=o[n.end]=n;else i[(n=[e]).start=a]=o[n.end=u]=n}),n(o,i),n(i,o),e.forEach(function(t){r[t<0?~t:t]||s.push([t])}),s},ps=function(t){return Xt(t,Ut.apply(this,arguments))},fs=function(t,e,n,r,i,o){3===arguments.length&&(r=o=Array,i=null);for(var s=new r(t=1<<Math.max(4,Math.ceil(Math.log(t)/Math.LN2))),a=new o(t),u=t-1,c=0;c<t;++c)s[c]=i;return{set:function(r,o){for(var c=e(r)&u,h=s[c],l=0;h!=i;){if(n(h,r))return a[c]=o;if(++l>=t)throw new Error(\"full hashmap\");h=s[c=c+1&u]}return s[c]=r,a[c]=o,o},maybeSet:function(r,o){for(var c=e(r)&u,h=s[c],l=0;h!=i;){if(n(h,r))return a[c];if(++l>=t)throw new Error(\"full hashmap\");h=s[c=c+1&u]}return s[c]=r,a[c]=o,o},get:function(r,o){for(var c=e(r)&u,h=s[c],l=0;h!=i;){if(n(h,r))return a[c];if(++l>=t)break;h=s[c=c+1&u]}return o},keys:function(){for(var t=[],e=0,n=s.length;e<n;++e){var r=s[e];r!=i&&t.push(r)}return t}}},gs=function(t,e){return t[0]===e[0]&&t[1]===e[1]},ds=new ArrayBuffer(16),ys=new Float64Array(ds),_s=new Uint32Array(ds),ms=function(t){ys[0]=t[0],ys[1]=t[1];var e=_s[0]^_s[1];return 2147483647&(e=e<<5^e>>7^_s[2]^_s[3])},vs=function(t){function e(t,e,n,r){if(p[n]!==t){p[n]=t;var i=f[n];if(i>=0){var o=g[n];i===e&&o===r||i===r&&o===e||(++y,d[n]=1)}else f[n]=e,g[n]=r}}function n(t){return ms(u[t])}function r(t,e){return gs(u[t],u[e])}var i,o,s,a,u=t.coordinates,c=t.lines,h=t.rings,l=function(){for(var t=fs(1.4*u.length,n,r,Int32Array,-1,Int32Array),e=new Int32Array(u.length),i=0,o=u.length;i<o;++i)e[i]=t.maybeSet(i,i);return e}(),p=new Int32Array(u.length),f=new Int32Array(u.length),g=new Int32Array(u.length),d=new Int8Array(u.length),y=0;for(i=0,o=u.length;i<o;++i)p[i]=f[i]=g[i]=-1;for(i=0,o=c.length;i<o;++i){var _=c[i],m=_[0],v=_[1];for(s=l[m],a=l[++m],++y,d[s]=1;++m<=v;)e(i,s,s=a,a=l[m]);++y,d[a]=1}for(i=0,o=u.length;i<o;++i)p[i]=-1;for(i=0,o=h.length;i<o;++i){var x=h[i],E=x[0]+1,w=x[1];for(e(i,l[w-1],s=l[E-1],a=l[E]);++E<=w;)e(i,s,s=a,a=l[E])}p=f=g=null;var b,I=function(t,e,n,r,i){3===arguments.length&&(r=Array,i=null);for(var o=new r(t=1<<Math.max(4,Math.ceil(Math.log(t)/Math.LN2))),s=t-1,a=0;a<t;++a)o[a]=i;return{add:function(r){for(var a=e(r)&s,u=o[a],c=0;u!=i;){if(n(u,r))return!0;if(++c>=t)throw new Error(\"full hashset\");u=o[a=a+1&s]}return o[a]=r,!0},has:function(r){for(var a=e(r)&s,u=o[a],c=0;u!=i;){if(n(u,r))return!0;if(++c>=t)break;u=o[a=a+1&s]}return!1},values:function(){for(var t=[],e=0,n=o.length;e<n;++e){var r=o[e];r!=i&&t.push(r)}return t}}}(1.4*y,ms,gs);for(i=0,o=u.length;i<o;++i)d[b=l[i]]&&I.add(u[b]);return I},xs=function(t){var e,n,r,i=vs(t),o=t.coordinates,s=t.lines,a=t.rings;for(n=0,r=s.length;n<r;++n)for(var u=s[n],c=u[0],h=u[1];++c<h;)i.has(o[c])&&(e={0:c,1:u[1]},u[1]=c,u=u.next=e);for(n=0,r=a.length;n<r;++n)for(var l=a[n],p=l[0],f=p,g=l[1],d=i.has(o[p]);++f<g;)i.has(o[f])&&(d?(e={0:f,1:l[1]},l[1]=f,l=l.next=e):(!function(t,e,n,r){Yt(t,e,n),Yt(t,e,e+r),Yt(t,e+r,n)}(o,p,g,g-f),o[g]=o[p],d=!0,f=p));return t},Es=function(t){function e(t){var e,n,r,i,o,s,a,u;if(r=f.get(e=c[t[0]]))for(a=0,u=r.length;a<u;++a)if(i=r[a],function(t,e){var n=t[0],r=e[0],i=t[1],o=e[1];if(n-i!=r-o)return!1;for(;n<=i;++n,++r)if(!gs(c[n],c[r]))return!1;return!0}(i,t))return t[0]=i[0],void(t[1]=i[1]);if(o=f.get(n=c[t[1]]))for(a=0,u=o.length;a<u;++a)if(s=o[a],function(t,e){var n=t[0],r=e[0],i=t[1],o=e[1];if(n-i!=r-o)return!1;for(;n<=i;++n,--o)if(!gs(c[n],c[o]))return!1;return!0}(s,t))return t[1]=s[0],void(t[0]=s[1]);r?r.push(t):f.set(e,[t]),o?o.push(t):f.set(n,[t]),g.push(t)}function n(t,e){var n=t[0],r=e[0],o=t[1]-n;if(o!==e[1]-r)return!1;for(var s=i(t),a=i(e),u=0;u<o;++u)if(!gs(c[n+(u+s)%o],c[r+(u+a)%o]))return!1;return!0}function r(t,e){var n=t[0],r=e[0],o=t[1],s=e[1],a=o-n;if(a!==s-r)return!1;for(var u=i(t),h=a-i(e),l=0;l<a;++l)if(!gs(c[n+(l+u)%a],c[s-(l+h)%a]))return!1;return!0}function i(t){for(var e=t[0],n=t[1],r=e,i=r,o=c[r];++r<n;){var s=c[r];(s[0]<o[0]||s[0]===o[0]&&s[1]<o[1])&&(i=r,o=s)}return i-e}var o,s,a,u,c=t.coordinates,h=t.lines,l=t.rings,p=h.length+l.length;for(delete t.lines,delete t.rings,a=0,u=h.length;a<u;++a)for(o=h[a];o=o.next;)++p;for(a=0,u=l.length;a<u;++a)for(s=l[a];s=s.next;)++p;var f=fs(2*p*1.4,ms,gs),g=t.arcs=[];for(a=0,u=h.length;a<u;++a){o=h[a];do{e(o)}while(o=o.next)}for(a=0,u=l.length;a<u;++a)if((s=l[a]).next)do{e(s)}while(s=s.next);else!function(t){var e,o,s,a,u;if(o=f.get(e=c[t[0]]))for(a=0,u=o.length;a<u;++a){if(s=o[a],n(s,t))return t[0]=s[0],void(t[1]=s[1]);if(r(s,t))return t[0]=s[1],void(t[1]=s[0])}if(o=f.get(e=c[t[0]+i(t)]))for(a=0,u=o.length;a<u;++a){if(s=o[a],n(s,t))return t[0]=s[0],void(t[1]=s[1]);if(r(s,t))return t[0]=s[1],void(t[1]=s[0])}o?o.push(t):f.set(e,[t]),g.push(t)}(s);return t},ws=function(t,e){function n(t){t&&h.hasOwnProperty(t.type)&&h[t.type](t)}function r(t){var e=[];do{var n=c.get(t);e.push(t[0]<t[1]?n:~n)}while(t=t.next);return e}function i(t){return t.map(r)}var o=function(t){function e(t){null!=t&&c.hasOwnProperty(t.type)&&c[t.type](t)}function n(t){var e=t[0],n=t[1];e<o&&(o=e),e>a&&(a=e),n<s&&(s=n),n>u&&(u=n)}function r(t){t.forEach(n)}function i(t){t.forEach(r)}var o=1/0,s=1/0,a=-1/0,u=-1/0,c={GeometryCollection:function(t){t.geometries.forEach(e)},Point:function(t){n(t.coordinates)},MultiPoint:function(t){t.coordinates.forEach(n)},LineString:function(t){r(t.arcs)},MultiLineString:function(t){t.arcs.forEach(r)},Polygon:function(t){t.arcs.forEach(r)},MultiPolygon:function(t){t.arcs.forEach(i)}};for(var h in t)e(t[h]);return a>=o&&u>=s?[o,s,a,u]:void 0}(t=function(t){var e,n={};for(e in t)n[e]=Vt(t[e]);return n}(t)),s=e>0&&o&&function(t,e,n){function r(t){return[Math.round((t[0]-c)*f),Math.round((t[1]-h)*g)]}function i(t,e){for(var n,r,i,o,s,a=-1,u=0,l=t.length,p=new Array(l);++a<l;)n=t[a],o=Math.round((n[0]-c)*f),s=Math.round((n[1]-h)*g),o===r&&s===i||(p[u++]=[r=o,i=s]);for(p.length=u;u<e;)u=p.push([p[0][0],p[0][1]]);return p}function o(t){return i(t,2)}function s(t){return i(t,4)}function a(t){return t.map(s)}function u(t){null!=t&&d.hasOwnProperty(t.type)&&d[t.type](t)}var c=e[0],h=e[1],l=e[2],p=e[3],f=l-c?(n-1)/(l-c):1,g=p-h?(n-1)/(p-h):1,d={GeometryCollection:function(t){t.geometries.forEach(u)},Point:function(t){t.coordinates=r(t.coordinates)},MultiPoint:function(t){t.coordinates=t.coordinates.map(r)},LineString:function(t){t.arcs=o(t.arcs)},MultiLineString:function(t){t.arcs=t.arcs.map(o)},Polygon:function(t){t.arcs=a(t.arcs)},MultiPolygon:function(t){t.arcs=t.arcs.map(a)}};for(var y in t)u(t[y]);return{scale:[1/f,1/g],translate:[c,h]}}(t,o,e),a=Es(xs(function(t){function e(t){t&&c.hasOwnProperty(t.type)&&c[t.type](t)}function n(t){for(var e=0,n=t.length;e<n;++e)u[++o]=t[e];var r={0:o-n+1,1:o};return s.push(r),r}function r(t){for(var e=0,n=t.length;e<n;++e)u[++o]=t[e];var r={0:o-n+1,1:o};return a.push(r),r}function i(t){return t.map(r)}var o=-1,s=[],a=[],u=[],c={GeometryCollection:function(t){t.geometries.forEach(e)},LineString:function(t){t.arcs=n(t.arcs)},MultiLineString:function(t){t.arcs=t.arcs.map(n)},Polygon:function(t){t.arcs=t.arcs.map(r)},MultiPolygon:function(t){t.arcs=t.arcs.map(i)}};for(var h in t)e(t[h]);return{type:\"Topology\",coordinates:u,lines:s,rings:a,objects:t}}(t))),u=a.coordinates,c=fs(1.4*a.arcs.length,Jt,Zt);t=a.objects,a.bbox=o,a.arcs=a.arcs.map(function(t,e){return c.set(t,e),u.slice(t[0],t[1]+1)}),delete a.coordinates,u=null;var h={GeometryCollection:function(t){t.geometries.forEach(n)},LineString:function(t){t.arcs=r(t.arcs)},MultiLineString:function(t){t.arcs=t.arcs.map(r)},Polygon:function(t){t.arcs=t.arcs.map(r)},MultiPolygon:function(t){t.arcs=t.arcs.map(i)}};for(var l in t)n(t[l]);return s&&(a.transform=s,a.arcs=function(t){for(var e=-1,n=t.length;++e<n;){for(var r,i,o=t[e],s=0,a=1,u=o.length,c=o[0],h=c[0],l=c[1];++s<u;)r=(c=o[s])[0],i=c[1],r===h&&i===l||(o[a++]=[r-h,i-l],h=r,l=i);1===a&&(o[a++]=[0,0]),o.length=a}return t}(a.arcs)),a},bs=function(t){this.points=t.points||[],this.duration=t.duration||1e4,this.sharpness=t.sharpness||.85,this.centers=[],this.controls=[],this.stepLength=t.stepLength||60,this.length=this.points.length,this.delay=0;for(var e=0;e<this.length;e++)this.points[e].z=this.points[e].z||0;for(e=0;e<this.length-1;e++){var n=this.points[e],r=this.points[e+1];this.centers.push({x:(n.x+r.x)/2,y:(n.y+r.y)/2,z:(n.z+r.z)/2})}this.controls.push([this.points[0],this.points[0]]);for(e=0;e<this.centers.length-1;e++){n=this.centers[e],r=this.centers[e+1];var i=this.points[e+1].x-(this.centers[e].x+this.centers[e+1].x)/2,o=this.points[e+1].y-(this.centers[e].y+this.centers[e+1].y)/2,s=this.points[e+1].z-(this.centers[e].y+this.centers[e+1].z)/2;this.controls.push([{x:(1-this.sharpness)*this.points[e+1].x+this.sharpness*(this.centers[e].x+i),y:(1-this.sharpness)*this.points[e+1].y+this.sharpness*(this.centers[e].y+o),z:(1-this.sharpness)*this.points[e+1].z+this.sharpness*(this.centers[e].z+s)},{x:(1-this.sharpness)*this.points[e+1].x+this.sharpness*(this.centers[e+1].x+i),y:(1-this.sharpness)*this.points[e+1].y+this.sharpness*(this.centers[e+1].y+o),z:(1-this.sharpness)*this.points[e+1].z+this.sharpness*(this.centers[e+1].z+s)}])}return this.controls.push([this.points[this.length-1],this.points[this.length-1]]),this.steps=this.cacheSteps(this.stepLength),this};bs.prototype.cacheSteps=function(t){var e=[],n=this.pos(0);e.push(0);for(var r=0;r<this.duration;r+=10){var i=this.pos(r);Math.sqrt((i.x-n.x)*(i.x-n.x)+(i.y-n.y)*(i.y-n.y)+(i.z-n.z)*(i.z-n.z))>t&&(e.push(r),n=i)}return e},bs.prototype.vector=function(t){var e=this.pos(t+10),n=this.pos(t-10);return{angle:180*Math.atan2(e.y-n.y,e.x-n.x)/3.14,speed:Math.sqrt((n.x-e.x)*(n.x-e.x)+(n.y-e.y)*(n.y-e.y)+(n.z-e.z)*(n.z-e.z))}},bs.prototype.pos=function(t){var e=t-this.delay;e<0&&(e=0),e>this.duration&&(e=this.duration-1);var n=e/this.duration;if(n>=1)return this.points[this.length-1];var r=Math.floor((this.points.length-1)*n);return function(t,e,n,r,i){var o=function(t){var e=t*t;return[e*t,3*e*(1-t),3*t*(1-t)*(1-t),(1-t)*(1-t)*(1-t)]}(t);return{x:i.x*o[0]+r.x*o[1]+n.x*o[2]+e.x*o[3],y:i.y*o[0]+r.y*o[1]+n.y*o[2]+e.y*o[3],z:i.z*o[0]+r.z*o[1]+n.z*o[2]+e.z*o[3]}}((this.length-1)*n-r,this.points[r],this.controls[r][1],this.controls[r+1][0],this.points[r+1])};var Is=ve,Ns=ve;ve.deviation=function(t,e,n,r){var i=e&&e.length,o=i?e[0]*n:t.length,s=Math.abs(Ae(t,0,o,n));if(i)for(var a=0,u=e.length;a<u;a++){var c=e[a]*n,h=a<u-1?e[a+1]*n:t.length;s-=Math.abs(Ae(t,c,h,n))}var l=0;for(a=0;a<r.length;a+=3){var p=r[a]*n,f=r[a+1]*n,g=r[a+2]*n;l+=Math.abs((t[p]-t[g])*(t[f+1]-t[p+1])-(t[p]-t[f])*(t[g+1]-t[p+1]))}return 0===s&&0===l?0:Math.abs((l-s)/s)},ve.flatten=function(t){for(var e=t[0][0].length,n={vertices:[],holes:[],dimensions:e},r=0,i=0;i<t.length;i++){for(var o=0;o<t[i].length;o++)for(var s=0;s<e;s++)n.vertices.push(t[i][o][s]);i>0&&(r+=t[i-1].length,n.holes.push(r))}return n},Is.default=Ns,ke.prototype={all:function(){return this._all(this.data,[])},search:function(t){var e=this.data,n=[],r=this.toBBox;if(!Je(t,e))return n;for(var i,o,s,a,u=[];e;){for(i=0,o=e.children.length;i<o;i++)s=e.children[i],Je(t,a=e.leaf?r(s):s)&&(e.leaf?n.push(s):We(t,a)?this._all(s,n):u.push(s));e=u.pop()}return n},collides:function(t){var e=this.data,n=this.toBBox;if(!Je(t,e))return!1;for(var r,i,o,s,a=[];e;){for(r=0,i=e.children.length;r<i;r++)if(o=e.children[r],s=e.leaf?n(o):o,Je(t,s)){if(e.leaf||We(t,s))return!0;a.push(o)}e=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0,n=t.length;e<n;e++)this.insert(t[e]);return this}var r=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===r.height)this._splitRoot(this.data,r);else{if(this.data.height<r.height){var i=this.data;this.data=r,r=i}this._insert(r,this.data.height-r.height-1,!0)}else this.data=r;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=Ze([]),this},remove:function(t,e){if(!t)return this;for(var n,r,i,o,s=this.data,a=this.toBBox(t),u=[],c=[];s||u.length;){if(s||(s=u.pop(),r=u[u.length-1],n=c.pop(),o=!0),s.leaf&&-1!==(i=function(t,e,n){if(!n)return e.indexOf(t);for(var r=0;r<e.length;r++)if(n(t,e[r]))return r;return-1}(t,s.children,e)))return s.children.splice(i,1),u.push(s),this._condense(u),this;o||s.leaf||!We(s,a)?r?(n++,s=r.children[n],o=!1):s=null:(u.push(s),c.push(n),n=0,r=s,s=s.children[0])}return this},toBBox:function(t){return t},compareMinX:Ue,compareMinY:Ye,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,e){for(var n=[];t;)t.leaf?e.push.apply(e,t.children):n.push.apply(n,t.children),t=n.pop();return e},_build:function(t,e,n,r){var i,o=n-e+1,s=this._maxEntries;if(o<=s)return i=Ze(t.slice(e,n+1)),ze(i,this.toBBox),i;r||(r=Math.ceil(Math.log(o)/Math.log(s)),s=Math.ceil(o/Math.pow(s,r-1))),(i=Ze([])).leaf=!1,i.height=r;var a,u,c,h,l=Math.ceil(o/s),p=l*Math.ceil(Math.sqrt(s));for(Ke(t,e,n,p,this.compareMinX),a=e;a<=n;a+=p)for(Ke(t,a,c=Math.min(a+p-1,n),l,this.compareMinY),u=a;u<=c;u+=l)h=Math.min(u+l-1,c),i.children.push(this._build(t,u,h,r-1));return ze(i,this.toBBox),i},_chooseSubtree:function(t,e,n,r){for(var i,o,s,a,u,c,h,l;r.push(e),!e.leaf&&r.length-1!==n;){for(h=l=1/0,i=0,o=e.children.length;i<o;i++)u=Ve(s=e.children[i]),(c=function(t,e){return(Math.max(e.maxX,t.maxX)-Math.min(e.minX,t.minX))*(Math.max(e.maxY,t.maxY)-Math.min(e.minY,t.minY))}(t,s)-u)<l?(l=c,h=u<h?u:h,a=s):c===l&&u<h&&(h=u,a=s);e=a||e.children[0]}return e},_insert:function(t,e,n){var r=this.toBBox,i=n?t:r(t),o=[],s=this._chooseSubtree(i,this.data,e,o);for(s.children.push(t),Xe(s,i);e>=0&&o[e].children.length>this._maxEntries;)this._split(o,e),e--;this._adjustParentBBoxes(i,o,e)},_split:function(t,e){var n=t[e],r=n.children.length,i=this._minEntries;this._chooseSplitAxis(n,i,r);var o=this._chooseSplitIndex(n,i,r),s=Ze(n.children.splice(o,n.children.length-o));s.height=n.height,s.leaf=n.leaf,ze(n,this.toBBox),ze(s,this.toBBox),e?t[e-1].children.push(s):this._splitRoot(n,s)},_splitRoot:function(t,e){this.data=Ze([t,e]),this.data.height=t.height+1,this.data.leaf=!1,ze(this.data,this.toBBox)},_chooseSplitIndex:function(t,e,n){var r,i,o,s,a,u,c,h;for(u=c=1/0,r=e;r<=n-e;r++)s=function(t,e){var n=Math.max(t.minX,e.minX),r=Math.max(t.minY,e.minY),i=Math.min(t.maxX,e.maxX),o=Math.min(t.maxY,e.maxY);return Math.max(0,i-n)*Math.max(0,o-r)}(i=je(t,0,r,this.toBBox),o=je(t,r,n,this.toBBox)),a=Ve(i)+Ve(o),s<u?(u=s,h=r,c=a<c?a:c):s===u&&a<c&&(c=a,h=r);return h},_chooseSplitAxis:function(t,e,n){var r=t.leaf?this.compareMinX:Ue,i=t.leaf?this.compareMinY:Ye;this._allDistMargin(t,e,n,r)<this._allDistMargin(t,e,n,i)&&t.children.sort(r)},_allDistMargin:function(t,e,n,r){t.children.sort(r);var i,o,s=this.toBBox,a=je(t,0,e,s),u=je(t,n-e,n,s),c=He(a)+He(u);for(i=e;i<n-e;i++)o=t.children[i],Xe(a,t.leaf?s(o):o),c+=He(a);for(i=n-e-1;i>=e;i--)o=t.children[i],Xe(u,t.leaf?s(o):o),c+=He(u);return c},_adjustParentBBoxes:function(t,e,n){for(var r=n;r>=0;r--)Xe(e[r],t)},_condense:function(t){for(var e,n=t.length-1;n>=0;n--)0===t[n].children.length?n>0?(e=t[n-1].children).splice(e.indexOf(t[n]),1):this.clear():ze(t[n],this.toBBox)},_initFormat:function(t){var e=[\"return a\",\" - b\",\";\"];this.compareMinX=new Function(\"a\",\"b\",e.join(t[0])),this.compareMinY=new Function(\"a\",\"b\",e.join(t[1])),this.toBBox=new Function(\"a\",\"return {minX: a\"+t[0]+\", minY: a\"+t[1]+\", maxX: a\"+t[2]+\", maxY: a\"+t[3]+\"};\")}};var Cs=Object.freeze({toMercator:cn,toWgs84:hn}),Ss=6378137,Ms=function(t,e,n){function r(t,n,r,i){var u=o[t][n],c=o[t][n+1],h=o[r][i],l=o[r][i+1],p=function(t,e,n,r){if(On(t,n)||On(t,r)||On(e,n)||On(r,n))return null;var i=t[0],o=t[1],s=e[0],a=e[1],u=n[0],c=n[1],h=r[0],l=r[1],p=(i-s)*(c-l)-(o-a)*(u-h);return 0===p?null:[((i*a-o*s)*(u-h)-(i-s)*(u*l-c*h))/p,((i*a-o*s)*(c-l)-(o-a)*(u*l-c*h))/p]}(u,c,h,l);if(null!==p){var f,g;if(f=c[0]!==u[0]?(p[0]-u[0])/(c[0]-u[0]):(p[1]-u[1])/(c[1]-u[1]),g=l[0]!==h[0]?(p[0]-h[0])/(l[0]-h[0]):(p[1]-h[1])/(l[1]-h[1]),!(f>=1||f<=0||g>=1||g<=0)){var d=p,y=!a[d];y&&(a[d]=!0),e?s.push(e(p,t,n,u,c,f,r,i,h,l,g,y)):s.push(p)}}}function i(t,e){var n,r,i,s,a=o[t][e],u=o[t][e+1];return a[0]<u[0]?(n=a[0],r=u[0]):(n=u[0],r=a[0]),a[1]<u[1]?(i=a[1],s=u[1]):(i=u[1],s=a[1]),{minX:n,minY:i,maxX:r,maxY:s,ring:t,edge:e}}if(\"Polygon\"!==t.geometry.type)throw new Error(\"The input feature must be a Polygon\");void 0===n&&(n=1);var o=t.geometry.coordinates,s=[],a={};if(n){for(var u=[],c=0;c<o.length;c++)for(var h=0;h<o[c].length-1;h++)u.push(i(c,h));var l=Vo();l.load(u)}for(var p=0;p<o.length;p++)for(var f=0;f<o[p].length-1;f++)if(n){l.search(i(p,f)).forEach(function(t){var e=t.ring,n=t.edge;r(p,f,e,n)})}else for(var g=0;g<o.length;g++)for(var d=0;d<o[g].length-1;d++)r(p,f,g,d);return e||(s={type:\"Feature\",geometry:{type:\"MultiPoint\",coordinates:s}}),s},Ls=function(t){function e(){for(var t=[],e=0;e<g.features.length;e++)-1==g.features[e].properties.parent&&t.push(e);if(t.length>1)for(e=0;e<t.length;e++){for(var n=-1,r=0;r<g.features.length;r++)t[e]!=r&&Pt(g.features[t[e]].geometry.coordinates[0][0],g.features[r],{ignoreBoundary:!0})&&mn(g.features[r])<1/0&&(n=r);g.features[t[e]].properties.parent=n}}function n(){for(var t=0;t<g.features.length;t++)if(-1==g.features[t].properties.parent){var e=g.features[t].properties.winding;g.features[t].properties.netWinding=e,r(t,e)}}function r(t,e){for(var n=0;n<g.features.length;n++)if(g.features[n].properties.parent==t){var i=e+g.features[n].properties.winding;g.features[n].properties.netWinding=i,r(n,i)}}if(\"Feature\"!=t.type)throw new Error(\"The input must a geojson object of type Feature\");if(void 0===t.geometry||null==t.geometry)throw new Error(\"The input must a geojson object with a non-empty geometry\");if(\"Polygon\"!=t.geometry.type)throw new Error(\"The input must be a geojson Polygon\");for(var i=t.geometry.coordinates.length,s=[],a=0;a<i;a++){var u=t.geometry.coordinates[a];Tn(u[0],u[u.length-1])||u.push(u[0]),s.push.apply(s,u.slice(0,u.length-1))}if(!function(t){for(var e={},n=1,r=0,i=t.length;r<i;++r){if(e.hasOwnProperty(t[r])){n=0;break}e[t[r]]=1}return n}(s))throw new Error(\"The input polygon may not have duplicate vertices (except for the first and last vertex of each ring)\");var h=s.length,l=Ms(t,function(t,e,n,r,i,o,s,a,u,c,h,l){return[t,e,n,r,i,o,s,a,u,c,h,l]}),p=l.length;if(0==p){var f=[];for(a=0;a<i;a++)f.push(o([t.geometry.coordinates[a]],{parent:-1,winding:function(t){for(var e=0,n=0;n<t.length-1;n++)t[n][0]<t[e][0]&&(e=n);if(Rn([t[(e-1).modulo(t.length-1)],t[e],t[(e+1).modulo(t.length-1)]],!0))var r=1;else r=-1;return r}(t.geometry.coordinates[a])}));var g=c(f);return e(),n(),g}var d=[],y=[];for(a=0;a<i;a++){d.push([]);for(var _=0;_<t.geometry.coordinates[a].length-1;_++)d[a].push([new Ps(t.geometry.coordinates[a][(_+1).modulo(t.geometry.coordinates[a].length-1)],1,[a,_],[a,(_+1).modulo(t.geometry.coordinates[a].length-1)],void 0)]),y.push(new Os(t.geometry.coordinates[a][_],[a,(_-1).modulo(t.geometry.coordinates[a].length-1)],[a,_],void 0,void 0,!1,!0))}for(a=0;a<p;a++)d[l[a][1]][l[a][2]].push(new Ps(l[a][0],l[a][5],[l[a][1],l[a][2]],[l[a][6],l[a][7]],void 0)),l[a][11]&&y.push(new Os(l[a][0],[l[a][1],l[a][2]],[l[a][6],l[a][7]],void 0,void 0,!0,!0));var m=y.length;for(a=0;a<d.length;a++)for(_=0;_<d[a].length;_++)d[a][_].sort(function(t,e){return t.param<e.param?-1:1});var v=[];for(a=0;a<m;a++)v.push({minX:y[a].coord[0],minY:y[a].coord[1],maxX:y[a].coord[0],maxY:y[a].coord[1],index:a});var x=Vo();x.load(v);for(a=0;a<d.length;a++)for(_=0;_<d[a].length;_++)for(var E=0;E<d[a][_].length;E++){b=E==d[a][_].length-1?d[a][(_+1).modulo(t.geometry.coordinates[a].length-1)][0].coord:d[a][_][E+1].coord;var w=x.search({minX:b[0],minY:b[1],maxX:b[0],maxY:b[1]})[0];d[a][_][E].nxtIsectAlongEdgeIn=w.index}for(a=0;a<d.length;a++)for(_=0;_<d[a].length;_++)for(E=0;E<d[a][_].length;E++){var b=d[a][_][E].coord,I=(w=x.search({minX:b[0],minY:b[1],maxX:b[0],maxY:b[1]})[0]).index;I<h?y[I].nxtIsectAlongRingAndEdge2=d[a][_][E].nxtIsectAlongEdgeIn:Tn(y[I].ringAndEdge1,d[a][_][E].ringAndEdgeIn)?y[I].nxtIsectAlongRingAndEdge1=d[a][_][E].nxtIsectAlongEdgeIn:y[I].nxtIsectAlongRingAndEdge2=d[a][_][E].nxtIsectAlongEdgeIn}var N=[];for(a=0,_=0;_<i;_++){var C=a;for(E=0;E<t.geometry.coordinates[_].length-1;E++)y[a].coord[0]<y[C].coord[0]&&(C=a),a++;var S=y[C].nxtIsectAlongRingAndEdge2;for(E=0;E<y.length;E++)if(y[E].nxtIsectAlongRingAndEdge1==C||y[E].nxtIsectAlongRingAndEdge2==C){var M=E;break}var L=Rn([y[M].coord,y[C].coord,y[S].coord],!0)?1:-1;N.push({isect:C,parent:-1,winding:L})}N.sort(function(t,e){return y[t.isect].coord>y[e.isect].coord?-1:1});for(f=[];N.length>0;){var P=N.pop(),O=P.isect,R=P.parent,T=P.winding,A=f.length,D=[y[O].coord],F=O;if(y[O].ringAndEdge1Walkable)var q=y[O].ringAndEdge1,G=y[O].nxtIsectAlongRingAndEdge1;else q=y[O].ringAndEdge2,G=y[O].nxtIsectAlongRingAndEdge2;for(;!Tn(y[O].coord,y[G].coord);){D.push(y[G].coord);var B=void 0;for(a=0;a<N.length;a++)if(N[a].isect==G){B=a;break}if(void 0!=B&&N.splice(B,1),Tn(q,y[G].ringAndEdge1)){if(q=y[G].ringAndEdge2,y[G].ringAndEdge2Walkable=!1,y[G].ringAndEdge1Walkable){var k={isect:G};Rn([y[F].coord,y[G].coord,y[y[G].nxtIsectAlongRingAndEdge2].coord],1==T)?(k.parent=R,k.winding=-T):(k.parent=A,k.winding=T),N.push(k)}F=G,G=y[G].nxtIsectAlongRingAndEdge2}else{if(q=y[G].ringAndEdge1,y[G].ringAndEdge1Walkable=!1,y[G].ringAndEdge2Walkable){k={isect:G};Rn([y[F].coord,y[G].coord,y[y[G].nxtIsectAlongRingAndEdge1].coord],1==T)?(k.parent=R,k.winding=-T):(k.parent=A,k.winding=T),N.push(k)}F=G,G=y[G].nxtIsectAlongRingAndEdge1}}D.push(y[G].coord),f.push(o([D],{index:A,parent:R,winding:T,netWinding:void 0}))}g=c(f);return e(),n(),g},Ps=function(t,e,n,r,i){this.coord=t,this.param=e,this.ringAndEdgeIn=n,this.ringAndEdgeOut=r,this.nxtIsectAlongEdgeIn=i},Os=function(t,e,n,r,i,o,s){this.coord=t,this.ringAndEdge1=e,this.ringAndEdge2=n,this.nxtIsectAlongRingAndEdge1=r,this.nxtIsectAlongRingAndEdge2=i,this.ringAndEdge1Walkable=o,this.ringAndEdge2Walkable=s};Number.prototype.modulo=function(t){return(this%t+t)%t};var Rs=Math.PI/180,Ts=180/Math.PI,As=function(t,e){this.lon=t,this.lat=e,this.x=Rs*t,this.y=Rs*e};As.prototype.view=function(){return String(this.lon).slice(0,4)+\",\"+String(this.lat).slice(0,4)},As.prototype.antipode=function(){var t=-1*this.lat,e=this.lon<0?180+this.lon:-1*(180-this.lon);return new As(e,t)};var Ds=function(){this.coords=[],this.length=0};Ds.prototype.move_to=function(t){this.length++,this.coords.push(t)};var Fs=function(t){this.properties=t||{},this.geometries=[]};Fs.prototype.json=function(){if(this.geometries.length<=0)return{geometry:{type:\"LineString\",coordinates:null},type:\"Feature\",properties:this.properties};if(1===this.geometries.length)return{geometry:{type:\"LineString\",coordinates:this.geometries[0].coords},type:\"Feature\",properties:this.properties};for(var t=[],e=0;e<this.geometries.length;e++)t.push(this.geometries[e].coords);return{geometry:{type:\"MultiLineString\",coordinates:t},type:\"Feature\",properties:this.properties}},Fs.prototype.wkt=function(){for(var t=\"\",e=\"LINESTRING(\",n=function(t){e+=t[0]+\" \"+t[1]+\",\"},r=0;r<this.geometries.length;r++){if(0===this.geometries[r].coords.length)return\"LINESTRING(empty)\";this.geometries[r].coords.forEach(n),t+=e.substring(0,e.length-1)+\")\"}return t};var qs=function(t,e,n){if(!t||void 0===t.x||void 0===t.y)throw new Error(\"GreatCircle constructor expects two args: start and end objects with x and y properties\");if(!e||void 0===e.x||void 0===e.y)throw new Error(\"GreatCircle constructor expects two args: start and end objects with x and y properties\");this.start=new As(t.x,t.y),this.end=new As(e.x,e.y),this.properties=n||{};var r=this.start.x-this.end.x,i=this.start.y-this.end.y,o=Math.pow(Math.sin(i/2),2)+Math.cos(this.start.y)*Math.cos(this.end.y)*Math.pow(Math.sin(r/2),2);if(this.g=2*Math.asin(Math.sqrt(o)),this.g===Math.PI)throw new Error(\"it appears \"+t.view()+\" and \"+e.view()+\" are 'antipodal', e.g diametrically opposite, thus there is no single route but rather infinite\");if(isNaN(this.g))throw new Error(\"could not calculate great circle between \"+t+\" and \"+e)};qs.prototype.interpolate=function(t){var e=Math.sin((1-t)*this.g)/Math.sin(this.g),n=Math.sin(t*this.g)/Math.sin(this.g),r=e*Math.cos(this.start.y)*Math.cos(this.start.x)+n*Math.cos(this.end.y)*Math.cos(this.end.x),i=e*Math.cos(this.start.y)*Math.sin(this.start.x)+n*Math.cos(this.end.y)*Math.sin(this.end.x),o=e*Math.sin(this.start.y)+n*Math.sin(this.end.y),s=Ts*Math.atan2(o,Math.sqrt(Math.pow(r,2)+Math.pow(i,2)));return[Ts*Math.atan2(i,r),s]},qs.prototype.Arc=function(t,e){var n=[];if(!t||t<=2)n.push([this.start.lon,this.start.lat]),n.push([this.end.lon,this.end.lat]);else for(var r=1/(t-1),i=0;i<t;++i){var o=r*i,s=this.interpolate(o);n.push(s)}for(var a=!1,u=0,c=e&&e.offset?e.offset:10,h=180-c,l=-180+c,p=360-c,f=1;f<n.length;++f){var g=n[f-1][0],d=n[f][0],y=Math.abs(d-g);y>p&&(d>h&&g<l||g>h&&d<l)?a=!0:y>u&&(u=y)}var _=[];if(a&&u<c){var m=[];_.push(m);for(var v=0;v<n.length;++v){var x=parseFloat(n[v][0]);if(v>0&&Math.abs(x-n[v-1][0])>p){var E=parseFloat(n[v-1][0]),w=parseFloat(n[v-1][1]),b=parseFloat(n[v][0]),I=parseFloat(n[v][1]);if(E>-180&&E<l&&180===b&&v+1<n.length&&n[v-1][0]>-180&&n[v-1][0]<l){m.push([-180,n[v][1]]),v++,m.push([n[v][0],n[v][1]]);continue}if(E>h&&E<180&&-180===b&&v+1<n.length&&n[v-1][0]>h&&n[v-1][0]<180){m.push([180,n[v][1]]),v++,m.push([n[v][0],n[v][1]]);continue}if(E<l&&b>h){var N=E;E=b,b=N;var C=w;w=I,I=C}if(E>h&&b<l&&(b+=360),E<=180&&b>=180&&E<b){var S=(180-E)/(b-E),M=S*I+(1-S)*w;m.push([n[v-1][0]>h?180:-180,M]),(m=[]).push([n[v-1][0]>h?-180:180,M]),_.push(m)}else m=[],_.push(m);m.push([x,n[v][1]])}else m.push([n[v][0],n[v][1]])}}else{var L=[];_.push(L);for(var P=0;P<n.length;++P)L.push([n[P][0],n[P][1]])}for(var O=new Fs(this.properties),R=0;R<_.length;++R){var T=new Ds;O.geometries.push(T);for(var A=_[R],D=0;D<A.length;++D)T.move_to(A[D])}return O};var Gs=Yn;Yn.polyline=Yn,Yn.polygon=function(t,e){var n,r,i,o,s,a,u;for(r=1;r<=8;r*=2){for(n=[],o=!(Hn(i=t[t.length-1],e)&r),s=0;s<t.length;s++)(u=!(Hn(a=t[s],e)&r))!==o&&n.push(Vn(i,a,r,e)),u&&n.push(a),i=a,o=u;if(!(t=n).length)break}return n};var Bs=Array.prototype.slice,ks={successCallback:null,verbose:!1,polygons:!1},zs={},js=64,Xs=16,Us=4,Ys=1,Vs=[],Hs=[],Ws=[],Js=[],Zs=[],Ks=[],Qs=[],$s=[],ta=[],ea=[],na=[],ra=[],ia=[],oa=[],sa=[],aa=[],ua=[],ca=[],ha=[],la=[],pa=[],fa=[],ga=[],da=[];Qs[85]=ea[85]=-1,$s[85]=na[85]=0,ta[85]=ra[85]=1,ha[85]=fa[85]=1,la[85]=ga[85]=0,pa[85]=da[85]=1,Vs[85]=Js[85]=0,Hs[85]=Zs[85]=-1,Ws[85]=sa[85]=0,aa[85]=ia[85]=0,ua[85]=oa[85]=1,Ks[85]=ca[85]=1,fa[1]=fa[169]=0,ga[1]=ga[169]=-1,da[1]=da[169]=0,ia[1]=ia[169]=-1,oa[1]=oa[169]=0,sa[1]=sa[169]=0,ea[4]=ea[166]=0,na[4]=na[166]=-1,ra[4]=ra[166]=1,aa[4]=aa[166]=1,ua[4]=ua[166]=0,ca[4]=ca[166]=0,Qs[16]=Qs[154]=0,$s[16]=$s[154]=1,ta[16]=ta[154]=1,Js[16]=Js[154]=1,Zs[16]=Zs[154]=0,Ks[16]=Ks[154]=1,ha[64]=ha[106]=0,la[64]=la[106]=1,pa[64]=pa[106]=0,Vs[64]=Vs[106]=-1,Hs[64]=Hs[106]=0,Ws[64]=Ws[106]=1,ha[2]=ha[168]=0,la[2]=la[168]=-1,pa[2]=pa[168]=1,fa[2]=fa[168]=0,ga[2]=ga[168]=-1,da[2]=da[168]=0,ia[2]=ia[168]=-1,oa[2]=oa[168]=0,sa[2]=sa[168]=0,aa[2]=aa[168]=-1,ua[2]=ua[168]=0,ca[2]=ca[168]=1,Qs[8]=Qs[162]=0,$s[8]=$s[162]=-1,ta[8]=ta[162]=0,ea[8]=ea[162]=0,na[8]=na[162]=-1,ra[8]=ra[162]=1,ia[8]=ia[162]=1,oa[8]=oa[162]=0,sa[8]=sa[162]=1,aa[8]=aa[162]=1,ua[8]=ua[162]=0,ca[8]=ca[162]=0,Qs[32]=Qs[138]=0,$s[32]=$s[138]=1,ta[32]=ta[138]=1,ea[32]=ea[138]=0,na[32]=na[138]=1,ra[32]=ra[138]=0,Vs[32]=Vs[138]=1,Hs[32]=Hs[138]=0,Ws[32]=Ws[138]=0,Js[32]=Js[138]=1,Zs[32]=Zs[138]=0,Ks[32]=Ks[138]=1,fa[128]=fa[42]=0,ga[128]=ga[42]=1,da[128]=da[42]=1,ha[128]=ha[42]=0,la[128]=la[42]=1,pa[128]=pa[42]=0,Vs[128]=Vs[42]=-1,Hs[128]=Hs[42]=0,Ws[128]=Ws[42]=1,Js[128]=Js[42]=-1,Zs[128]=Zs[42]=0,Ks[128]=Ks[42]=0,ea[5]=ea[165]=-1,na[5]=na[165]=0,ra[5]=ra[165]=0,fa[5]=fa[165]=1,ga[5]=ga[165]=0,da[5]=da[165]=0,aa[20]=aa[150]=0,ua[20]=ua[150]=1,ca[20]=ca[150]=1,Js[20]=Js[150]=0,Zs[20]=Zs[150]=-1,Ks[20]=Ks[150]=1,Qs[80]=Qs[90]=-1,$s[80]=$s[90]=0,ta[80]=ta[90]=1,ha[80]=ha[90]=1,la[80]=la[90]=0,pa[80]=pa[90]=1,ia[65]=ia[105]=0,oa[65]=oa[105]=1,sa[65]=sa[105]=0,Vs[65]=Vs[105]=0,Hs[65]=Hs[105]=-1,Ws[65]=Ws[105]=0,Qs[160]=Qs[10]=-1,$s[160]=$s[10]=0,ta[160]=ta[10]=1,ea[160]=ea[10]=-1,na[160]=na[10]=0,ra[160]=ra[10]=0,fa[160]=fa[10]=1,ga[160]=ga[10]=0,da[160]=da[10]=0,ha[160]=ha[10]=1,la[160]=la[10]=0,pa[160]=pa[10]=1,aa[130]=aa[40]=0,ua[130]=ua[40]=1,ca[130]=ca[40]=1,ia[130]=ia[40]=0,oa[130]=oa[40]=1,sa[130]=sa[40]=0,Vs[130]=Vs[40]=0,Hs[130]=Hs[40]=-1,Ws[130]=Ws[40]=0,Js[130]=Js[40]=0,Zs[130]=Zs[40]=-1,Ks[130]=Ks[40]=1,ea[37]=ea[133]=0,na[37]=na[133]=1,ra[37]=ra[133]=1,fa[37]=fa[133]=0,ga[37]=ga[133]=1,da[37]=da[133]=0,Vs[37]=Vs[133]=-1,Hs[37]=Hs[133]=0,Ws[37]=Ws[133]=0,Js[37]=Js[133]=1,Zs[37]=Zs[133]=0,Ks[37]=Ks[133]=0,aa[148]=aa[22]=-1,ua[148]=ua[22]=0,ca[148]=ca[22]=0,fa[148]=fa[22]=0,ga[148]=ga[22]=-1,da[148]=da[22]=1,ha[148]=ha[22]=0,la[148]=la[22]=1,pa[148]=pa[22]=1,Js[148]=Js[22]=-1,Zs[148]=Zs[22]=0,Ks[148]=Ks[22]=1,Qs[82]=Qs[88]=0,$s[82]=$s[88]=-1,ta[82]=ta[88]=1,aa[82]=aa[88]=1,ua[82]=ua[88]=0,ca[82]=ca[88]=1,ia[82]=ia[88]=-1,oa[82]=oa[88]=0,sa[82]=sa[88]=1,ha[82]=ha[88]=0,la[82]=la[88]=-1,pa[82]=pa[88]=0,Qs[73]=Qs[97]=0,$s[73]=$s[97]=1,ta[73]=ta[97]=0,ea[73]=ea[97]=0,na[73]=na[97]=-1,ra[73]=ra[97]=0,ia[73]=ia[97]=1,oa[73]=oa[97]=0,sa[73]=sa[97]=0,Vs[73]=Vs[97]=1,Hs[73]=Hs[97]=0,Ws[73]=Ws[97]=1,Qs[145]=Qs[25]=0,$s[145]=$s[25]=-1,ta[145]=ta[25]=0,ia[145]=ia[25]=1,oa[145]=oa[25]=0,sa[145]=sa[25]=1,fa[145]=fa[25]=0,ga[145]=ga[25]=1,da[145]=da[25]=1,Js[145]=Js[25]=-1,Zs[145]=Zs[25]=0,Ks[145]=Ks[25]=0,ea[70]=ea[100]=0,na[70]=na[100]=1,ra[70]=ra[100]=0,aa[70]=aa[100]=-1,ua[70]=ua[100]=0,ca[70]=ca[100]=1,ha[70]=ha[100]=0,la[70]=la[100]=-1,pa[70]=pa[100]=1,Vs[70]=Vs[100]=1,Hs[70]=Hs[100]=0,Ws[70]=Ws[100]=0,ea[101]=ea[69]=0,na[101]=na[69]=1,ra[101]=ra[69]=0,Vs[101]=Vs[69]=1,Hs[101]=Hs[69]=0,Ws[101]=Ws[69]=0,fa[149]=fa[21]=0,ga[149]=ga[21]=1,da[149]=da[21]=1,Js[149]=Js[21]=-1,Zs[149]=Zs[21]=0,Ks[149]=Ks[21]=0,aa[86]=aa[84]=-1,ua[86]=ua[84]=0,ca[86]=ca[84]=1,ha[86]=ha[84]=0,la[86]=la[84]=-1,pa[86]=pa[84]=1,Qs[89]=Qs[81]=0,$s[89]=$s[81]=-1,ta[89]=ta[81]=0,ia[89]=ia[81]=1,oa[89]=oa[81]=0,sa[89]=sa[81]=1,Qs[96]=Qs[74]=0,$s[96]=$s[74]=1,ta[96]=ta[74]=0,ea[96]=ea[74]=-1,na[96]=na[74]=0,ra[96]=ra[74]=1,ha[96]=ha[74]=1,la[96]=la[74]=0,pa[96]=pa[74]=0,Vs[96]=Vs[74]=1,Hs[96]=Hs[74]=0,Ws[96]=Ws[74]=1,Qs[24]=Qs[146]=0,$s[24]=$s[146]=-1,ta[24]=ta[146]=1,aa[24]=aa[146]=1,ua[24]=ua[146]=0,ca[24]=ca[146]=1,ia[24]=ia[146]=0,oa[24]=oa[146]=1,sa[24]=sa[146]=1,Js[24]=Js[146]=0,Zs[24]=Zs[146]=-1,Ks[24]=Ks[146]=0,ea[6]=ea[164]=-1,na[6]=na[164]=0,ra[6]=ra[164]=1,aa[6]=aa[164]=-1,ua[6]=ua[164]=0,ca[6]=ca[164]=0,fa[6]=fa[164]=0,ga[6]=ga[164]=-1,da[6]=da[164]=1,ha[6]=ha[164]=1,la[6]=la[164]=0,pa[6]=pa[164]=0,ia[129]=ia[41]=0,oa[129]=oa[41]=1,sa[129]=sa[41]=1,fa[129]=fa[41]=0,ga[129]=ga[41]=1,da[129]=da[41]=0,Vs[129]=Vs[41]=-1,Hs[129]=Hs[41]=0,Ws[129]=Ws[41]=0,Js[129]=Js[41]=0,Zs[129]=Zs[41]=-1,Ks[129]=Ks[41]=0,aa[66]=aa[104]=0,ua[66]=ua[104]=1,ca[66]=ca[104]=0,ia[66]=ia[104]=-1,oa[66]=oa[104]=0,sa[66]=sa[104]=1,ha[66]=ha[104]=0,la[66]=la[104]=-1,pa[66]=pa[104]=0,Vs[66]=Vs[104]=0,Hs[66]=Hs[104]=-1,Ws[66]=Ws[104]=1,Qs[144]=Qs[26]=-1,$s[144]=$s[26]=0,ta[144]=ta[26]=0,fa[144]=fa[26]=1,ga[144]=ga[26]=0,da[144]=da[26]=1,ha[144]=ha[26]=0,la[144]=la[26]=1,pa[144]=pa[26]=1,Js[144]=Js[26]=-1,Zs[144]=Zs[26]=0,Ks[144]=Ks[26]=1,ea[36]=ea[134]=0,na[36]=na[134]=1,ra[36]=ra[134]=1,aa[36]=aa[134]=0,ua[36]=ua[134]=1,ca[36]=ca[134]=0,Vs[36]=Vs[134]=0,Hs[36]=Hs[134]=-1,Ws[36]=Ws[134]=1,Js[36]=Js[134]=1,Zs[36]=Zs[134]=0,Ks[36]=Ks[134]=0,Qs[9]=Qs[161]=-1,$s[9]=$s[161]=0,ta[9]=ta[161]=0,ea[9]=ea[161]=0,na[9]=na[161]=-1,ra[9]=ra[161]=0,ia[9]=ia[161]=1,oa[9]=oa[161]=0,sa[9]=sa[161]=0,fa[9]=fa[161]=1,ga[9]=ga[161]=0,da[9]=da[161]=1,Qs[136]=0,$s[136]=1,ta[136]=1,ea[136]=0,na[136]=1,ra[136]=0,aa[136]=-1,ua[136]=0,ca[136]=1,ia[136]=-1,oa[136]=0,sa[136]=0,fa[136]=0,ga[136]=-1,da[136]=0,ha[136]=0,la[136]=-1,pa[136]=1,Vs[136]=1,Hs[136]=0,Ws[136]=0,Js[136]=1,Zs[136]=0,Ks[136]=1,Qs[34]=0,$s[34]=-1,ta[34]=0,ea[34]=0,na[34]=-1,ra[34]=1,aa[34]=1,ua[34]=0,ca[34]=0,ia[34]=1,oa[34]=0,sa[34]=1,fa[34]=0,ga[34]=1,da[34]=1,ha[34]=0,la[34]=1,pa[34]=0,Vs[34]=-1,Hs[34]=0,Ws[34]=1,Js[34]=-1,Zs[34]=0,Ks[34]=0,Qs[35]=0,$s[35]=1,ta[35]=1,ea[35]=0,na[35]=-1,ra[35]=1,aa[35]=1,ua[35]=0,ca[35]=0,ia[35]=-1,oa[35]=0,sa[35]=0,fa[35]=0,ga[35]=-1,da[35]=0,ha[35]=0,la[35]=1,pa[35]=0,Vs[35]=-1,Hs[35]=0,Ws[35]=1,Js[35]=1,Zs[35]=0,Ks[35]=1,Qs[153]=0,$s[153]=1,ta[153]=1,ia[153]=-1,oa[153]=0,sa[153]=0,fa[153]=0,ga[153]=-1,da[153]=0,Js[153]=1,Zs[153]=0,Ks[153]=1,ea[102]=0,na[102]=-1,ra[102]=1,aa[102]=1,ua[102]=0,ca[102]=0,ha[102]=0,la[102]=1,pa[102]=0,Vs[102]=-1,Hs[102]=0,Ws[102]=1,Qs[155]=0,$s[155]=-1,ta[155]=0,ia[155]=1,oa[155]=0,sa[155]=1,fa[155]=0,ga[155]=1,da[155]=1,Js[155]=-1,Zs[155]=0,Ks[155]=0,ea[103]=0,na[103]=1,ra[103]=0,aa[103]=-1,ua[103]=0,ca[103]=1,ha[103]=0,la[103]=-1,pa[103]=1,Vs[103]=1,Hs[103]=0,Ws[103]=0,Qs[152]=0,$s[152]=1,ta[152]=1,aa[152]=-1,ua[152]=0,ca[152]=1,ia[152]=-1,oa[152]=0,sa[152]=0,fa[152]=0,ga[152]=-1,da[152]=0,ha[152]=0,la[152]=-1,pa[152]=1,Js[152]=1,Zs[152]=0,Ks[152]=1,Qs[156]=0,$s[156]=-1,ta[156]=1,aa[156]=1,ua[156]=0,ca[156]=1,ia[156]=-1,oa[156]=0,sa[156]=0,fa[156]=0,ga[156]=-1,da[156]=0,ha[156]=0,la[156]=1,pa[156]=1,Js[156]=-1,Zs[156]=0,Ks[156]=1,Qs[137]=0,$s[137]=1,ta[137]=1,ea[137]=0,na[137]=1,ra[137]=0,ia[137]=-1,oa[137]=0,sa[137]=0,fa[137]=0,ga[137]=-1,da[137]=0,Vs[137]=1,Hs[137]=0,Ws[137]=0,Js[137]=1,Zs[137]=0,Ks[137]=1,Qs[139]=0,$s[139]=1,ta[139]=1,ea[139]=0,na[139]=-1,ra[139]=0,ia[139]=1,oa[139]=0,sa[139]=0,fa[139]=0,ga[139]=1,da[139]=0,Vs[139]=-1,Hs[139]=0,Ws[139]=0,Js[139]=1,Zs[139]=0,Ks[139]=1,Qs[98]=0,$s[98]=-1,ta[98]=0,ea[98]=0,na[98]=-1,ra[98]=1,aa[98]=1,ua[98]=0,ca[98]=0,ia[98]=1,oa[98]=0,sa[98]=1,ha[98]=0,la[98]=1,pa[98]=0,Vs[98]=-1,Hs[98]=0,Ws[98]=1,Qs[99]=0,$s[99]=1,ta[99]=0,ea[99]=0,na[99]=-1,ra[99]=1,aa[99]=1,ua[99]=0,ca[99]=0,ia[99]=-1,oa[99]=0,sa[99]=1,ha[99]=0,la[99]=-1,pa[99]=0,Vs[99]=1,Hs[99]=0,Ws[99]=1,ea[38]=0,na[38]=-1,ra[38]=1,aa[38]=1,ua[38]=0,ca[38]=0,fa[38]=0,ga[38]=1,da[38]=1,ha[38]=0,la[38]=1,pa[38]=0,Vs[38]=-1,Hs[38]=0,Ws[38]=1,Js[38]=-1,Zs[38]=0,Ks[38]=0,ea[39]=0,na[39]=1,ra[39]=1,aa[39]=-1,ua[39]=0,ca[39]=0,fa[39]=0,ga[39]=-1,da[39]=1,ha[39]=0,la[39]=1,pa[39]=0,Vs[39]=-1,Hs[39]=0,Ws[39]=1,Js[39]=1,Zs[39]=0,Ks[39]=0;var ya=function(t){return[[t.bottomleft,0],[0,0],[0,t.leftbottom]]},_a=function(t){return[[1,t.rightbottom],[1,0],[t.bottomright,0]]},ma=function(t){return[[t.topright,1],[1,1],[1,t.righttop]]},va=function(t){return[[0,t.lefttop],[0,1],[t.topleft,1]]},xa=function(t){return[[t.bottomright,0],[t.bottomleft,0],[0,t.leftbottom],[0,t.lefttop]]},Ea=function(t){return[[t.bottomright,0],[t.bottomleft,0],[1,t.righttop],[1,t.rightbottom]]},wa=function(t){return[[1,t.righttop],[1,t.rightbottom],[t.topleft,1],[t.topright,1]]},ba=function(t){return[[0,t.leftbottom],[0,t.lefttop],[t.topleft,1],[t.topright,1]]},Ia=[],Na=[],Ca=[],Sa=[],Ma=[],La=[],Pa=[],Oa=[];Sa[1]=Ma[1]=18,Sa[169]=Ma[169]=18,Ca[4]=Na[4]=12,Ca[166]=Na[166]=12,Ia[16]=Oa[16]=4,Ia[154]=Oa[154]=4,La[64]=Pa[64]=22,La[106]=Pa[106]=22,Ca[2]=La[2]=17,Sa[2]=Ma[2]=18,Ca[168]=La[168]=17,Sa[168]=Ma[168]=18,Ia[8]=Sa[8]=9,Na[8]=Ca[8]=12,Ia[162]=Sa[162]=9,Na[162]=Ca[162]=12,Ia[32]=Oa[32]=4,Na[32]=Pa[32]=1,Ia[138]=Oa[138]=4,Na[138]=Pa[138]=1,Ma[128]=Oa[128]=21,La[128]=Pa[128]=22,Ma[42]=Oa[42]=21,La[42]=Pa[42]=22,Na[5]=Ma[5]=14,Na[165]=Ma[165]=14,Ca[20]=Oa[20]=6,Ca[150]=Oa[150]=6,Ia[80]=La[80]=11,Ia[90]=La[90]=11,Sa[65]=Pa[65]=3,Sa[105]=Pa[105]=3,Ia[160]=La[160]=11,Na[160]=Ma[160]=14,Ia[10]=La[10]=11,Na[10]=Ma[10]=14,Ca[130]=Oa[130]=6,Sa[130]=Pa[130]=3,Ca[40]=Oa[40]=6,Sa[40]=Pa[40]=3,Na[101]=Pa[101]=1,Na[69]=Pa[69]=1,Ma[149]=Oa[149]=21,Ma[21]=Oa[21]=21,Ca[86]=La[86]=17,Ca[84]=La[84]=17,Ia[89]=Sa[89]=9,Ia[81]=Sa[81]=9,Ia[96]=Pa[96]=0,Na[96]=La[96]=15,Ia[74]=Pa[74]=0,Na[74]=La[74]=15,Ia[24]=Ca[24]=8,Sa[24]=Oa[24]=7,Ia[146]=Ca[146]=8,Sa[146]=Oa[146]=7,Na[6]=La[6]=15,Ca[6]=Ma[6]=16,Na[164]=La[164]=15,Ca[164]=Ma[164]=16,Sa[129]=Oa[129]=7,Ma[129]=Pa[129]=20,Sa[41]=Oa[41]=7,Ma[41]=Pa[41]=20,Ca[66]=Pa[66]=2,Sa[66]=La[66]=19,Ca[104]=Pa[104]=2,Sa[104]=La[104]=19,Ia[144]=Ma[144]=10,La[144]=Oa[144]=23,Ia[26]=Ma[26]=10,La[26]=Oa[26]=23,Na[36]=Oa[36]=5,Ca[36]=Pa[36]=2,Na[134]=Oa[134]=5,Ca[134]=Pa[134]=2,Ia[9]=Ma[9]=10,Na[9]=Sa[9]=13,Ia[161]=Ma[161]=10,Na[161]=Sa[161]=13,Na[37]=Oa[37]=5,Ma[37]=Pa[37]=20,Na[133]=Oa[133]=5,Ma[133]=Pa[133]=20,Ca[148]=Ma[148]=16,La[148]=Oa[148]=23,Ca[22]=Ma[22]=16,La[22]=Oa[22]=23,Ia[82]=Ca[82]=8,Sa[82]=La[82]=19,Ia[88]=Ca[88]=8,Sa[88]=La[88]=19,Ia[73]=Pa[73]=0,Na[73]=Sa[73]=13,Ia[97]=Pa[97]=0,Na[97]=Sa[97]=13,Ia[145]=Sa[145]=9,Ma[145]=Oa[145]=21,Ia[25]=Sa[25]=9,Ma[25]=Oa[25]=21,Na[70]=Pa[70]=1,Ca[70]=La[70]=17,Na[100]=Pa[100]=1,Ca[100]=La[100]=17,Ia[34]=Sa[34]=9,Na[34]=Ca[34]=12,Ma[34]=Oa[34]=21,La[34]=Pa[34]=22,Ia[136]=Oa[136]=4,Na[136]=Pa[136]=1,Ca[136]=La[136]=17,Sa[136]=Ma[136]=18,Ia[35]=Oa[35]=4,Na[35]=Ca[35]=12,Sa[35]=Ma[35]=18,La[35]=Pa[35]=22,Ia[153]=Oa[153]=4,Sa[153]=Ma[153]=18,Na[102]=Ca[102]=12,La[102]=Pa[102]=22,Ia[155]=Sa[155]=9,Ma[155]=Oa[155]=23,Na[103]=Pa[103]=1,Ca[103]=La[103]=17,Ia[152]=Oa[152]=4,Ca[152]=La[152]=17,Sa[152]=Ma[152]=18,Ia[156]=Ca[156]=8,Sa[156]=Ma[156]=18,La[156]=Oa[156]=23,Ia[137]=Oa[137]=4,Na[137]=Pa[137]=1,Sa[137]=Ma[137]=18,Ia[139]=Oa[139]=4,Na[139]=Sa[139]=13,Ma[139]=Pa[139]=20,Ia[98]=Sa[98]=9,Na[98]=Ca[98]=12,La[98]=Pa[98]=22,Ia[99]=Pa[99]=0,Na[99]=Ca[99]=12,Sa[99]=La[99]=19,Na[38]=Ca[38]=12,Ma[38]=Oa[38]=21,La[38]=Pa[38]=22,Na[39]=Oa[39]=5,Ca[39]=Ma[39]=16,La[39]=Pa[39]=22;var Ra=[];Ra[1]=Ra[169]=ya,Ra[4]=Ra[166]=_a,Ra[16]=Ra[154]=ma,Ra[64]=Ra[106]=va,Ra[168]=Ra[2]=xa,Ra[162]=Ra[8]=Ea,Ra[138]=Ra[32]=wa,Ra[42]=Ra[128]=ba,Ra[5]=Ra[165]=function(t){return[[0,0],[0,t.leftbottom],[1,t.rightbottom],[1,0]]},Ra[20]=Ra[150]=function(t){return[[1,0],[t.bottomright,0],[t.topright,1],[1,1]]},Ra[80]=Ra[90]=function(t){return[[1,1],[1,t.righttop],[0,t.lefttop],[0,1]]},Ra[65]=Ra[105]=function(t){return[[t.bottomleft,0],[0,0],[0,1],[t.topleft,1]]},Ra[160]=Ra[10]=function(t){return[[1,t.righttop],[1,t.rightbottom],[0,t.leftbottom],[0,t.lefttop]]},Ra[130]=Ra[40]=function(t){return[[t.topleft,1],[t.topright,1],[t.bottomright,0],[t.bottomleft,0]]},Ra[85]=function(){return[[0,0],[0,1],[1,1],[1,0]]},Ra[101]=Ra[69]=function(t){return[[1,t.rightbottom],[1,0],[0,0],[0,1],[t.topleft,1]]},Ra[149]=Ra[21]=function(t){return[[t.topright,1],[1,1],[1,0],[0,0],[0,t.leftbottom]]},Ra[86]=Ra[84]=function(t){return[[1,0],[t.bottomright,0],[0,t.lefttop],[0,1],[1,1]]},Ra[89]=Ra[81]=function(t){return[[1,1],[1,t.righttop],[t.bottomleft,0],[0,0],[0,1]]},Ra[96]=Ra[74]=function(t){return[[1,t.righttop],[1,t.rightbottom],[0,t.lefttop],[0,1],[t.topleft,1]]},Ra[24]=Ra[146]=function(t){return[[1,1],[1,t.righttop],[t.bottomright,0],[t.bottomleft,0],[t.topright,1]]},Ra[6]=Ra[164]=function(t){return[[1,t.rightbottom],[1,0],[t.bottomright,0],[0,t.leftbottom],[0,t.lefttop]]},Ra[129]=Ra[41]=function(t){return[[t.topright,1],[t.bottomleft,0],[0,0],[0,t.leftbottom],[t.topleft,1]]},Ra[66]=Ra[104]=function(t){return[[t.bottomright,0],[t.bottomleft,0],[0,t.lefttop],[0,1],[t.topleft,1]]},Ra[144]=Ra[26]=function(t){return[[1,1],[1,t.righttop],[0,t.leftbottom],[0,t.lefttop],[t.topright,1]]},Ra[36]=Ra[134]=function(t){return[[1,t.rightbottom],[1,0],[t.bottomright,0],[t.topleft,1],[t.topright,1]]},Ra[9]=Ra[161]=function(t){return[[1,t.righttop],[1,t.rightbottom],[t.bottomleft,0],[0,0],[0,t.leftbottom]]},Ra[37]=Ra[133]=function(t){return[[1,t.rightbottom],[1,0],[0,0],[0,t.leftbottom],[t.topleft,1],[t.topright,1]]},Ra[148]=Ra[22]=function(t){return[[1,1],[1,0],[t.bottomright,0],[0,t.leftbottom],[0,t.lefttop],[t.topright,1]]},Ra[82]=Ra[88]=function(t){return[[1,1],[1,t.righttop],[t.bottomright,0],[t.bottomleft,0],[0,t.lefttop],[0,1]]},Ra[73]=Ra[97]=function(t){return[[1,t.righttop],[1,t.rightbottom],[t.bottomleft,0],[0,0],[0,1],[t.topleft,1]]},Ra[145]=Ra[25]=function(t){return[[1,1],[1,t.righttop],[t.bottomleft,0],[0,0],[0,t.leftbottom],[t.topright,1]]},Ra[70]=Ra[100]=function(t){return[[1,t.rightbottom],[1,0],[t.bottomright,0],[0,t.lefttop],[0,1],[t.topleft,1]]},Ra[34]=function(t){return[ba(t),Ea(t)]},Ra[35]=function(t){return[[1,t.righttop],[1,t.rightbottom],[t.bottomright,0],[t.bottomleft,0],[0,t.leftbottom],[0,t.lefttop],[t.topleft,1],[t.topright,1]]},Ra[136]=function(t){return[wa(t),xa(t)]},Ra[153]=function(t){return[ma(t),ya(t)]},Ra[102]=function(t){return[_a(t),va(t)]},Ra[155]=function(t){return[[1,1],[1,t.righttop],[t.bottomleft,0],[0,0],[0,t.leftbottom],[t.topright,1]]},Ra[103]=function(t){return[[1,t.rightbottom],[1,0],[t.bottomright,0],[0,t.lefttop],[0,1],[t.topleft,1]]},Ra[152]=function(t){return[ma(t),xa(t)]},Ra[156]=function(t){return[[1,1],[1,t.righttop],[t.bottomright,0],[t.bottomleft,0],[0,t.leftbottom],[0,t.lefttop],[t.topright,1]]},Ra[137]=function(t){return[wa(t),ya(t)]},Ra[139]=function(t){return[[1,t.righttop],[1,t.rightbottom],[t.bottomleft,0],[0,0],[0,t.leftbottom],[t.topleft,1],[t.topright,1]]},Ra[98]=function(t){return[Ea(t),va(t)]},Ra[99]=function(t){return[[1,t.righttop],[1,t.rightbottom],[t.bottomright,0],[t.bottomleft,0],[0,t.lefttop],[0,1],[t.topleft,1]]},Ra[38]=function(t){return[_a(t),ba(t)]},Ra[39]=function(t){return[[1,t.rightbottom],[1,0],[t.bottomright,0],[0,t.leftbottom],[0,t.lefttop],[t.topleft,1],[t.topright,1]]};var Ta=function t(e){this.id=t.buildId(e),this.coordinates=e,this.innerEdges=[],this.outerEdges=[],this.outerEdgesSorted=!1};Ta.buildId=function(t){return t.join(\",\")},Ta.prototype.removeInnerEdge=function(t){this.innerEdges=this.innerEdges.filter(function(e){return e.from.id!==t.from.id})},Ta.prototype.removeOuterEdge=function(t){this.outerEdges=this.outerEdges.filter(function(e){return e.to.id!==t.to.id})},Ta.prototype.addOuterEdge=function(t){this.outerEdges.push(t),this.outerEdgesSorted=!1},Ta.prototype.sortOuterEdges=function(){var t=this;this.outerEdgesSorted||(this.outerEdges.sort(function(e,n){var r=e.to,i=n.to;if(r.coordinates[0]-t.coordinates[0]>=0&&i.coordinates[0]-t.coordinates[0]<0)return 1;if(r.coordinates[0]-t.coordinates[0]<0&&i.coordinates[0]-t.coordinates[0]>=0)return-1;if(r.coordinates[0]-t.coordinates[0]==0&&i.coordinates[0]-t.coordinates[0]==0)return r.coordinates[1]-t.coordinates[1]>=0||i.coordinates[1]-t.coordinates[1]>=0?r.coordinates[1]-i.coordinates[1]:i.coordinates[1]-r.coordinates[1];var o=xr(t.coordinates,r.coordinates,i.coordinates);if(o<0)return 1;if(o>0)return-1;return Math.pow(r.coordinates[0]-t.coordinates[0],2)+Math.pow(r.coordinates[1]-t.coordinates[1],2)-(Math.pow(i.coordinates[0]-t.coordinates[0],2)+Math.pow(i.coordinates[1]-t.coordinates[1],2))}),this.outerEdgesSorted=!0)},Ta.prototype.getOuterEdges=function(){return this.sortOuterEdges(),this.outerEdges},Ta.prototype.getOuterEdge=function(t){return this.sortOuterEdges(),this.outerEdges[t]},Ta.prototype.addInnerEdge=function(t){this.innerEdges.push(t)};var Aa=function(t,e){this.from=t,this.to=e,this.next=void 0,this.label=void 0,this.symetric=void 0,this.ring=void 0,this.from.addOuterEdge(this),this.to.addInnerEdge(this)};Aa.prototype.getSymetric=function(){return this.symetric||(this.symetric=new Aa(this.to,this.from),this.symetric.symetric=this),this.symetric},Aa.prototype.deleteEdge=function(){this.from.removeOuterEdge(this),this.to.removeInnerEdge(this)},Aa.prototype.isEqual=function(t){return this.from.id===t.from.id&&this.to.id===t.to.id},Aa.prototype.toString=function(){return\"Edge { \"+this.from.id+\" -> \"+this.to.id+\" }\"},Aa.prototype.toLineString=function(){return a([this.from.coordinates,this.to.coordinates])},Aa.prototype.compareTo=function(t){return xr(t.from.coordinates,t.to.coordinates,this.to.coordinates)};var Da=function(){this.edges=[],this.polygon=void 0,this.envelope=void 0},Fa={length:{configurable:!0}};Da.prototype.push=function(t){this[this.edges.length]=t,this.edges.push(t),this.polygon=this.envelope=void 0},Da.prototype.get=function(t){return this.edges[t]},Fa.length.get=function(){return this.edges.length},Da.prototype.forEach=function(t){this.edges.forEach(t)},Da.prototype.map=function(t){return this.edges.map(t)},Da.prototype.some=function(t){return this.edges.some(t)},Da.prototype.isValid=function(){return!0},Da.prototype.isHole=function(){var t=this,e=this.edges.reduce(function(e,n,r){return n.from.coordinates[1]>t.edges[e].from.coordinates[1]&&(e=r),e},0),n=(0===e?this.length:e)-1,r=(e+1)%this.length,i=xr(this.edges[n].from.coordinates,this.edges[e].from.coordinates,this.edges[r].from.coordinates);return 0===i?this.edges[n].from.coordinates[0]>this.edges[r].from.coordinates[0]:i>0},Da.prototype.toMultiPoint=function(){return l(this.edges.map(function(t){return t.from.coordinates}))},Da.prototype.toPolygon=function(){if(this.polygon)return this.polygon;var t=this.edges.map(function(t){return t.from.coordinates});return t.push(this.edges[0].from.coordinates),this.polygon=o([t])},Da.prototype.getEnvelope=function(){return this.envelope?this.envelope:this.envelope=he(this.toPolygon())},Da.findEdgeRingContaining=function(t,e){var n,i,o=t.getEnvelope();return e.forEach(function(e){var s=e.getEnvelope();if(i&&(n=i.getEnvelope()),!function(t,e){var n=t.geometry.coordinates.map(function(t){return t[0]}),r=t.geometry.coordinates.map(function(t){return t[1]}),i=e.geometry.coordinates.map(function(t){return t[0]}),o=e.geometry.coordinates.map(function(t){return t[1]});return Math.max(null,n)===Math.max(null,i)&&Math.max(null,r)===Math.max(null,o)&&Math.min(null,n)===Math.min(null,i)&&Math.min(null,r)===Math.min(null,o)}(s,o)&&Er(s,o)){var a=t.map(function(t){return t.from.coordinates}).find(function(t){return!e.some(function(e){return function(t,e){return t[0]===e[0]&&t[1]===e[1]}(t,e.from.coordinates)})});a&&e.inside(r(a))&&(i&&!Er(n,s)||(i=e))}}),i},Da.prototype.inside=function(t){return Pt(t,this.toPolygon())},Object.defineProperties(Da.prototype,Fa);var qa=function(){this.edges=[],this.nodes={}};qa.fromGeoJson=function(t){!function(t){if(!t)throw new Error(\"No geojson passed\");if(\"FeatureCollection\"!==t.type&&\"GeometryCollection\"!==t.type&&\"MultiLineString\"!==t.type&&\"LineString\"!==t.type&&\"Feature\"!==t.type)throw new Error(\"Invalid input type '\"+t.type+\"'. Geojson must be FeatureCollection, GeometryCollection, LineString, MultiLineString or Feature\")}(t);var e=new qa;return F(t,function(t){H(t,\"LineString\",\"Graph::fromGeoJson\"),M(t,function(t,n){if(t){var r=e.getNode(t),i=e.getNode(n);e.addEdge(r,i)}return n})}),e},qa.prototype.getNode=function(t){var e=Ta.buildId(t),n=this.nodes[e];return n||(n=this.nodes[e]=new Ta(t)),n},qa.prototype.addEdge=function(t,e){var n=new Aa(t,e),r=n.getSymetric();this.edges.push(n),this.edges.push(r)},qa.prototype.deleteDangles=function(){var t=this;Object.keys(this.nodes).map(function(e){return t.nodes[e]}).forEach(function(e){return t._removeIfDangle(e)})},qa.prototype._removeIfDangle=function(t){var e=this;if(t.innerEdges.length<=1){var n=t.getOuterEdges().map(function(t){return t.to});this.removeNode(t),n.forEach(function(t){return e._removeIfDangle(t)})}},qa.prototype.deleteCutEdges=function(){var t=this;this._computeNextCWEdges(),this._findLabeledEdgeRings(),this.edges.forEach(function(e){e.label===e.symetric.label&&(t.removeEdge(e.symetric),t.removeEdge(e))})},qa.prototype._computeNextCWEdges=function(t){var e=this;void 0===t?Object.keys(this.nodes).forEach(function(t){return e._computeNextCWEdges(e.nodes[t])}):t.getOuterEdges().forEach(function(e,n){t.getOuterEdge((0===n?t.getOuterEdges().length:n)-1).symetric.next=e})},qa.prototype._computeNextCCWEdges=function(t,e){for(var n,r,i=t.getOuterEdges(),o=i.length-1;o>=0;--o){var s=i[o],a=s.symetric,u=void 0,c=void 0;s.label===e&&(u=s),a.label===e&&(c=a),u&&c&&(c&&(r=c),u&&(r&&(r.next=u,r=void 0),n||(n=u)))}r&&(r.next=n)},qa.prototype._findLabeledEdgeRings=function(){var t=[],e=0;return this.edges.forEach(function(n){if(!(n.label>=0)){t.push(n);var r=n;do{r.label=e,r=r.next}while(!n.isEqual(r));e++}}),t},qa.prototype.getEdgeRings=function(){var t=this;this._computeNextCWEdges(),this.edges.forEach(function(t){t.label=void 0}),this._findLabeledEdgeRings().forEach(function(e){t._findIntersectionNodes(e).forEach(function(n){t._computeNextCCWEdges(n,e.label)})});var e=[];return this.edges.forEach(function(n){n.ring||e.push(t._findEdgeRing(n))}),e},qa.prototype._findIntersectionNodes=function(t){var e=[],n=t,r=function(){var r=0;n.from.getOuterEdges().forEach(function(e){e.label===t.label&&++r}),r>1&&e.push(n.from),n=n.next};do{r()}while(!t.isEqual(n));return e},qa.prototype._findEdgeRing=function(t){var e=t,n=new Da;do{n.push(e),e.ring=n,e=e.next}while(!t.isEqual(e));return n},qa.prototype.removeNode=function(t){var e=this;t.getOuterEdges().forEach(function(t){return e.removeEdge(t)}),t.innerEdges.forEach(function(t){return e.removeEdge(t)}),delete this.nodes[t.id]},qa.prototype.removeEdge=function(t){this.edges=this.edges.filter(function(e){return!e.isEqual(t)}),t.deleteEdge()};var Ga=mt(function(t,e){function n(t){var e=[];for(var n in t)e.push(n);return e}(t.exports=\"function\"==typeof Object.keys?Object.keys:n).shim=n}),Ba=(Ga.shim,mt(function(t,e){function n(t){return\"[object Arguments]\"==Object.prototype.toString.call(t)}function r(t){return t&&\"object\"==typeof t&&\"number\"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,\"callee\")&&!Object.prototype.propertyIsEnumerable.call(t,\"callee\")||!1}var i=\"[object Arguments]\"==function(){return Object.prototype.toString.call(arguments)}();(e=t.exports=i?n:r).supported=n,e.unsupported=r})),ka=(Ba.supported,Ba.unsupported,mt(function(t){function e(t){return null===t||void 0===t}function n(t){return!(!t||\"object\"!=typeof t||\"number\"!=typeof t.length)&&(\"function\"==typeof t.copy&&\"function\"==typeof t.slice&&!(t.length>0&&\"number\"!=typeof t[0]))}var r=Array.prototype.slice,i=t.exports=function(t,o,s){return s||(s={}),t===o||(t instanceof Date&&o instanceof Date?t.getTime()===o.getTime():!t||!o||\"object\"!=typeof t&&\"object\"!=typeof o?s.strict?t===o:t==o:function(t,o,s){var a,u;if(e(t)||e(o))return!1;if(t.prototype!==o.prototype)return!1;if(Ba(t))return!!Ba(o)&&(t=r.call(t),o=r.call(o),i(t,o,s));if(n(t)){if(!n(o))return!1;if(t.length!==o.length)return!1;for(a=0;a<t.length;a++)if(t[a]!==o[a])return!1;return!0}try{var c=Ga(t),h=Ga(o)}catch(t){return!1}if(c.length!=h.length)return!1;for(c.sort(),h.sort(),a=c.length-1;a>=0;a--)if(c[a]!=h[a])return!1;for(a=c.length-1;a>=0;a--)if(u=c[a],!i(t[u],o[u],s))return!1;return typeof t==typeof o}(t,o,s))}})),za=function(t){this.precision=t&&t.precision?t.precision:17,this.direction=!(!t||!t.direction)&&t.direction,this.pseudoNode=!(!t||!t.pseudoNode)&&t.pseudoNode,this.objectComparator=t&&t.objectComparator?t.objectComparator:Rr};za.prototype.compare=function(t,e){if(t.type!==e.type||!Or(t,e))return!1;switch(t.type){case\"Point\":return this.compareCoord(t.coordinates,e.coordinates);case\"LineString\":return this.compareLine(t.coordinates,e.coordinates,0,!1);case\"Polygon\":return this.comparePolygon(t,e);case\"Feature\":return this.compareFeature(t,e);default:if(0===t.type.indexOf(\"Multi\")){var n=this,r=Pr(t),i=Pr(e);return r.every(function(t){return this.some(function(e){return n.compare(t,e)})},i)}}return!1},za.prototype.compareCoord=function(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n].toFixed(this.precision)!==e[n].toFixed(this.precision))return!1;return!0},za.prototype.compareLine=function(t,e,n,r){if(!Or(t,e))return!1;var i=this.pseudoNode?t:this.removePseudo(t),o=this.pseudoNode?e:this.removePseudo(e);if(!r||this.compareCoord(i[0],o[0])||(o=this.fixStartIndex(o,i))){var s=this.compareCoord(i[n],o[n]);return this.direction||s?this.comparePath(i,o):!!this.compareCoord(i[n],o[o.length-(1+n)])&&this.comparePath(i.slice().reverse(),o)}},za.prototype.fixStartIndex=function(t,e){for(var n,r=-1,i=0;i<t.length;i++)if(this.compareCoord(t[i],e[0])){r=i;break}return r>=0&&(n=[].concat(t.slice(r,t.length),t.slice(1,r+1))),n},za.prototype.comparePath=function(t,e){var n=this;return t.every(function(t,e){return n.compareCoord(t,this[e])},e)},za.prototype.comparePolygon=function(t,e){if(this.compareLine(t.coordinates[0],e.coordinates[0],1,!0)){var n=t.coordinates.slice(1,t.coordinates.length),r=e.coordinates.slice(1,e.coordinates.length),i=this;return n.every(function(t){return this.some(function(e){return i.compareLine(t,e,1,!0)})},r)}return!1},za.prototype.compareFeature=function(t,e){return!(t.id!==e.id||!this.objectComparator(t.properties,e.properties)||!this.compareBBox(t,e))&&this.compare(t.geometry,e.geometry)},za.prototype.compareBBox=function(t,e){return!!(!t.bbox&&!e.bbox||t.bbox&&e.bbox&&this.compareCoord(t.bbox,e.bbox))},za.prototype.removePseudo=function(t){return t};var ja=za,Xa=mt(function(t){function e(t,e,n,r){this.dataset=[],this.epsilon=1,this.minPts=2,this.distance=this._euclideanDistance,this.clusters=[],this.noise=[],this._visited=[],this._assigned=[],this._datasetLength=0,this._init(t,e,n,r)}e.prototype.run=function(t,e,n,r){this._init(t,e,n,r);for(var i=0;i<this._datasetLength;i++)if(1!==this._visited[i]){this._visited[i]=1;var o=this._regionQuery(i);if(o.length<this.minPts)this.noise.push(i);else{var s=this.clusters.length;this.clusters.push([]),this._addToCluster(i,s),this._expandCluster(s,o)}}return this.clusters},e.prototype._init=function(t,e,n,r){if(t){if(!(t instanceof Array))throw Error(\"Dataset must be of type array, \"+typeof t+\" given\");this.dataset=t,this.clusters=[],this.noise=[],this._datasetLength=t.length,this._visited=new Array(this._datasetLength),this._assigned=new Array(this._datasetLength)}e&&(this.epsilon=e),n&&(this.minPts=n),r&&(this.distance=r)},e.prototype._expandCluster=function(t,e){for(var n=0;n<e.length;n++){var r=e[n];if(1!==this._visited[r]){this._visited[r]=1;var i=this._regionQuery(r);i.length>=this.minPts&&(e=this._mergeArrays(e,i))}1!==this._assigned[r]&&this._addToCluster(r,t)}},e.prototype._addToCluster=function(t,e){this.clusters[e].push(t),this._assigned[t]=1},e.prototype._regionQuery=function(t){for(var e=[],n=0;n<this._datasetLength;n++){this.distance(this.dataset[t],this.dataset[n])<this.epsilon&&e.push(n)}return e},e.prototype._mergeArrays=function(t,e){for(var n=e.length,r=0;r<n;r++){var i=e[r];t.indexOf(i)<0&&t.push(i)}return t},e.prototype._euclideanDistance=function(t,e){for(var n=0,r=Math.min(t.length,e.length);r--;)n+=(t[r]-e[r])*(t[r]-e[r]);return Math.sqrt(n)},t.exports&&(t.exports=e)}),Ua=mt(function(t){function e(t,e,n){this.k=3,this.dataset=[],this.assignments=[],this.centroids=[],this.init(t,e,n)}e.prototype.init=function(t,e,n){this.assignments=[],this.centroids=[],void 0!==t&&(this.dataset=t),void 0!==e&&(this.k=e),void 0!==n&&(this.distance=n)},e.prototype.run=function(t,e){this.init(t,e);for(var n=this.dataset.length,r=0;r<this.k;r++)this.centroids[r]=this.randomCentroid();for(var i=!0;i;){i=this.assign();for(var o=0;o<this.k;o++){for(var s=new Array(h),a=0,u=0;u<h;u++)s[u]=0;for(var c=0;c<n;c++){var h=this.dataset[c].length;if(o===this.assignments[c]){for(u=0;u<h;u++)s[u]+=this.dataset[c][u];a++}}if(a>0){for(u=0;u<h;u++)s[u]/=a;this.centroids[o]=s}else this.centroids[o]=this.randomCentroid(),i=!0}}return this.getClusters()},e.prototype.randomCentroid=function(){var t,e,n=this.dataset.length-1;do{e=Math.round(Math.random()*n),t=this.dataset[e]}while(this.centroids.indexOf(t)>=0);return t},e.prototype.assign=function(){for(var t,e=!1,n=this.dataset.length,r=0;r<n;r++)(t=this.argmin(this.dataset[r],this.centroids,this.distance))!=this.assignments[r]&&(this.assignments[r]=t,e=!0);return e},e.prototype.getClusters=function(){for(var t,e=new Array(this.k),n=0;n<this.assignments.length;n++)void 0===e[t=this.assignments[n]]&&(e[t]=[]),e[t].push(n);return e},e.prototype.argmin=function(t,e,n){for(var r,i=Number.MAX_VALUE,o=0,s=e.length,a=0;a<s;a++)(r=n(t,e[a]))<i&&(i=r,o=a);return o},e.prototype.distance=function(t,e){for(var n=0,r=Math.min(t.length,e.length);r--;){var i=t[r]-e[r];n+=i*i}return Math.sqrt(n)},t.exports&&(t.exports=e)}),Ya=mt(function(t){function e(t,e,n){this._queue=[],this._priorities=[],this._sorting=\"desc\",this._init(t,e,n)}e.prototype.insert=function(t,e){for(var n=this._queue.length,r=n;r--;){var i=this._priorities[r];\"desc\"===this._sorting?e>i&&(n=r):e<i&&(n=r)}this._insertAt(t,e,n)},e.prototype.remove=function(t){for(var e=this._queue.length;e--;){if(t===this._queue[e]){this._queue.splice(e,1),this._priorities.splice(e,1);break}}},e.prototype.forEach=function(t){this._queue.forEach(t)},e.prototype.getElements=function(){return this._queue},e.prototype.getElementPriority=function(t){return this._priorities[t]},e.prototype.getPriorities=function(){return this._priorities},e.prototype.getElementsWithPriorities=function(){for(var t=[],e=0,n=this._queue.length;e<n;e++)t.push([this._queue[e],this._priorities[e]]);return t},e.prototype._init=function(t,e,n){if(t&&e){if(this._queue=[],this._priorities=[],t.length!==e.length)throw new Error(\"Arrays must have the same length\");for(var r=0;r<t.length;r++)this.insert(t[r],e[r])}n&&(this._sorting=n)},e.prototype._insertAt=function(t,e,n){this._queue.length===n?(this._queue.push(t),this._priorities.push(e)):(this._queue.splice(n,0,t),this._priorities.splice(n,0,e))},t.exports&&(t.exports=e)}),Va=mt(function(t){function e(t,e,n,r){this.epsilon=1,this.minPts=1,this.distance=this._euclideanDistance,this._reachability=[],this._processed=[],this._coreDistance=0,this._orderedList=[],this._init(t,e,n,r)}if(t.exports)var n=Ya;e.prototype.run=function(t,e,r,i){this._init(t,e,r,i);for(var o=0,s=this.dataset.length;o<s;o++)if(1!==this._processed[o]){this._processed[o]=1,this.clusters.push([o]);var a=this.clusters.length-1;this._orderedList.push(o);var u=new n(null,null,\"asc\"),c=this._regionQuery(o);void 0!==this._distanceToCore(o)&&(this._updateQueue(o,c,u),this._expandCluster(a,u))}return this.clusters},e.prototype.getReachabilityPlot=function(){for(var t=[],e=0,n=this._orderedList.length;e<n;e++){var r=this._orderedList[e],i=this._reachability[r];t.push([r,i])}return t},e.prototype._init=function(t,e,n,r){if(t){if(!(t instanceof Array))throw Error(\"Dataset must be of type array, \"+typeof t+\" given\");this.dataset=t,this.clusters=[],this._reachability=new Array(this.dataset.length),this._processed=new Array(this.dataset.length),this._coreDistance=0,this._orderedList=[]}e&&(this.epsilon=e),n&&(this.minPts=n),r&&(this.distance=r)},e.prototype._updateQueue=function(t,e,n){var r=this;this._coreDistance=this._distanceToCore(t),e.forEach(function(e){if(void 0===r._processed[e]){var i=r.distance(r.dataset[t],r.dataset[e]),o=Math.max(r._coreDistance,i);void 0===r._reachability[e]?(r._reachability[e]=o,n.insert(e,o)):o<r._reachability[e]&&(r._reachability[e]=o,n.remove(e),n.insert(e,o))}})},e.prototype._expandCluster=function(t,e){for(var n=e.getElements(),r=0,i=n.length;r<i;r++){var o=n[r];if(void 0===this._processed[o]){var s=this._regionQuery(o);this._processed[o]=1,this.clusters[t].push(o),this._orderedList.push(o),void 0!==this._distanceToCore(o)&&(this._updateQueue(o,s,e),this._expandCluster(t,e))}}},e.prototype._distanceToCore=function(t){for(var e=this.epsilon,n=0;n<e;n++){if(this._regionQuery(t,n).length>=this.minPts)return n}},e.prototype._regionQuery=function(t,e){e=e||this.epsilon;for(var n=[],r=0,i=this.dataset.length;r<i;r++)this.distance(this.dataset[t],this.dataset[r])<e&&n.push(r);return n},e.prototype._euclideanDistance=function(t,e){for(var n=0,r=Math.min(t.length,e.length);r--;)n+=(t[r]-e[r])*(t[r]-e[r]);return Math.sqrt(n)},t.exports&&(t.exports=e)}),Ha=mt(function(t){t.exports&&(t.exports={DBSCAN:Xa,KMEANS:Ua,OPTICS:Va,PriorityQueue:Ya})}),Wa=(Ha.DBSCAN,Ha.KMEANS,Ha.OPTICS,Ha.PriorityQueue,function(t,e,n){for(var r=t.length,i=0,o=0;o<r;o++){var s=(t[o]||0)-(e[o]||0);i+=s*s}return n?Math.sqrt(i):i}),Ja=Wa,Za=function(t,e,n){var r=Math.abs(t-e);return n?r:r*r},Ka=Wa,Qa=function(t,e){for(var n={},r=[],i=e<<2,o=t.length,s=t[0].length>0;r.length<e&&i-- >0;){var a=t[Math.floor(Math.random()*o)],u=s?a.join(\"_\"):\"\"+a;n[u]||(n[u]=!0,r.push(a))}if(r.length<e)throw new Error(\"Error initializating clusters\");return r},$a=function(t,e){var n=t[0].length?Ja:Za,r=[],i=t.length,o=t[0].length>0,s=t[Math.floor(Math.random()*i)];o&&s.join(\"_\");for(r.push(s);r.length<e;){for(var a=[],u=r.length,c=0,h=[],l=0;l<i;l++){for(var p=1/0,f=0;f<u;f++){var g=n(t[l],r[f]);g<=p&&(p=g)}a[l]=p}for(var d=0;d<i;d++)c+=a[d];for(var y=0;y<i;y++)h[y]={i:y,v:t[y],pr:a[y]/c,cs:0};h.sort(function(t,e){return t.pr-e.pr}),h[0].cs=h[0].pr;for(var _=1;_<i;_++)h[_].cs=h[_-1].cs+h[_].pr;for(var m=Math.random(),v=0;v<i-1&&h[v++].cs<m;);r.push(h[v-1].v)}return r},tu=1e4,eu=function(t,e,n,r){var i=[],o=[],s=[],a=[],u=!1,c=r||tu,h=t.length,l=t[0].length,p=l>0,f=[];if(n)i=\"kmrand\"==n?Qa(t,e):\"kmpp\"==n?$a(t,e):n;else for(var g={};i.length<e;){var d=Math.floor(Math.random()*h);g[d]||(g[d]=!0,i.push(t[d]))}do{Ar(e,0,f);for(var y=0;y<h;y++){for(var _=1/0,m=0,v=0;v<e;v++)(a=p?Ka(t[y],i[v]):Math.abs(t[y]-i[v]))<=_&&(_=a,m=v);s[y]=m,f[m]++}for(var x=[],E=(o=[],0);E<e;E++)x[E]=p?Ar(l,0,x[E]):0,o[E]=i[E];if(p){for(var w=0;w<e;w++)i[w]=[];for(var b=0;b<h;b++)for(var I=x[s[b]],N=t[b],C=0;C<l;C++)I[C]+=N[C];u=!0;for(var S=0;S<e;S++){for(var M=i[S],L=x[S],P=o[S],O=f[S],R=0;R<l;R++)M[R]=L[R]/O||0;if(u)for(var T=0;T<l;T++)if(P[T]!=M[T]){u=!1;break}}}else{for(var A=0;A<h;A++)x[s[A]]+=t[A];for(var D=0;D<e;D++)i[D]=x[D]/f[D]||0;u=!0;for(var F=0;F<e;F++)if(o[F]!=i[F]){u=!1;break}}u=u||--c<=0}while(!u);return{it:tu-c,k:e,idxs:s,centroids:i}},nu={search:function(t,e,n,r){t.cleanDirty();var i=(r=r||{}).heuristic||nu.heuristics.manhattan,o=r.closest||!1,s=new Br(function(t){return t.f}),a=e;for(e.h=i(e,n),s.push(e);s.size()>0;){var u=s.pop();if(u===n)return Fr(u);u.closed=!0;for(var c=t.neighbors(u),h=0,l=c.length;h<l;++h){var p=c[h];if(!p.closed&&!p.isWall()){var f=u.g+p.getCost(u),g=p.visited;(!g||f<p.g)&&(p.visited=!0,p.parent=u,p.h=p.h||i(p,n),p.g=f,p.f=p.g+p.h,t.markDirty(p),o&&(p.h<a.h||p.h===a.h&&p.g<a.g)&&(a=p),g?s.rescoreElement(p):s.push(p))}}}return o?Fr(a):[]},heuristics:{manhattan:function(t,e){return Math.abs(e.x-t.x)+Math.abs(e.y-t.y)},diagonal:function(t,e){var n=Math.sqrt(2),r=Math.abs(e.x-t.x),i=Math.abs(e.y-t.y);return 1*(r+i)+(n-2)*Math.min(r,i)}},cleanNode:function(t){t.f=0,t.g=0,t.h=0,t.visited=!1,t.closed=!1,t.parent=null}};qr.prototype.init=function(){this.dirtyNodes=[];for(var t=0;t<this.nodes.length;t++)nu.cleanNode(this.nodes[t])},qr.prototype.cleanDirty=function(){for(var t=0;t<this.dirtyNodes.length;t++)nu.cleanNode(this.dirtyNodes[t]);this.dirtyNodes=[]},qr.prototype.markDirty=function(t){this.dirtyNodes.push(t)},qr.prototype.neighbors=function(t){var e=[],n=t.x,r=t.y,i=this.grid;return i[n-1]&&i[n-1][r]&&e.push(i[n-1][r]),i[n+1]&&i[n+1][r]&&e.push(i[n+1][r]),i[n]&&i[n][r-1]&&e.push(i[n][r-1]),i[n]&&i[n][r+1]&&e.push(i[n][r+1]),this.diagonal&&(i[n-1]&&i[n-1][r-1]&&e.push(i[n-1][r-1]),i[n+1]&&i[n+1][r-1]&&e.push(i[n+1][r-1]),i[n-1]&&i[n-1][r+1]&&e.push(i[n-1][r+1]),i[n+1]&&i[n+1][r+1]&&e.push(i[n+1][r+1])),e},qr.prototype.toString=function(){for(var t,e,n,r,i=[],o=this.grid,s=0,a=o.length;s<a;s++){for(t=[],n=0,r=(e=o[s]).length;n<r;n++)t.push(e[n].weight);i.push(t.join(\" \"))}return i.join(\"\\n\")},Gr.prototype.toString=function(){return\"[\"+this.x+\" \"+this.y+\"]\"},Gr.prototype.getCost=function(t){return t&&t.x!==this.x&&t.y!==this.y?1.41421*this.weight:this.weight},Gr.prototype.isWall=function(){return 0===this.weight},Br.prototype={push:function(t){this.content.push(t),this.sinkDown(this.content.length-1)},pop:function(){var t=this.content[0],e=this.content.pop();return this.content.length>0&&(this.content[0]=e,this.bubbleUp(0)),t},remove:function(t){var e=this.content.indexOf(t),n=this.content.pop();e!==this.content.length-1&&(this.content[e]=n,this.scoreFunction(n)<this.scoreFunction(t)?this.sinkDown(e):this.bubbleUp(e))},size:function(){return this.content.length},rescoreElement:function(t){this.sinkDown(this.content.indexOf(t))},sinkDown:function(t){for(var e=this.content[t];t>0;){var n=(t+1>>1)-1,r=this.content[n];if(!(this.scoreFunction(e)<this.scoreFunction(r)))break;this.content[n]=e,this.content[t]=r,t=n}},bubbleUp:function(t){for(var e=this.content.length,n=this.content[t],r=this.scoreFunction(n);;){var i,o=t+1<<1,s=o-1,a=null;if(s<e){var u=this.content[s];(i=this.scoreFunction(u))<r&&(a=s)}if(o<e){var c=this.content[o];this.scoreFunction(c)<(null===a?r:i)&&(a=o)}if(null===a)break;this.content[t]=this.content[a],this.content[a]=n,t=a}}};var ru=function(t){return function(){return t}};jr.prototype={constructor:jr,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Vr(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Ur(this,n),n=(t=n).U),n.C=!1,r.C=!0,Yr(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Yr(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ur(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,s=t.R;if(n=o?s?Vr(s):o:s,i?i.L===t?i.L=n:i.R=n:this._=n,o&&s?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==s?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=s,s.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Ur(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Yr(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Ur(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Yr(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Ur(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Yr(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var iu,ou,su,au,uu,cu=[],hu=[],lu=1e-6,pu=1e-12;hi.prototype={constructor:hi,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return $r(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(o=(i=n.halfedges).length)for(var i,o,s,a=n.site,u=-1,c=e[i[o-1]],h=c.left===a?c.right:c.left;++u<o;)s=h,h=(c=e[i[u]]).left===a?c.right:c.left,s&&h&&r<s.index&&r<h.index&&ui(a,s,h)<0&&t.push([a.data,s.data,h.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,i,o=this,s=o._found||0,a=o.cells.length;!(i=o.cells[s]);)if(++s>=a)return null;var u=t-i.site[0],c=e-i.site[1],h=u*u+c*c;do{i=o.cells[r=s],s=null,i.halfedges.forEach(function(n){var r=o.edges[n],a=r.left;if(a!==i.site&&a||(a=r.right)){var u=t-a[0],c=e-a[1],l=u*u+c*c;l<h&&(h=l,s=a.index)}})}while(null!==s);return o._found=r,null==n||h<=n*n?i.site:null}};var fu=function(){function t(t){return new hi(t.map(function(r,i){var o=[Math.round(e(r,i,t)/lu)*lu,Math.round(n(r,i,t)/lu)*lu];return o.index=i,o.data=r,o}),r)}var e=kr,n=zr,r=null;return t.polygons=function(e){return t(e).polygons()},t.links=function(e){return t(e).links()},t.triangles=function(e){return t(e).triangles()},t.x=function(n){return arguments.length?(e=\"function\"==typeof n?n:ru(+n),t):e},t.y=function(e){return arguments.length?(n=\"function\"==typeof e?e:ru(+e),t):n},t.extent=function(e){return arguments.length?(r=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],t):r&&[[r[0][0],r[0][1]],[r[1][0],r[1][1]]]},t.size=function(e){return arguments.length?(r=null==e?null:[[0,0],[+e[0],+e[1]]],t):r&&[r[1][0]-r[0][0],r[1][1]-r[0][1]]},t},gu=Object.freeze({randomPosition:_i,randomPoint:mi,randomPolygon:vi,randomLineString:xi}),du=Object.freeze({getCluster:wi,clusterEach:bi,clusterReduce:Ii,createBins:Ni,applyFilter:Ci,propertiesContainsFilter:Si,filterProperties:Mi});\"fill\"in Array.prototype||Object.defineProperty(Array.prototype,\"fill\",{configurable:!0,value:function(t){if(void 0===this||null===this)throw new TypeError(this+\" is not an object\");var e=Object(this),n=Math.max(Math.min(e.length,9007199254740991),0)||0,r=1 in arguments?parseInt(Number(arguments[1]),10)||0:0;r=r<0?Math.max(n+r,0):Math.min(r,n);var i=2 in arguments&&void 0!==arguments[2]?parseInt(Number(arguments[2]),10)||0:n;for(i=i<0?Math.max(n+arguments[2],0):Math.min(i,n);r<i;)e[r]=t,++r;return e},writable:!0}),Number.isFinite=Number.isFinite||function(t){return\"number\"==typeof t&&isFinite(t)},Number.isInteger=Number.isInteger||function(t){return\"number\"==typeof t&&isFinite(t)&&Math.floor(t)===t},Number.parseFloat=Number.parseFloat||parseFloat,Number.isNaN=Number.isNaN||function(t){return t!=t},Math.trunc=Math.trunc||function(t){return t<0?Math.ceil(t):Math.floor(t)};var yu=function(){};yu.prototype.interfaces_=function(){return[]},yu.prototype.getClass=function(){return yu},yu.prototype.equalsWithTolerance=function(t,e,n){return Math.abs(t-e)<=n};var _u=function(){},mu=function(){},vu={MAX_VALUE:{configurable:!0}};mu.isNaN=function(t){return Number.isNaN(t)},mu.doubleToLongBits=function(t){return t},mu.longBitsToDouble=function(t){return t},mu.isInfinite=function(t){return!Number.isFinite(t)},vu.MAX_VALUE.get=function(){return Number.MAX_VALUE},Object.defineProperties(mu,vu);var xu=function(){},Eu=function(){},wu=function(){},bu=function t(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)this.x=0,this.y=0,this.z=t.NULL_ORDINATE;else if(1===arguments.length){var e=arguments[0];this.x=e.x,this.y=e.y,this.z=e.z}else 2===arguments.length?(this.x=arguments[0],this.y=arguments[1],this.z=t.NULL_ORDINATE):3===arguments.length&&(this.x=arguments[0],this.y=arguments[1],this.z=arguments[2])},Iu={DimensionalComparator:{configurable:!0},serialVersionUID:{configurable:!0},NULL_ORDINATE:{configurable:!0},X:{configurable:!0},Y:{configurable:!0},Z:{configurable:!0}};bu.prototype.setOrdinate=function(t,e){switch(t){case bu.X:this.x=e;break;case bu.Y:this.y=e;break;case bu.Z:this.z=e;break;default:throw new _u(\"Invalid ordinate index: \"+t)}},bu.prototype.equals2D=function(){if(1===arguments.length){var t=arguments[0];return this.x===t.x&&this.y===t.y}if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!yu.equalsWithTolerance(this.x,e.x,n)&&!!yu.equalsWithTolerance(this.y,e.y,n)}},bu.prototype.getOrdinate=function(t){switch(t){case bu.X:return this.x;case bu.Y:return this.y;case bu.Z:return this.z}throw new _u(\"Invalid ordinate index: \"+t)},bu.prototype.equals3D=function(t){return this.x===t.x&&this.y===t.y&&(this.z===t.z||mu.isNaN(this.z))&&mu.isNaN(t.z)},bu.prototype.equals=function(t){return t instanceof bu&&this.equals2D(t)},bu.prototype.equalInZ=function(t,e){return yu.equalsWithTolerance(this.z,t.z,e)},bu.prototype.compareTo=function(t){var e=t;return this.x<e.x?-1:this.x>e.x?1:this.y<e.y?-1:this.y>e.y?1:0},bu.prototype.clone=function(){},bu.prototype.copy=function(){return new bu(this)},bu.prototype.toString=function(){return\"(\"+this.x+\", \"+this.y+\", \"+this.z+\")\"},bu.prototype.distance3D=function(t){var e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return Math.sqrt(e*e+n*n+r*r)},bu.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},bu.prototype.hashCode=function(){var t=17;return t=37*t+bu.hashCode(this.x),t=37*t+bu.hashCode(this.y)},bu.prototype.setCoordinate=function(t){this.x=t.x,this.y=t.y,this.z=t.z},bu.prototype.interfaces_=function(){return[xu,Eu,Li]},bu.prototype.getClass=function(){return bu},bu.hashCode=function(){if(1===arguments.length){var t=arguments[0],e=mu.doubleToLongBits(t);return Math.trunc((e^e)>>>32)}},Iu.DimensionalComparator.get=function(){return Nu},Iu.serialVersionUID.get=function(){return 0x5cbf2c235c7e5800},Iu.NULL_ORDINATE.get=function(){return mu.NaN},Iu.X.get=function(){return 0},Iu.Y.get=function(){return 1},Iu.Z.get=function(){return 2},Object.defineProperties(bu,Iu);var Nu=function(t){if(this._dimensionsToTest=2,0===arguments.length);else if(1===arguments.length){var e=arguments[0];if(2!==e&&3!==e)throw new _u(\"only 2 or 3 dimensions may be specified\");this._dimensionsToTest=e}};Nu.prototype.compare=function(t,e){var n=t,r=e,i=Nu.compare(n.x,r.x);if(0!==i)return i;var o=Nu.compare(n.y,r.y);if(0!==o)return o;if(this._dimensionsToTest<=2)return 0;return Nu.compare(n.z,r.z)},Nu.prototype.interfaces_=function(){return[wu]},Nu.prototype.getClass=function(){return Nu},Nu.compare=function(t,e){return t<e?-1:t>e?1:mu.isNaN(t)?mu.isNaN(e)?0:-1:mu.isNaN(e)?1:0};var Cu=function(){};Cu.prototype.create=function(){},Cu.prototype.interfaces_=function(){return[]},Cu.prototype.getClass=function(){return Cu};var Su=function(){},Mu={INTERIOR:{configurable:!0},BOUNDARY:{configurable:!0},EXTERIOR:{configurable:!0},NONE:{configurable:!0}};Su.prototype.interfaces_=function(){return[]},Su.prototype.getClass=function(){return Su},Su.toLocationSymbol=function(t){switch(t){case Su.EXTERIOR:return\"e\";case Su.BOUNDARY:return\"b\";case Su.INTERIOR:return\"i\";case Su.NONE:return\"-\"}throw new _u(\"Unknown location value: \"+t)},Mu.INTERIOR.get=function(){return 0},Mu.BOUNDARY.get=function(){return 1},Mu.EXTERIOR.get=function(){return 2},Mu.NONE.get=function(){return-1},Object.defineProperties(Su,Mu);var Lu=function(t,e){return t.interfaces_&&t.interfaces_().indexOf(e)>-1},Pu=function(){},Ou={LOG_10:{configurable:!0}};Pu.prototype.interfaces_=function(){return[]},Pu.prototype.getClass=function(){return Pu},Pu.log10=function(t){var e=Math.log(t);return mu.isInfinite(e)?e:mu.isNaN(e)?e:e/Pu.LOG_10},Pu.min=function(t,e,n,r){var i=t;return e<i&&(i=e),n<i&&(i=n),r<i&&(i=r),i},Pu.clamp=function(){if(\"number\"==typeof arguments[2]&&\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],e=arguments[1],n=arguments[2];return t<e?e:t>n?n:t}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var r=arguments[0],i=arguments[1],o=arguments[2];return r<i?i:r>o?o:r}},Pu.wrap=function(t,e){return t<0?e- -t%e:t%e},Pu.max=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],r=t;return e>r&&(r=e),n>r&&(r=n),r}if(4===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3],u=i;return o>u&&(u=o),s>u&&(u=s),a>u&&(u=a),u}},Pu.average=function(t,e){return(t+e)/2},Ou.LOG_10.get=function(){return Math.log(10)},Object.defineProperties(Pu,Ou);var Ru=function(t){this.str=t};Ru.prototype.append=function(t){this.str+=t},Ru.prototype.setCharAt=function(t,e){this.str=this.str.substr(0,t)+e+this.str.substr(t+1)},Ru.prototype.toString=function(t){return this.str};var Tu=function(t){this.value=t};Tu.prototype.intValue=function(){return this.value},Tu.prototype.compareTo=function(t){return this.value<t?-1:this.value>t?1:0},Tu.isNaN=function(t){return Number.isNaN(t)};var Au=function(){};Au.isWhitespace=function(t){return t<=32&&t>=0||127===t},Au.toUpperCase=function(t){return t.toUpperCase()};var Du=function t(){if(this._hi=0,this._lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if(\"number\"==typeof arguments[0]){var e=arguments[0];this.init(e)}else if(arguments[0]instanceof t){var n=arguments[0];this.init(n)}else if(\"string\"==typeof arguments[0]){var r=arguments[0];t.call(this,t.parse(r))}}else if(2===arguments.length){var i=arguments[0],o=arguments[1];this.init(i,o)}},Fu={PI:{configurable:!0},TWO_PI:{configurable:!0},PI_2:{configurable:!0},E:{configurable:!0},NaN:{configurable:!0},EPS:{configurable:!0},SPLIT:{configurable:!0},MAX_PRINT_DIGITS:{configurable:!0},TEN:{configurable:!0},ONE:{configurable:!0},SCI_NOT_EXPONENT_CHAR:{configurable:!0},SCI_NOT_ZERO:{configurable:!0}};Du.prototype.le=function(t){return(this._hi<t._hi||this._hi===t._hi)&&this._lo<=t._lo},Du.prototype.extractSignificantDigits=function(t,e){var n=this.abs(),r=Du.magnitude(n._hi),i=Du.TEN.pow(r);(n=n.divide(i)).gt(Du.TEN)?(n=n.divide(Du.TEN),r+=1):n.lt(Du.ONE)&&(n=n.multiply(Du.TEN),r-=1);for(var o=r+1,s=new Ru,a=Du.MAX_PRINT_DIGITS-1,u=0;u<=a;u++){t&&u===o&&s.append(\".\");var c=Math.trunc(n._hi);if(c<0)break;var h=!1,l=0;c>9?(h=!0,l=\"9\"):l=\"0\"+c,s.append(l),n=n.subtract(Du.valueOf(c)).multiply(Du.TEN),h&&n.selfAdd(Du.TEN);var p=!0,f=Du.magnitude(n._hi);if(f<0&&Math.abs(f)>=a-u&&(p=!1),!p)break}return e[0]=r,s.toString()},Du.prototype.sqr=function(){return this.multiply(this)},Du.prototype.doubleValue=function(){return this._hi+this._lo},Du.prototype.subtract=function(){if(arguments[0]instanceof Du){var t=arguments[0];return this.add(t.negate())}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.add(-e)}},Du.prototype.equals=function(){if(1===arguments.length){var t=arguments[0];return this._hi===t._hi&&this._lo===t._lo}},Du.prototype.isZero=function(){return 0===this._hi&&0===this._lo},Du.prototype.selfSubtract=function(){if(arguments[0]instanceof Du){var t=arguments[0];return this.isNaN()?this:this.selfAdd(-t._hi,-t._lo)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.isNaN()?this:this.selfAdd(-e,0)}},Du.prototype.getSpecialNumberString=function(){return this.isZero()?\"0.0\":this.isNaN()?\"NaN \":null},Du.prototype.min=function(t){return this.le(t)?this:t},Du.prototype.selfDivide=function(){if(1===arguments.length){if(arguments[0]instanceof Du){var t=arguments[0];return this.selfDivide(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.selfDivide(e,0)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1],i=null,o=null,s=null,a=null,u=null,c=null,h=null,l=null;return u=this._hi/n,c=Du.SPLIT*u,i=c-u,l=Du.SPLIT*n,i=c-i,o=u-i,s=l-n,h=u*n,s=l-s,a=n-s,l=i*s-h+i*a+o*s+o*a,c=(this._hi-h-l+this._lo-u*r)/n,l=u+c,this._hi=l,this._lo=u-l+c,this}},Du.prototype.dump=function(){return\"DD<\"+this._hi+\", \"+this._lo+\">\"},Du.prototype.divide=function(){if(arguments[0]instanceof Du){var t=arguments[0],e=null,n=null,r=null,i=null,o=null,s=null,a=null,u=null;n=(o=this._hi/t._hi)-(e=(s=Du.SPLIT*o)-(e=s-o)),u=e*(r=(u=Du.SPLIT*t._hi)-(r=u-t._hi))-(a=o*t._hi)+e*(i=t._hi-r)+n*r+n*i,s=(this._hi-a-u+this._lo-o*t._lo)/t._hi;return new Du(u=o+s,o-u+s)}if(\"number\"==typeof arguments[0]){var c=arguments[0];return mu.isNaN(c)?Du.createNaN():Du.copy(this).selfDivide(c,0)}},Du.prototype.ge=function(t){return(this._hi>t._hi||this._hi===t._hi)&&this._lo>=t._lo},Du.prototype.pow=function(t){if(0===t)return Du.valueOf(1);var e=new Du(this),n=Du.valueOf(1),r=Math.abs(t);if(r>1)for(;r>0;)r%2==1&&n.selfMultiply(e),(r/=2)>0&&(e=e.sqr());else n=e;return t<0?n.reciprocal():n},Du.prototype.ceil=function(){if(this.isNaN())return Du.NaN;var t=Math.ceil(this._hi),e=0;return t===this._hi&&(e=Math.ceil(this._lo)),new Du(t,e)},Du.prototype.compareTo=function(t){var e=t;return this._hi<e._hi?-1:this._hi>e._hi?1:this._lo<e._lo?-1:this._lo>e._lo?1:0},Du.prototype.rint=function(){if(this.isNaN())return this;return this.add(.5).floor()},Du.prototype.setValue=function(){if(arguments[0]instanceof Du){var t=arguments[0];return this.init(t),this}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.init(e),this}},Du.prototype.max=function(t){return this.ge(t)?this:t},Du.prototype.sqrt=function(){if(this.isZero())return Du.valueOf(0);if(this.isNegative())return Du.NaN;var t=1/Math.sqrt(this._hi),e=this._hi*t,n=Du.valueOf(e),r=this.subtract(n.sqr())._hi*(.5*t);return n.add(r)},Du.prototype.selfAdd=function(){if(1===arguments.length){if(arguments[0]instanceof Du){var t=arguments[0];return this.selfAdd(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var e=arguments[0],n=null,r=null,i=null,o=null,s=null,a=null;return i=this._hi+e,s=i-this._hi,o=i-s,o=e-s+(this._hi-o),a=o+this._lo,n=i+a,r=a+(i-n),this._hi=n+r,this._lo=r+(n-this._hi),this}}else if(2===arguments.length){var u=arguments[0],c=arguments[1],h=null,l=null,p=null,f=null,g=null,d=null,y=null;f=this._hi+u,l=this._lo+c,g=f-(d=f-this._hi),p=l-(y=l-this._lo);var _=(h=f+(d=(g=u-d+(this._hi-g))+l))+(d=(p=c-y+(this._lo-p))+(d+(f-h))),m=d+(h-_);return this._hi=_,this._lo=m,this}},Du.prototype.selfMultiply=function(){if(1===arguments.length){if(arguments[0]instanceof Du){var t=arguments[0];return this.selfMultiply(t._hi,t._lo)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return this.selfMultiply(e,0)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1],i=null,o=null,s=null,a=null,u=null,c=null;i=(u=Du.SPLIT*this._hi)-this._hi,c=Du.SPLIT*n,i=u-i,o=this._hi-i,s=c-n;var h=(u=this._hi*n)+(c=i*(s=c-s)-u+i*(a=n-s)+o*s+o*a+(this._hi*r+this._lo*n)),l=c+(i=u-h);return this._hi=h,this._lo=l,this}},Du.prototype.selfSqr=function(){return this.selfMultiply(this)},Du.prototype.floor=function(){if(this.isNaN())return Du.NaN;var t=Math.floor(this._hi),e=0;return t===this._hi&&(e=Math.floor(this._lo)),new Du(t,e)},Du.prototype.negate=function(){return this.isNaN()?this:new Du(-this._hi,-this._lo)},Du.prototype.clone=function(){},Du.prototype.multiply=function(){if(arguments[0]instanceof Du){var t=arguments[0];return t.isNaN()?Du.createNaN():Du.copy(this).selfMultiply(t)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return mu.isNaN(e)?Du.createNaN():Du.copy(this).selfMultiply(e,0)}},Du.prototype.isNaN=function(){return mu.isNaN(this._hi)},Du.prototype.intValue=function(){return Math.trunc(this._hi)},Du.prototype.toString=function(){var t=Du.magnitude(this._hi);return t>=-3&&t<=20?this.toStandardNotation():this.toSciNotation()},Du.prototype.toStandardNotation=function(){var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!0,e),r=e[0]+1,i=n;if(\".\"===n.charAt(0))i=\"0\"+n;else if(r<0)i=\"0.\"+Du.stringOfChar(\"0\",-r)+n;else if(-1===n.indexOf(\".\")){var o=r-n.length;i=n+Du.stringOfChar(\"0\",o)+\".0\"}return this.isNegative()?\"-\"+i:i},Du.prototype.reciprocal=function(){var t=null,e=null,n=null,r=null,i=null,o=null,s=null,a=null;e=(i=1/this._hi)-(t=(o=Du.SPLIT*i)-(t=o-i)),n=(a=Du.SPLIT*this._hi)-this._hi;var u=i+(o=(1-(s=i*this._hi)-(a=t*(n=a-n)-s+t*(r=this._hi-n)+e*n+e*r)-i*this._lo)/this._hi);return new Du(u,i-u+o)},Du.prototype.toSciNotation=function(){if(this.isZero())return Du.SCI_NOT_ZERO;var t=this.getSpecialNumberString();if(null!==t)return t;var e=new Array(1).fill(null),n=this.extractSignificantDigits(!1,e),r=Du.SCI_NOT_EXPONENT_CHAR+e[0];if(\"0\"===n.charAt(0))throw new Error(\"Found leading zero: \"+n);var i=\"\";n.length>1&&(i=n.substring(1));var o=n.charAt(0)+\".\"+i;return this.isNegative()?\"-\"+o+r:o+r},Du.prototype.abs=function(){return this.isNaN()?Du.NaN:this.isNegative()?this.negate():new Du(this)},Du.prototype.isPositive=function(){return(this._hi>0||0===this._hi)&&this._lo>0},Du.prototype.lt=function(t){return(this._hi<t._hi||this._hi===t._hi)&&this._lo<t._lo},Du.prototype.add=function(){if(arguments[0]instanceof Du){var t=arguments[0];return Du.copy(this).selfAdd(t)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return Du.copy(this).selfAdd(e)}},Du.prototype.init=function(){if(1===arguments.length){if(\"number\"==typeof arguments[0]){var t=arguments[0];this._hi=t,this._lo=0}else if(arguments[0]instanceof Du){var e=arguments[0];this._hi=e._hi,this._lo=e._lo}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this._hi=n,this._lo=r}},Du.prototype.gt=function(t){return(this._hi>t._hi||this._hi===t._hi)&&this._lo>t._lo},Du.prototype.isNegative=function(){return(this._hi<0||0===this._hi)&&this._lo<0},Du.prototype.trunc=function(){return this.isNaN()?Du.NaN:this.isPositive()?this.floor():this.ceil()},Du.prototype.signum=function(){return this._hi>0?1:this._hi<0?-1:this._lo>0?1:this._lo<0?-1:0},Du.prototype.interfaces_=function(){return[Li,xu,Eu]},Du.prototype.getClass=function(){return Du},Du.sqr=function(t){return Du.valueOf(t).selfMultiply(t)},Du.valueOf=function(){if(\"string\"==typeof arguments[0]){var t=arguments[0];return Du.parse(t)}if(\"number\"==typeof arguments[0]){var e=arguments[0];return new Du(e)}},Du.sqrt=function(t){return Du.valueOf(t).sqrt()},Du.parse=function(t){for(var e=0,n=t.length;Au.isWhitespace(t.charAt(e));)e++;var r=!1;if(e<n){var i=t.charAt(e);\"-\"!==i&&\"+\"!==i||(e++,\"-\"===i&&(r=!0))}for(var o=new Du,s=0,a=0,u=0;!(e>=n);){var c=t.charAt(e);if(e++,Au.isDigit(c)){var h=c-\"0\";o.selfMultiply(Du.TEN),o.selfAdd(h),s++}else{if(\".\"!==c){if(\"e\"===c||\"E\"===c){var l=t.substring(e);try{u=Tu.parseInt(l)}catch(e){throw e instanceof Error?new Error(\"Invalid exponent \"+l+\" in string \"+t):e}break}throw new Error(\"Unexpected character '\"+c+\"' at position \"+e+\" in string \"+t)}a=s}}var p=o,f=s-a-u;if(0===f)p=o;else if(f>0){var g=Du.TEN.pow(f);p=o.divide(g)}else if(f<0){var d=Du.TEN.pow(-f);p=o.multiply(d)}return r?p.negate():p},Du.createNaN=function(){return new Du(mu.NaN,mu.NaN)},Du.copy=function(t){return new Du(t)},Du.magnitude=function(t){var e=Math.abs(t),n=Math.log(e)/Math.log(10),r=Math.trunc(Math.floor(n));return 10*Math.pow(10,r)<=e&&(r+=1),r},Du.stringOfChar=function(t,e){for(var n=new Ru,r=0;r<e;r++)n.append(t);return n.toString()},Fu.PI.get=function(){return new Du(3.141592653589793,1.2246467991473532e-16)},Fu.TWO_PI.get=function(){return new Du(6.283185307179586,2.4492935982947064e-16)},Fu.PI_2.get=function(){return new Du(1.5707963267948966,6.123233995736766e-17)},Fu.E.get=function(){return new Du(2.718281828459045,1.4456468917292502e-16)},Fu.NaN.get=function(){return new Du(mu.NaN,mu.NaN)},Fu.EPS.get=function(){return 1.23259516440783e-32},Fu.SPLIT.get=function(){return 134217729},Fu.MAX_PRINT_DIGITS.get=function(){return 32},Fu.TEN.get=function(){return Du.valueOf(10)},Fu.ONE.get=function(){return Du.valueOf(1)},Fu.SCI_NOT_EXPONENT_CHAR.get=function(){return\"E\"},Fu.SCI_NOT_ZERO.get=function(){return\"0.0E0\"},Object.defineProperties(Du,Fu);var qu=function(){},Gu={DP_SAFE_EPSILON:{configurable:!0}};qu.prototype.interfaces_=function(){return[]},qu.prototype.getClass=function(){return qu},qu.orientationIndex=function(t,e,n){var r=qu.orientationIndexFilter(t,e,n);if(r<=1)return r;var i=Du.valueOf(e.x).selfAdd(-t.x),o=Du.valueOf(e.y).selfAdd(-t.y),s=Du.valueOf(n.x).selfAdd(-e.x),a=Du.valueOf(n.y).selfAdd(-e.y);return i.selfMultiply(a).selfSubtract(o.selfMultiply(s)).signum()},qu.signOfDet2x2=function(t,e,n,r){return t.multiply(r).selfSubtract(e.multiply(n)).signum()},qu.intersection=function(t,e,n,r){var i=Du.valueOf(r.y).selfSubtract(n.y).selfMultiply(Du.valueOf(e.x).selfSubtract(t.x)),o=Du.valueOf(r.x).selfSubtract(n.x).selfMultiply(Du.valueOf(e.y).selfSubtract(t.y)),s=i.subtract(o),a=Du.valueOf(r.x).selfSubtract(n.x).selfMultiply(Du.valueOf(t.y).selfSubtract(n.y)),u=Du.valueOf(r.y).selfSubtract(n.y).selfMultiply(Du.valueOf(t.x).selfSubtract(n.x)),c=a.subtract(u).selfDivide(s).doubleValue(),h=Du.valueOf(t.x).selfAdd(Du.valueOf(e.x).selfSubtract(t.x).selfMultiply(c)).doubleValue(),l=Du.valueOf(e.x).selfSubtract(t.x).selfMultiply(Du.valueOf(t.y).selfSubtract(n.y)),p=Du.valueOf(e.y).selfSubtract(t.y).selfMultiply(Du.valueOf(t.x).selfSubtract(n.x)),f=l.subtract(p).selfDivide(s).doubleValue(),g=Du.valueOf(n.y).selfAdd(Du.valueOf(r.y).selfSubtract(n.y).selfMultiply(f)).doubleValue();return new bu(h,g)},qu.orientationIndexFilter=function(t,e,n){var r=null,i=(t.x-n.x)*(e.y-n.y),o=(t.y-n.y)*(e.x-n.x),s=i-o;if(i>0){if(o<=0)return qu.signum(s);r=i+o}else{if(!(i<0))return qu.signum(s);if(o>=0)return qu.signum(s);r=-i-o}var a=qu.DP_SAFE_EPSILON*r;return s>=a||-s>=a?qu.signum(s):2},qu.signum=function(t){return t>0?1:t<0?-1:0},Gu.DP_SAFE_EPSILON.get=function(){return 1e-15},Object.defineProperties(qu,Gu);var Bu=function(){},ku={X:{configurable:!0},Y:{configurable:!0},Z:{configurable:!0},M:{configurable:!0}};ku.X.get=function(){return 0},ku.Y.get=function(){return 1},ku.Z.get=function(){return 2},ku.M.get=function(){return 3},Bu.prototype.setOrdinate=function(t,e,n){},Bu.prototype.size=function(){},Bu.prototype.getOrdinate=function(t,e){},Bu.prototype.getCoordinate=function(){},Bu.prototype.getCoordinateCopy=function(t){},Bu.prototype.getDimension=function(){},Bu.prototype.getX=function(t){},Bu.prototype.clone=function(){},Bu.prototype.expandEnvelope=function(t){},Bu.prototype.copy=function(){},Bu.prototype.getY=function(t){},Bu.prototype.toCoordinateArray=function(){},Bu.prototype.interfaces_=function(){return[Eu]},Bu.prototype.getClass=function(){return Bu},Object.defineProperties(Bu,ku);var zu=function(){},ju=function(t){function e(){t.call(this,\"Projective point not representable on the Cartesian plane.\")}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(zu),Xu=function(){};Xu.arraycopy=function(t,e,n,r,i){for(var o=0,s=e;s<e+i;s++)n[r+o]=t[s],o++},Xu.getProperty=function(t){return{\"line.separator\":\"\\n\"}[t]};var Uu=function t(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){var e=arguments[0];this.x=e.x,this.y=e.y,this.w=1}else if(2===arguments.length){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var n=arguments[0],r=arguments[1];this.x=n,this.y=r,this.w=1}else if(arguments[0]instanceof t&&arguments[1]instanceof t){var i=arguments[0],o=arguments[1];this.x=i.y*o.w-o.y*i.w,this.y=o.x*i.w-i.x*o.w,this.w=i.x*o.y-o.x*i.y}else if(arguments[0]instanceof bu&&arguments[1]instanceof bu){var s=arguments[0],a=arguments[1];this.x=s.y-a.y,this.y=a.x-s.x,this.w=s.x*a.y-a.x*s.y}}else if(3===arguments.length){var u=arguments[0],c=arguments[1],h=arguments[2];this.x=u,this.y=c,this.w=h}else if(4===arguments.length){var l=arguments[0],p=arguments[1],f=arguments[2],g=arguments[3],d=l.y-p.y,y=p.x-l.x,_=l.x*p.y-p.x*l.y,m=f.y-g.y,v=g.x-f.x,x=f.x*g.y-g.x*f.y;this.x=y*x-v*_,this.y=m*_-d*x,this.w=d*v-m*y}};Uu.prototype.getY=function(){var t=this.y/this.w;if(mu.isNaN(t)||mu.isInfinite(t))throw new ju;return t},Uu.prototype.getX=function(){var t=this.x/this.w;if(mu.isNaN(t)||mu.isInfinite(t))throw new ju;return t},Uu.prototype.getCoordinate=function(){var t=new bu;return t.x=this.getX(),t.y=this.getY(),t},Uu.prototype.interfaces_=function(){return[]},Uu.prototype.getClass=function(){return Uu},Uu.intersection=function(t,e,n,r){var i=t.y-e.y,o=e.x-t.x,s=t.x*e.y-e.x*t.y,a=n.y-r.y,u=r.x-n.x,c=n.x*r.y-r.x*n.y,h=i*u-a*o,l=(o*c-u*s)/h,p=(a*s-i*c)/h;if(mu.isNaN(l)||mu.isInfinite(l)||mu.isNaN(p)||mu.isInfinite(p))throw new ju;return new bu(l,p)};var Yu=function t(){if(this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof bu){var e=arguments[0];this.init(e.x,e.x,e.y,e.y)}else if(arguments[0]instanceof t){var n=arguments[0];this.init(n)}}else if(2===arguments.length){var r=arguments[0],i=arguments[1];this.init(r.x,i.x,r.y,i.y)}else if(4===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2],u=arguments[3];this.init(o,s,a,u)}},Vu={serialVersionUID:{configurable:!0}};Yu.prototype.getArea=function(){return this.getWidth()*this.getHeight()},Yu.prototype.equals=function(t){if(!(t instanceof Yu))return!1;var e=t;return this.isNull()?e.isNull():this._maxx===e.getMaxX()&&this._maxy===e.getMaxY()&&this._minx===e.getMinX()&&this._miny===e.getMinY()},Yu.prototype.intersection=function(t){if(this.isNull()||t.isNull()||!this.intersects(t))return new Yu;var e=this._minx>t._minx?this._minx:t._minx,n=this._miny>t._miny?this._miny:t._miny,r=this._maxx<t._maxx?this._maxx:t._maxx,i=this._maxy<t._maxy?this._maxy:t._maxy;return new Yu(e,r,n,i)},Yu.prototype.isNull=function(){return this._maxx<this._minx},Yu.prototype.getMaxX=function(){return this._maxx},Yu.prototype.covers=function(){if(1===arguments.length){if(arguments[0]instanceof bu){var t=arguments[0];return this.covers(t.x,t.y)}if(arguments[0]instanceof Yu){var e=arguments[0];return!this.isNull()&&!e.isNull()&&(e.getMinX()>=this._minx&&e.getMaxX()<=this._maxx&&e.getMinY()>=this._miny&&e.getMaxY()<=this._maxy)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];return!this.isNull()&&(n>=this._minx&&n<=this._maxx&&r>=this._miny&&r<=this._maxy)}},Yu.prototype.intersects=function(){if(1===arguments.length){if(arguments[0]instanceof Yu){var t=arguments[0];return!this.isNull()&&!t.isNull()&&!(t._minx>this._maxx||t._maxx<this._minx||t._miny>this._maxy||t._maxy<this._miny)}if(arguments[0]instanceof bu){var e=arguments[0];return this.intersects(e.x,e.y)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];return!this.isNull()&&!(n>this._maxx||n<this._minx||r>this._maxy||r<this._miny)}},Yu.prototype.getMinY=function(){return this._miny},Yu.prototype.getMinX=function(){return this._minx},Yu.prototype.expandToInclude=function(){if(1===arguments.length){if(arguments[0]instanceof bu){var t=arguments[0];this.expandToInclude(t.x,t.y)}else if(arguments[0]instanceof Yu){var e=arguments[0];if(e.isNull())return null;this.isNull()?(this._minx=e.getMinX(),this._maxx=e.getMaxX(),this._miny=e.getMinY(),this._maxy=e.getMaxY()):(e._minx<this._minx&&(this._minx=e._minx),e._maxx>this._maxx&&(this._maxx=e._maxx),e._miny<this._miny&&(this._miny=e._miny),e._maxy>this._maxy&&(this._maxy=e._maxy))}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this.isNull()?(this._minx=n,this._maxx=n,this._miny=r,this._maxy=r):(n<this._minx&&(this._minx=n),n>this._maxx&&(this._maxx=n),r<this._miny&&(this._miny=r),r>this._maxy&&(this._maxy=r))}},Yu.prototype.minExtent=function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t<e?t:e},Yu.prototype.getWidth=function(){return this.isNull()?0:this._maxx-this._minx},Yu.prototype.compareTo=function(t){var e=t;return this.isNull()?e.isNull()?0:-1:e.isNull()?1:this._minx<e._minx?-1:this._minx>e._minx?1:this._miny<e._miny?-1:this._miny>e._miny?1:this._maxx<e._maxx?-1:this._maxx>e._maxx?1:this._maxy<e._maxy?-1:this._maxy>e._maxy?1:0},Yu.prototype.translate=function(t,e){if(this.isNull())return null;this.init(this.getMinX()+t,this.getMaxX()+t,this.getMinY()+e,this.getMaxY()+e)},Yu.prototype.toString=function(){return\"Env[\"+this._minx+\" : \"+this._maxx+\", \"+this._miny+\" : \"+this._maxy+\"]\"},Yu.prototype.setToNull=function(){this._minx=0,this._maxx=-1,this._miny=0,this._maxy=-1},Yu.prototype.getHeight=function(){return this.isNull()?0:this._maxy-this._miny},Yu.prototype.maxExtent=function(){if(this.isNull())return 0;var t=this.getWidth(),e=this.getHeight();return t>e?t:e},Yu.prototype.expandBy=function(){if(1===arguments.length){var t=arguments[0];this.expandBy(t,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this.isNull())return null;this._minx-=e,this._maxx+=e,this._miny-=n,this._maxy+=n,(this._minx>this._maxx||this._miny>this._maxy)&&this.setToNull()}},Yu.prototype.contains=function(){if(1===arguments.length){if(arguments[0]instanceof Yu){var t=arguments[0];return this.covers(t)}if(arguments[0]instanceof bu){var e=arguments[0];return this.covers(e)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];return this.covers(n,r)}},Yu.prototype.centre=function(){return this.isNull()?null:new bu((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)},Yu.prototype.init=function(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof bu){var t=arguments[0];this.init(t.x,t.x,t.y,t.y)}else if(arguments[0]instanceof Yu){var e=arguments[0];this._minx=e._minx,this._maxx=e._maxx,this._miny=e._miny,this._maxy=e._maxy}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this.init(n.x,r.x,n.y,r.y)}else if(4===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3];i<o?(this._minx=i,this._maxx=o):(this._minx=o,this._maxx=i),s<a?(this._miny=s,this._maxy=a):(this._miny=a,this._maxy=s)}},Yu.prototype.getMaxY=function(){return this._maxy},Yu.prototype.distance=function(t){if(this.intersects(t))return 0;var e=0;this._maxx<t._minx?e=t._minx-this._maxx:this._minx>t._maxx&&(e=this._minx-t._maxx);var n=0;return this._maxy<t._miny?n=t._miny-this._maxy:this._miny>t._maxy&&(n=this._miny-t._maxy),0===e?n:0===n?e:Math.sqrt(e*e+n*n)},Yu.prototype.hashCode=function(){var t=17;return t=37*t+bu.hashCode(this._minx),t=37*t+bu.hashCode(this._maxx),t=37*t+bu.hashCode(this._miny),t=37*t+bu.hashCode(this._maxy)},Yu.prototype.interfaces_=function(){return[xu,Li]},Yu.prototype.getClass=function(){return Yu},Yu.intersects=function(){if(3===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2];return n.x>=(t.x<e.x?t.x:e.x)&&n.x<=(t.x>e.x?t.x:e.x)&&n.y>=(t.y<e.y?t.y:e.y)&&n.y<=(t.y>e.y?t.y:e.y)}if(4===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2],s=arguments[3],a=Math.min(o.x,s.x),u=Math.max(o.x,s.x),c=Math.min(r.x,i.x),h=Math.max(r.x,i.x);return!(c>u)&&(!(h<a)&&(a=Math.min(o.y,s.y),u=Math.max(o.y,s.y),c=Math.min(r.y,i.y),h=Math.max(r.y,i.y),!(c>u)&&!(h<a)))}},Vu.serialVersionUID.get=function(){return 0x51845cd552189800},Object.defineProperties(Yu,Vu);var Hu={typeStr:/^\\s*(\\w+)\\s*\\(\\s*(.*)\\s*\\)\\s*$/,emptyTypeStr:/^\\s*(\\w+)\\s*EMPTY\\s*$/,spaces:/\\s+/,parenComma:/\\)\\s*,\\s*\\(/,doubleParenComma:/\\)\\s*\\)\\s*,\\s*\\(\\s*\\(/,trimParens:/^\\s*\\(?(.*?)\\)?\\s*$/},Wu=function(t){this.geometryFactory=t||new _h};Wu.prototype.read=function(t){var e,n,r;t=t.replace(/[\\n\\r]/g,\" \");var i=Hu.typeStr.exec(t);if(-1!==t.search(\"EMPTY\")&&((i=Hu.emptyTypeStr.exec(t))[2]=void 0),i&&(n=i[1].toLowerCase(),r=i[2],Zu[n]&&(e=Zu[n].apply(this,[r]))),void 0===e)throw new Error(\"Could not parse WKT \"+t);return e},Wu.prototype.write=function(t){return this.extractGeometry(t)},Wu.prototype.extractGeometry=function(t){var e=t.getGeometryType().toLowerCase();if(!Ju[e])return null;var n=e.toUpperCase();return t.isEmpty()?n+\" EMPTY\":n+\"(\"+Ju[e].apply(this,[t])+\")\"};var Ju={coordinate:function(t){return t.x+\" \"+t.y},point:function(t){return Ju.coordinate.call(this,t._coordinates._coordinates[0])},multipoint:function(t){for(var e=[],n=0,r=t._geometries.length;n<r;++n)e.push(\"(\"+Ju.point.apply(this,[t._geometries[n]])+\")\");return e.join(\",\")},linestring:function(t){for(var e=[],n=0,r=t._points._coordinates.length;n<r;++n)e.push(Ju.coordinate.apply(this,[t._points._coordinates[n]]));return e.join(\",\")},linearring:function(t){for(var e=[],n=0,r=t._points._coordinates.length;n<r;++n)e.push(Ju.coordinate.apply(this,[t._points._coordinates[n]]));return e.join(\",\")},multilinestring:function(t){for(var e=[],n=0,r=t._geometries.length;n<r;++n)e.push(\"(\"+Ju.linestring.apply(this,[t._geometries[n]])+\")\");return e.join(\",\")},polygon:function(t){var e=[];e.push(\"(\"+Ju.linestring.apply(this,[t._shell])+\")\");for(var n=0,r=t._holes.length;n<r;++n)e.push(\"(\"+Ju.linestring.apply(this,[t._holes[n]])+\")\");return e.join(\",\")},multipolygon:function(t){for(var e=[],n=0,r=t._geometries.length;n<r;++n)e.push(\"(\"+Ju.polygon.apply(this,[t._geometries[n]])+\")\");return e.join(\",\")},geometrycollection:function(t){for(var e=[],n=0,r=t._geometries.length;n<r;++n)e.push(this.extractGeometry(t._geometries[n]));return e.join(\",\")}},Zu={point:function(t){if(void 0===t)return this.geometryFactory.createPoint();var e=t.trim().split(Hu.spaces);return this.geometryFactory.createPoint(new bu(Number.parseFloat(e[0]),Number.parseFloat(e[1])))},multipoint:function(t){if(void 0===t)return this.geometryFactory.createMultiPoint();for(var e,n=t.trim().split(\",\"),r=[],i=0,o=n.length;i<o;++i)e=n[i].replace(Hu.trimParens,\"$1\"),r.push(Zu.point.apply(this,[e]));return this.geometryFactory.createMultiPoint(r)},linestring:function(t){if(void 0===t)return this.geometryFactory.createLineString();for(var e,n=t.trim().split(\",\"),r=[],i=0,o=n.length;i<o;++i)e=n[i].trim().split(Hu.spaces),r.push(new bu(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLineString(r)},linearring:function(t){if(void 0===t)return this.geometryFactory.createLinearRing();for(var e,n=t.trim().split(\",\"),r=[],i=0,o=n.length;i<o;++i)e=n[i].trim().split(Hu.spaces),r.push(new bu(Number.parseFloat(e[0]),Number.parseFloat(e[1])));return this.geometryFactory.createLinearRing(r)},multilinestring:function(t){if(void 0===t)return this.geometryFactory.createMultiLineString();for(var e,n=t.trim().split(Hu.parenComma),r=[],i=0,o=n.length;i<o;++i)e=n[i].replace(Hu.trimParens,\"$1\"),r.push(Zu.linestring.apply(this,[e]));return this.geometryFactory.createMultiLineString(r)},polygon:function(t){if(void 0===t)return this.geometryFactory.createPolygon();for(var e,n,r,i,o=t.trim().split(Hu.parenComma),s=[],a=0,u=o.length;a<u;++a)e=o[a].replace(Hu.trimParens,\"$1\"),n=Zu.linestring.apply(this,[e]),r=this.geometryFactory.createLinearRing(n._points),0===a?i=r:s.push(r);return this.geometryFactory.createPolygon(i,s)},multipolygon:function(t){if(void 0===t)return this.geometryFactory.createMultiPolygon();for(var e,n=t.trim().split(Hu.doubleParenComma),r=[],i=0,o=n.length;i<o;++i)e=n[i].replace(Hu.trimParens,\"$1\"),r.push(Zu.polygon.apply(this,[e]));return this.geometryFactory.createMultiPolygon(r)},geometrycollection:function(t){if(void 0===t)return this.geometryFactory.createGeometryCollection();for(var e=(t=t.replace(/,\\s*([A-Za-z])/g,\"|$1\")).trim().split(\"|\"),n=[],r=0,i=e.length;r<i;++r)n.push(this.read(e[r]));return this.geometryFactory.createGeometryCollection(n)}},Ku=function(t){this.parser=new Wu(t)};Ku.prototype.write=function(t){return this.parser.write(t)},Ku.toLineString=function(t,e){if(2!==arguments.length)throw new Error(\"Not implemented\");return\"LINESTRING ( \"+t.x+\" \"+t.y+\", \"+e.x+\" \"+e.y+\" )\"};var Qu=function(t){function e(e){t.call(this,e),this.name=\"RuntimeException\",this.message=e,this.stack=(new t).stack}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Error),$u=function(t){function e(){if(t.call(this),0===arguments.length)t.call(this);else if(1===arguments.length){var e=arguments[0];t.call(this,e)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Qu),tc=function(){};tc.prototype.interfaces_=function(){return[]},tc.prototype.getClass=function(){return tc},tc.shouldNeverReachHere=function(){if(0===arguments.length)tc.shouldNeverReachHere(null);else if(1===arguments.length){var t=arguments[0];throw new $u(\"Should never reach here\"+(null!==t?\": \"+t:\"\"))}},tc.isTrue=function(){var t,e;if(1===arguments.length)t=arguments[0],tc.isTrue(t,null);else if(2===arguments.length&&(t=arguments[0],e=arguments[1],!t))throw null===e?new $u:new $u(e)},tc.equals=function(){var t,e,n;if(2===arguments.length)t=arguments[0],e=arguments[1],tc.equals(t,e,null);else if(3===arguments.length&&(t=arguments[0],e=arguments[1],n=arguments[2],!e.equals(t)))throw new $u(\"Expected \"+t+\" but encountered \"+e+(null!==n?\": \"+n:\"\"))};var ec=function(){this._result=null,this._inputLines=Array(2).fill().map(function(){return Array(2)}),this._intPt=new Array(2).fill(null),this._intLineIndex=null,this._isProper=null,this._pa=null,this._pb=null,this._precisionModel=null,this._intPt[0]=new bu,this._intPt[1]=new bu,this._pa=this._intPt[0],this._pb=this._intPt[1],this._result=0},nc={DONT_INTERSECT:{configurable:!0},DO_INTERSECT:{configurable:!0},COLLINEAR:{configurable:!0},NO_INTERSECTION:{configurable:!0},POINT_INTERSECTION:{configurable:!0},COLLINEAR_INTERSECTION:{configurable:!0}};ec.prototype.getIndexAlongSegment=function(t,e){return this.computeIntLineIndex(),this._intLineIndex[t][e]},ec.prototype.getTopologySummary=function(){var t=new Ru;return this.isEndPoint()&&t.append(\" endpoint\"),this._isProper&&t.append(\" proper\"),this.isCollinear()&&t.append(\" collinear\"),t.toString()},ec.prototype.computeIntersection=function(t,e,n,r){this._inputLines[0][0]=t,this._inputLines[0][1]=e,this._inputLines[1][0]=n,this._inputLines[1][1]=r,this._result=this.computeIntersect(t,e,n,r)},ec.prototype.getIntersectionNum=function(){return this._result},ec.prototype.computeIntLineIndex=function(){if(0===arguments.length)null===this._intLineIndex&&(this._intLineIndex=Array(2).fill().map(function(){return Array(2)}),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){var t=arguments[0];this.getEdgeDistance(t,0)>this.getEdgeDistance(t,1)?(this._intLineIndex[t][0]=0,this._intLineIndex[t][1]=1):(this._intLineIndex[t][0]=1,this._intLineIndex[t][1]=0)}},ec.prototype.isProper=function(){return this.hasIntersection()&&this._isProper},ec.prototype.setPrecisionModel=function(t){this._precisionModel=t},ec.prototype.isInteriorIntersection=function(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){for(var t=arguments[0],e=0;e<this._result;e++)if(!this._intPt[e].equals2D(this._inputLines[t][0])&&!this._intPt[e].equals2D(this._inputLines[t][1]))return!0;return!1}},ec.prototype.getIntersection=function(t){return this._intPt[t]},ec.prototype.isEndPoint=function(){return this.hasIntersection()&&!this._isProper},ec.prototype.hasIntersection=function(){return this._result!==ec.NO_INTERSECTION},ec.prototype.getEdgeDistance=function(t,e){return ec.computeEdgeDistance(this._intPt[e],this._inputLines[t][0],this._inputLines[t][1])},ec.prototype.isCollinear=function(){return this._result===ec.COLLINEAR_INTERSECTION},ec.prototype.toString=function(){return Ku.toLineString(this._inputLines[0][0],this._inputLines[0][1])+\" - \"+Ku.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary()},ec.prototype.getEndpoint=function(t,e){return this._inputLines[t][e]},ec.prototype.isIntersection=function(t){for(var e=0;e<this._result;e++)if(this._intPt[e].equals2D(t))return!0;return!1},ec.prototype.getIntersectionAlongSegment=function(t,e){return this.computeIntLineIndex(),this._intPt[this._intLineIndex[t][e]]},ec.prototype.interfaces_=function(){return[]},ec.prototype.getClass=function(){return ec},ec.computeEdgeDistance=function(t,e,n){var r=Math.abs(n.x-e.x),i=Math.abs(n.y-e.y),o=-1;if(t.equals(e))o=0;else if(t.equals(n))o=r>i?r:i;else{var s=Math.abs(t.x-e.x),a=Math.abs(t.y-e.y);0!==(o=r>i?s:a)||t.equals(e)||(o=Math.max(s,a))}return tc.isTrue(!(0===o&&!t.equals(e)),\"Bad distance calculation\"),o},ec.nonRobustComputeEdgeDistance=function(t,e,n){var r=t.x-e.x,i=t.y-e.y,o=Math.sqrt(r*r+i*i);return tc.isTrue(!(0===o&&!t.equals(e)),\"Invalid distance calculation\"),o},nc.DONT_INTERSECT.get=function(){return 0},nc.DO_INTERSECT.get=function(){return 1},nc.COLLINEAR.get=function(){return 2},nc.NO_INTERSECTION.get=function(){return 0},nc.POINT_INTERSECTION.get=function(){return 1},nc.COLLINEAR_INTERSECTION.get=function(){return 2},Object.defineProperties(ec,nc);var rc=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isInSegmentEnvelopes=function(t){var e=new Yu(this._inputLines[0][0],this._inputLines[0][1]),n=new Yu(this._inputLines[1][0],this._inputLines[1][1]);return e.contains(t)&&n.contains(t)},e.prototype.computeIntersection=function(){if(3!==arguments.length)return t.prototype.computeIntersection.apply(this,arguments);var e=arguments[0],n=arguments[1],r=arguments[2];if(this._isProper=!1,Yu.intersects(n,r,e)&&0===sc.orientationIndex(n,r,e)&&0===sc.orientationIndex(r,n,e))return this._isProper=!0,(e.equals(n)||e.equals(r))&&(this._isProper=!1),this._result=t.POINT_INTERSECTION,null;this._result=t.NO_INTERSECTION},e.prototype.normalizeToMinimum=function(t,e,n,r,i){i.x=this.smallestInAbsValue(t.x,e.x,n.x,r.x),i.y=this.smallestInAbsValue(t.y,e.y,n.y,r.y),t.x-=i.x,t.y-=i.y,e.x-=i.x,e.y-=i.y,n.x-=i.x,n.y-=i.y,r.x-=i.x,r.y-=i.y},e.prototype.safeHCoordinateIntersection=function(t,n,r,i){var o=null;try{o=Uu.intersection(t,n,r,i)}catch(s){if(!(s instanceof ju))throw s;o=e.nearestEndpoint(t,n,r,i)}return o},e.prototype.intersection=function(t,n,r,i){var o=this.intersectionWithNormalization(t,n,r,i);return this.isInSegmentEnvelopes(o)||(o=new bu(e.nearestEndpoint(t,n,r,i))),null!==this._precisionModel&&this._precisionModel.makePrecise(o),o},e.prototype.smallestInAbsValue=function(t,e,n,r){var i=t,o=Math.abs(i);return Math.abs(e)<o&&(i=e,o=Math.abs(e)),Math.abs(n)<o&&(i=n,o=Math.abs(n)),Math.abs(r)<o&&(i=r),i},e.prototype.checkDD=function(t,e,n,r,i){var o=qu.intersection(t,e,n,r),s=this.isInSegmentEnvelopes(o);Xu.out.println(\"DD in env = \"+s+\"  --------------------- \"+o),i.distance(o)>1e-4&&Xu.out.println(\"Distance = \"+i.distance(o))},e.prototype.intersectionWithNormalization=function(t,e,n,r){var i=new bu(t),o=new bu(e),s=new bu(n),a=new bu(r),u=new bu;this.normalizeToEnvCentre(i,o,s,a,u);var c=this.safeHCoordinateIntersection(i,o,s,a);return c.x+=u.x,c.y+=u.y,c},e.prototype.computeCollinearIntersection=function(e,n,r,i){var o=Yu.intersects(e,n,r),s=Yu.intersects(e,n,i),a=Yu.intersects(r,i,e),u=Yu.intersects(r,i,n);return o&&s?(this._intPt[0]=r,this._intPt[1]=i,t.COLLINEAR_INTERSECTION):a&&u?(this._intPt[0]=e,this._intPt[1]=n,t.COLLINEAR_INTERSECTION):o&&a?(this._intPt[0]=r,this._intPt[1]=e,!r.equals(e)||s||u?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):o&&u?(this._intPt[0]=r,this._intPt[1]=n,!r.equals(n)||s||a?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):s&&a?(this._intPt[0]=i,this._intPt[1]=e,!i.equals(e)||o||u?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):s&&u?(this._intPt[0]=i,this._intPt[1]=n,!i.equals(n)||o||a?t.COLLINEAR_INTERSECTION:t.POINT_INTERSECTION):t.NO_INTERSECTION},e.prototype.normalizeToEnvCentre=function(t,e,n,r,i){var o=t.x<e.x?t.x:e.x,s=t.y<e.y?t.y:e.y,a=t.x>e.x?t.x:e.x,u=t.y>e.y?t.y:e.y,c=n.x<r.x?n.x:r.x,h=n.y<r.y?n.y:r.y,l=n.x>r.x?n.x:r.x,p=n.y>r.y?n.y:r.y,f=((o>c?o:c)+(a<l?a:l))/2,g=((s>h?s:h)+(u<p?u:p))/2;i.x=f,i.y=g,t.x-=i.x,t.y-=i.y,e.x-=i.x,e.y-=i.y,n.x-=i.x,n.y-=i.y,r.x-=i.x,r.y-=i.y},e.prototype.computeIntersect=function(e,n,r,i){if(this._isProper=!1,!Yu.intersects(e,n,r,i))return t.NO_INTERSECTION;var o=sc.orientationIndex(e,n,r),s=sc.orientationIndex(e,n,i);if(o>0&&s>0||o<0&&s<0)return t.NO_INTERSECTION;var a=sc.orientationIndex(r,i,e),u=sc.orientationIndex(r,i,n);if(a>0&&u>0||a<0&&u<0)return t.NO_INTERSECTION;return 0===o&&0===s&&0===a&&0===u?this.computeCollinearIntersection(e,n,r,i):(0===o||0===s||0===a||0===u?(this._isProper=!1,e.equals2D(r)||e.equals2D(i)?this._intPt[0]=e:n.equals2D(r)||n.equals2D(i)?this._intPt[0]=n:0===o?this._intPt[0]=new bu(r):0===s?this._intPt[0]=new bu(i):0===a?this._intPt[0]=new bu(e):0===u&&(this._intPt[0]=new bu(n))):(this._isProper=!0,this._intPt[0]=this.intersection(e,n,r,i)),t.POINT_INTERSECTION)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.nearestEndpoint=function(t,e,n,r){var i=t,o=sc.distancePointLine(t,n,r),s=sc.distancePointLine(e,n,r);return s<o&&(o=s,i=e),(s=sc.distancePointLine(n,t,e))<o&&(o=s,i=n),(s=sc.distancePointLine(r,t,e))<o&&(o=s,i=r),i},e}(ec),ic=function(){};ic.prototype.interfaces_=function(){return[]},ic.prototype.getClass=function(){return ic},ic.orientationIndex=function(t,e,n){var r=e.x-t.x,i=e.y-t.y,o=n.x-e.x,s=n.y-e.y;return ic.signOfDet2x2(r,i,o,s)},ic.signOfDet2x2=function(t,e,n,r){var i=null,o=null,s=null;if(i=1,0===t||0===r)return 0===e||0===n?0:e>0?n>0?-i:i:n>0?i:-i;if(0===e||0===n)return r>0?t>0?i:-i:t>0?-i:i;if(e>0?r>0?e<=r||(i=-i,o=t,t=n,n=o,o=e,e=r,r=o):e<=-r?(i=-i,n=-n,r=-r):(o=t,t=-n,n=o,o=e,e=-r,r=o):r>0?-e<=r?(i=-i,t=-t,e=-e):(o=-t,t=n,n=o,o=-e,e=r,r=o):e>=r?(t=-t,e=-e,n=-n,r=-r):(i=-i,o=-t,t=-n,n=o,o=-e,e=-r,r=o),t>0){if(!(n>0))return i;if(!(t<=n))return i}else{if(n>0)return-i;if(!(t>=n))return-i;i=-i,t=-t,n=-n}for(;;){if(s=Math.floor(n/t),n-=s*t,(r-=s*e)<0)return-i;if(r>e)return i;if(t>n+n){if(e<r+r)return i}else{if(e>r+r)return-i;n=t-n,r=e-r,i=-i}if(0===r)return 0===n?0:-i;if(0===n)return i;if(s=Math.floor(t/n),t-=s*n,(e-=s*r)<0)return i;if(e>r)return-i;if(n>t+t){if(r<e+e)return-i}else{if(r>e+e)return i;t=n-t,e=r-e,i=-i}if(0===e)return 0===t?0:i;if(0===t)return-i}};var oc=function(){this._p=null,this._crossingCount=0,this._isPointOnSegment=!1;var t=arguments[0];this._p=t};oc.prototype.countSegment=function(t,e){if(t.x<this._p.x&&e.x<this._p.x)return null;if(this._p.x===e.x&&this._p.y===e.y)return this._isPointOnSegment=!0,null;if(t.y===this._p.y&&e.y===this._p.y){var n=t.x,r=e.x;return n>r&&(n=e.x,r=t.x),this._p.x>=n&&this._p.x<=r&&(this._isPointOnSegment=!0),null}if(t.y>this._p.y&&e.y<=this._p.y||e.y>this._p.y&&t.y<=this._p.y){var i=t.x-this._p.x,o=t.y-this._p.y,s=e.x-this._p.x,a=e.y-this._p.y,u=ic.signOfDet2x2(i,o,s,a);if(0===u)return this._isPointOnSegment=!0,null;a<o&&(u=-u),u>0&&this._crossingCount++}},oc.prototype.isPointInPolygon=function(){return this.getLocation()!==Su.EXTERIOR},oc.prototype.getLocation=function(){return this._isPointOnSegment?Su.BOUNDARY:this._crossingCount%2==1?Su.INTERIOR:Su.EXTERIOR},oc.prototype.isOnSegment=function(){return this._isPointOnSegment},oc.prototype.interfaces_=function(){return[]},oc.prototype.getClass=function(){return oc},oc.locatePointInRing=function(){if(arguments[0]instanceof bu&&Lu(arguments[1],Bu)){for(var t=arguments[0],e=arguments[1],n=new oc(t),r=new bu,i=new bu,o=1;o<e.size();o++)if(e.getCoordinate(o,r),e.getCoordinate(o-1,i),n.countSegment(r,i),n.isOnSegment())return n.getLocation();return n.getLocation()}if(arguments[0]instanceof bu&&arguments[1]instanceof Array){for(var s=arguments[0],a=arguments[1],u=new oc(s),c=1;c<a.length;c++){var h=a[c],l=a[c-1];if(u.countSegment(h,l),u.isOnSegment())return u.getLocation()}return u.getLocation()}};var sc=function(){},ac={CLOCKWISE:{configurable:!0},RIGHT:{configurable:!0},COUNTERCLOCKWISE:{configurable:!0},LEFT:{configurable:!0},COLLINEAR:{configurable:!0},STRAIGHT:{configurable:!0}};sc.prototype.interfaces_=function(){return[]},sc.prototype.getClass=function(){return sc},sc.orientationIndex=function(t,e,n){return qu.orientationIndex(t,e,n)},sc.signedArea=function(){if(arguments[0]instanceof Array){var t=arguments[0];if(t.length<3)return 0;for(var e=0,n=t[0].x,r=1;r<t.length-1;r++){var i=t[r].x-n,o=t[r+1].y;e+=i*(t[r-1].y-o)}return e/2}if(Lu(arguments[0],Bu)){var s=arguments[0],a=s.size();if(a<3)return 0;var u=new bu,c=new bu,h=new bu;s.getCoordinate(0,c),s.getCoordinate(1,h);var l=c.x;h.x-=l;for(var p=0,f=1;f<a-1;f++)u.y=c.y,c.x=h.x,c.y=h.y,s.getCoordinate(f+1,h),h.x-=l,p+=c.x*(u.y-h.y);return p/2}},sc.distanceLineLine=function(t,e,n,r){if(t.equals(e))return sc.distancePointLine(t,n,r);if(n.equals(r))return sc.distancePointLine(r,t,e);var i=!1;if(Yu.intersects(t,e,n,r)){var o=(e.x-t.x)*(r.y-n.y)-(e.y-t.y)*(r.x-n.x);if(0===o)i=!0;else{var s=(t.y-n.y)*(r.x-n.x)-(t.x-n.x)*(r.y-n.y),a=((t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y))/o,u=s/o;(u<0||u>1||a<0||a>1)&&(i=!0)}}else i=!0;return i?Pu.min(sc.distancePointLine(t,n,r),sc.distancePointLine(e,n,r),sc.distancePointLine(n,t,e),sc.distancePointLine(r,t,e)):0},sc.isPointInRing=function(t,e){return sc.locatePointInRing(t,e)!==Su.EXTERIOR},sc.computeLength=function(t){var e=t.size();if(e<=1)return 0;var n=0,r=new bu;t.getCoordinate(0,r);for(var i=r.x,o=r.y,s=1;s<e;s++){t.getCoordinate(s,r);var a=r.x,u=r.y,c=a-i,h=u-o;n+=Math.sqrt(c*c+h*h),i=a,o=u}return n},sc.isCCW=function(t){var e=t.length-1;if(e<3)throw new _u(\"Ring has fewer than 4 points, so orientation cannot be determined\");for(var n=t[0],r=0,i=1;i<=e;i++){var o=t[i];o.y>n.y&&(n=o,r=i)}var s=r;do{(s-=1)<0&&(s=e)}while(t[s].equals2D(n)&&s!==r);var a=r;do{a=(a+1)%e}while(t[a].equals2D(n)&&a!==r);var u=t[s],c=t[a];if(u.equals2D(n)||c.equals2D(n)||u.equals2D(c))return!1;var h=sc.computeOrientation(u,n,c),l=!1;return l=0===h?u.x>c.x:h>0,l},sc.locatePointInRing=function(t,e){return oc.locatePointInRing(t,e)},sc.distancePointLinePerpendicular=function(t,e,n){var r=(n.x-e.x)*(n.x-e.x)+(n.y-e.y)*(n.y-e.y),i=((e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y))/r;return Math.abs(i)*Math.sqrt(r)},sc.computeOrientation=function(t,e,n){return sc.orientationIndex(t,e,n)},sc.distancePointLine=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(0===e.length)throw new _u(\"Line array must contain at least one vertex\");for(var n=t.distance(e[0]),r=0;r<e.length-1;r++){var i=sc.distancePointLine(t,e[r],e[r+1]);i<n&&(n=i)}return n}if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];if(s.x===a.x&&s.y===a.y)return o.distance(s);var u=(a.x-s.x)*(a.x-s.x)+(a.y-s.y)*(a.y-s.y),c=((o.x-s.x)*(a.x-s.x)+(o.y-s.y)*(a.y-s.y))/u;if(c<=0)return o.distance(s);if(c>=1)return o.distance(a);var h=((s.y-o.y)*(a.x-s.x)-(s.x-o.x)*(a.y-s.y))/u;return Math.abs(h)*Math.sqrt(u)}},sc.isOnLine=function(t,e){for(var n=new rc,r=1;r<e.length;r++){var i=e[r-1],o=e[r];if(n.computeIntersection(t,i,o),n.hasIntersection())return!0}return!1},ac.CLOCKWISE.get=function(){return-1},ac.RIGHT.get=function(){return sc.CLOCKWISE},ac.COUNTERCLOCKWISE.get=function(){return 1},ac.LEFT.get=function(){return sc.COUNTERCLOCKWISE},ac.COLLINEAR.get=function(){return 0},ac.STRAIGHT.get=function(){return sc.COLLINEAR},Object.defineProperties(sc,ac);var uc=function(){};uc.prototype.filter=function(t){},uc.prototype.interfaces_=function(){return[]},uc.prototype.getClass=function(){return uc};var cc=function(){var t=arguments[0];this._envelope=null,this._factory=null,this._SRID=null,this._userData=null,this._factory=t,this._SRID=t.getSRID()},hc={serialVersionUID:{configurable:!0},SORTINDEX_POINT:{configurable:!0},SORTINDEX_MULTIPOINT:{configurable:!0},SORTINDEX_LINESTRING:{configurable:!0},SORTINDEX_LINEARRING:{configurable:!0},SORTINDEX_MULTILINESTRING:{configurable:!0},SORTINDEX_POLYGON:{configurable:!0},SORTINDEX_MULTIPOLYGON:{configurable:!0},SORTINDEX_GEOMETRYCOLLECTION:{configurable:!0},geometryChangedFilter:{configurable:!0}};cc.prototype.isGeometryCollection=function(){return this.getSortIndex()===cc.SORTINDEX_GEOMETRYCOLLECTION},cc.prototype.getFactory=function(){return this._factory},cc.prototype.getGeometryN=function(t){return this},cc.prototype.getArea=function(){return 0},cc.prototype.isRectangle=function(){return!1},cc.prototype.equals=function(){if(arguments[0]instanceof cc){var t=arguments[0];return null!==t&&this.equalsTopo(t)}if(arguments[0]instanceof Object){var e=arguments[0];if(!(e instanceof cc))return!1;var n=e;return this.equalsExact(n)}},cc.prototype.equalsExact=function(t){return this===t||this.equalsExact(t,0)},cc.prototype.geometryChanged=function(){this.apply(cc.geometryChangedFilter)},cc.prototype.geometryChangedAction=function(){this._envelope=null},cc.prototype.equalsNorm=function(t){return null!==t&&this.norm().equalsExact(t.norm())},cc.prototype.getLength=function(){return 0},cc.prototype.getNumGeometries=function(){return 1},cc.prototype.compareTo=function(){if(1===arguments.length){var t=arguments[0],e=t;return this.getSortIndex()!==e.getSortIndex()?this.getSortIndex()-e.getSortIndex():this.isEmpty()&&e.isEmpty()?0:this.isEmpty()?-1:e.isEmpty()?1:this.compareToSameClass(t)}if(2===arguments.length){var n=arguments[0],r=arguments[1];return this.getSortIndex()!==n.getSortIndex()?this.getSortIndex()-n.getSortIndex():this.isEmpty()&&n.isEmpty()?0:this.isEmpty()?-1:n.isEmpty()?1:this.compareToSameClass(n,r)}},cc.prototype.getUserData=function(){return this._userData},cc.prototype.getSRID=function(){return this._SRID},cc.prototype.getEnvelope=function(){return this.getFactory().toGeometry(this.getEnvelopeInternal())},cc.prototype.checkNotGeometryCollection=function(t){if(t.getSortIndex()===cc.SORTINDEX_GEOMETRYCOLLECTION)throw new _u(\"This method does not support GeometryCollection arguments\")},cc.prototype.equal=function(t,e,n){return 0===n?t.equals(e):t.distance(e)<=n},cc.prototype.norm=function(){var t=this.copy();return t.normalize(),t},cc.prototype.getPrecisionModel=function(){return this._factory.getPrecisionModel()},cc.prototype.getEnvelopeInternal=function(){return null===this._envelope&&(this._envelope=this.computeEnvelopeInternal()),new Yu(this._envelope)},cc.prototype.setSRID=function(t){this._SRID=t},cc.prototype.setUserData=function(t){this._userData=t},cc.prototype.compare=function(t,e){for(var n=t.iterator(),r=e.iterator();n.hasNext()&&r.hasNext();){var i=n.next(),o=r.next(),s=i.compareTo(o);if(0!==s)return s}return n.hasNext()?1:r.hasNext()?-1:0},cc.prototype.hashCode=function(){return this.getEnvelopeInternal().hashCode()},cc.prototype.isGeometryCollectionOrDerived=function(){return this.getSortIndex()===cc.SORTINDEX_GEOMETRYCOLLECTION||this.getSortIndex()===cc.SORTINDEX_MULTIPOINT||this.getSortIndex()===cc.SORTINDEX_MULTILINESTRING||this.getSortIndex()===cc.SORTINDEX_MULTIPOLYGON},cc.prototype.interfaces_=function(){return[Eu,xu,Li]},cc.prototype.getClass=function(){return cc},cc.hasNonEmptyElements=function(t){for(var e=0;e<t.length;e++)if(!t[e].isEmpty())return!0;return!1},cc.hasNullElements=function(t){for(var e=0;e<t.length;e++)if(null===t[e])return!0;return!1},hc.serialVersionUID.get=function(){return 0x799ea46522854c00},hc.SORTINDEX_POINT.get=function(){return 0},hc.SORTINDEX_MULTIPOINT.get=function(){return 1},hc.SORTINDEX_LINESTRING.get=function(){return 2},hc.SORTINDEX_LINEARRING.get=function(){return 3},hc.SORTINDEX_MULTILINESTRING.get=function(){return 4},hc.SORTINDEX_POLYGON.get=function(){return 5},hc.SORTINDEX_MULTIPOLYGON.get=function(){return 6},hc.SORTINDEX_GEOMETRYCOLLECTION.get=function(){return 7},hc.geometryChangedFilter.get=function(){return lc},Object.defineProperties(cc,hc);var lc=function(){};lc.interfaces_=function(){return[uc]},lc.filter=function(t){t.geometryChangedAction()};var pc=function(){};pc.prototype.filter=function(t){},pc.prototype.interfaces_=function(){return[]},pc.prototype.getClass=function(){return pc};var fc=function(){},gc={Mod2BoundaryNodeRule:{configurable:!0},EndPointBoundaryNodeRule:{configurable:!0},MultiValentEndPointBoundaryNodeRule:{configurable:!0},MonoValentEndPointBoundaryNodeRule:{configurable:!0},MOD2_BOUNDARY_RULE:{configurable:!0},ENDPOINT_BOUNDARY_RULE:{configurable:!0},MULTIVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:!0},MONOVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:!0},OGC_SFS_BOUNDARY_RULE:{configurable:!0}};fc.prototype.isInBoundary=function(t){},fc.prototype.interfaces_=function(){return[]},fc.prototype.getClass=function(){return fc},gc.Mod2BoundaryNodeRule.get=function(){return dc},gc.EndPointBoundaryNodeRule.get=function(){return yc},gc.MultiValentEndPointBoundaryNodeRule.get=function(){return _c},gc.MonoValentEndPointBoundaryNodeRule.get=function(){return mc},gc.MOD2_BOUNDARY_RULE.get=function(){return new dc},gc.ENDPOINT_BOUNDARY_RULE.get=function(){return new yc},gc.MULTIVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new _c},gc.MONOVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new mc},gc.OGC_SFS_BOUNDARY_RULE.get=function(){return fc.MOD2_BOUNDARY_RULE},Object.defineProperties(fc,gc);var dc=function(){};dc.prototype.isInBoundary=function(t){return t%2==1},dc.prototype.interfaces_=function(){return[fc]},dc.prototype.getClass=function(){return dc};var yc=function(){};yc.prototype.isInBoundary=function(t){return t>0},yc.prototype.interfaces_=function(){return[fc]},yc.prototype.getClass=function(){return yc};var _c=function(){};_c.prototype.isInBoundary=function(t){return t>1},_c.prototype.interfaces_=function(){return[fc]},_c.prototype.getClass=function(){return _c};var mc=function(){};mc.prototype.isInBoundary=function(t){return 1===t},mc.prototype.interfaces_=function(){return[fc]},mc.prototype.getClass=function(){return mc};var vc=function(){};vc.prototype.add=function(){},vc.prototype.addAll=function(){},vc.prototype.isEmpty=function(){},vc.prototype.iterator=function(){},vc.prototype.size=function(){},vc.prototype.toArray=function(){},vc.prototype.remove=function(){};var xc=function(t){function e(e){t.call(this),this.message=e||\"\"}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={name:{configurable:!0}};return n.name.get=function(){return\"IndexOutOfBoundsException\"},Object.defineProperties(e,n),e}(Error),Ec=function(){};Ec.prototype.hasNext=function(){},Ec.prototype.next=function(){},Ec.prototype.remove=function(){};var wc=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.get=function(){},e.prototype.set=function(){},e.prototype.isEmpty=function(){},e}(vc);(Pi.prototype=new Error).name=\"NoSuchElementException\";var bc=function(t){function e(){t.call(this),this.array_=[],arguments[0]instanceof vc&&this.addAll(arguments[0])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.ensureCapacity=function(){},e.prototype.interfaces_=function(){return[t,vc]},e.prototype.add=function(t){return 1===arguments.length?this.array_.push(t):this.array_.splice(arguments[0],arguments[1]),!0},e.prototype.clear=function(){this.array_=[]},e.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},e.prototype.set=function(t,e){var n=this.array_[t];return this.array_[t]=e,n},e.prototype.iterator=function(){return new Ic(this)},e.prototype.get=function(t){if(t<0||t>=this.size())throw new xc;return this.array_[t]},e.prototype.isEmpty=function(){return 0===this.array_.length},e.prototype.size=function(){return this.array_.length},e.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},e.prototype.remove=function(t){for(var e=!1,n=0,r=this.array_.length;n<r;n++)if(this.array_[n]===t){this.array_.splice(n,1),e=!0;break}return e},e}(wc),Ic=function(t){function e(e){t.call(this),this.arrayList_=e,this.position_=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.next=function(){if(this.position_===this.arrayList_.size())throw new Pi;return this.arrayList_.get(this.position_++)},e.prototype.hasNext=function(){return this.position_<this.arrayList_.size()},e.prototype.set=function(t){return this.arrayList_.set(this.position_-1,t)},e.prototype.remove=function(){this.arrayList_.remove(this.arrayList_.get(this.position_))},e}(Ec),Nc=function(t){function e(){if(t.call(this),0===arguments.length);else if(1===arguments.length){var e=arguments[0];this.ensureCapacity(e.length),this.add(e,!0)}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this.ensureCapacity(n.length),this.add(n,r)}}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={coordArrayType:{configurable:!0}};return n.coordArrayType.get=function(){return new Array(0).fill(null)},e.prototype.getCoordinate=function(t){return this.get(t)},e.prototype.addAll=function(){if(2===arguments.length){for(var e=arguments[0],n=arguments[1],r=!1,i=e.iterator();i.hasNext();)this.add(i.next(),n),r=!0;return r}return t.prototype.addAll.apply(this,arguments)},e.prototype.clone=function(){for(var e=t.prototype.clone.call(this),n=0;n<this.size();n++)e.add(n,this.get(n).copy());return e},e.prototype.toCoordinateArray=function(){return this.toArray(e.coordArrayType)},e.prototype.add=function(){if(1===arguments.length){var e=arguments[0];t.prototype.add.call(this,e)}else if(2===arguments.length){if(arguments[0]instanceof Array&&\"boolean\"==typeof arguments[1]){var n=arguments[0],r=arguments[1];return this.add(n,r,!0),!0}if(arguments[0]instanceof bu&&\"boolean\"==typeof arguments[1]){var i=arguments[0];if(!arguments[1]&&this.size()>=1){if(this.get(this.size()-1).equals2D(i))return null}t.prototype.add.call(this,i)}else if(arguments[0]instanceof Object&&\"boolean\"==typeof arguments[1]){var o=arguments[0],s=arguments[1];return this.add(o,s),!0}}else if(3===arguments.length){if(\"boolean\"==typeof arguments[2]&&arguments[0]instanceof Array&&\"boolean\"==typeof arguments[1]){var a=arguments[0],u=arguments[1];if(arguments[2])for(var c=0;c<a.length;c++)this.add(a[c],u);else for(var h=a.length-1;h>=0;h--)this.add(a[h],u);return!0}if(\"boolean\"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof bu){var l=arguments[0],p=arguments[1];if(!arguments[2]){var f=this.size();if(f>0){if(l>0){if(this.get(l-1).equals2D(p))return null}if(l<f){if(this.get(l).equals2D(p))return null}}}t.prototype.add.call(this,l,p)}}else if(4===arguments.length){var g=arguments[0],d=arguments[1],y=arguments[2],_=arguments[3],m=1;y>_&&(m=-1);for(var v=y;v!==_;v+=m)this.add(g[v],d);return!0}},e.prototype.closeRing=function(){this.size()>0&&this.add(new bu(this.get(0)),!1)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},Object.defineProperties(e,n),e}(bc),Cc=function(){},Sc={ForwardComparator:{configurable:!0},BidirectionalComparator:{configurable:!0},coordArrayType:{configurable:!0}};Sc.ForwardComparator.get=function(){return Mc},Sc.BidirectionalComparator.get=function(){return Lc},Sc.coordArrayType.get=function(){return new Array(0).fill(null)},Cc.prototype.interfaces_=function(){return[]},Cc.prototype.getClass=function(){return Cc},Cc.isRing=function(t){return!(t.length<4)&&!!t[0].equals2D(t[t.length-1])},Cc.ptNotInList=function(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(Cc.indexOf(r,e)<0)return r}return null},Cc.scroll=function(t,e){var n=Cc.indexOf(e,t);if(n<0)return null;var r=new Array(t.length).fill(null);Xu.arraycopy(t,n,r,0,t.length-n),Xu.arraycopy(t,0,r,t.length-n,n),Xu.arraycopy(r,0,t,0,t.length)},Cc.equals=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];if(t===e)return!0;if(null===t||null===e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].equals(e[n]))return!1;return!0}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];if(r===i)return!0;if(null===r||null===i)return!1;if(r.length!==i.length)return!1;for(var s=0;s<r.length;s++)if(0!==o.compare(r[s],i[s]))return!1;return!0}},Cc.intersection=function(t,e){for(var n=new Nc,r=0;r<t.length;r++)e.intersects(t[r])&&n.add(t[r],!0);return n.toCoordinateArray()},Cc.hasRepeatedPoints=function(t){for(var e=1;e<t.length;e++)if(t[e-1].equals(t[e]))return!0;return!1},Cc.removeRepeatedPoints=function(t){if(!Cc.hasRepeatedPoints(t))return t;return new Nc(t,!1).toCoordinateArray()},Cc.reverse=function(t){for(var e=t.length-1,n=Math.trunc(e/2),r=0;r<=n;r++){var i=t[r];t[r]=t[e-r],t[e-r]=i}},Cc.removeNull=function(t){for(var e=0,n=0;n<t.length;n++)null!==t[n]&&e++;var r=new Array(e).fill(null);if(0===e)return r;for(var i=0,o=0;o<t.length;o++)null!==t[o]&&(r[i++]=t[o]);return r},Cc.copyDeep=function(){if(1===arguments.length){for(var t=arguments[0],e=new Array(t.length).fill(null),n=0;n<t.length;n++)e[n]=new bu(t[n]);return e}if(5===arguments.length)for(var r=arguments[0],i=arguments[1],o=arguments[2],s=arguments[3],a=arguments[4],u=0;u<a;u++)o[s+u]=new bu(r[i+u])},Cc.isEqualReversed=function(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=e[t.length-n-1];if(0!==r.compareTo(i))return!1}return!0},Cc.envelope=function(t){for(var e=new Yu,n=0;n<t.length;n++)e.expandToInclude(t[n]);return e},Cc.toCoordinateArray=function(t){return t.toArray(Cc.coordArrayType)},Cc.atLeastNCoordinatesOrNothing=function(t,e){return e.length>=t?e:[]},Cc.indexOf=function(t,e){for(var n=0;n<e.length;n++)if(t.equals(e[n]))return n;return-1},Cc.increasingDirection=function(t){for(var e=0;e<Math.trunc(t.length/2);e++){var n=t.length-1-e,r=t[e].compareTo(t[n]);if(0!==r)return r}return 1},Cc.compare=function(t,e){for(var n=0;n<t.length&&n<e.length;){var r=t[n].compareTo(e[n]);if(0!==r)return r;n++}return n<e.length?-1:n<t.length?1:0},Cc.minCoordinate=function(t){for(var e=null,n=0;n<t.length;n++)(null===e||e.compareTo(t[n])>0)&&(e=t[n]);return e},Cc.extract=function(t,e,n){e=Pu.clamp(e,0,t.length);var r=(n=Pu.clamp(n,-1,t.length))-e+1;n<0&&(r=0),e>=t.length&&(r=0),n<e&&(r=0);var i=new Array(r).fill(null);if(0===r)return i;for(var o=0,s=e;s<=n;s++)i[o++]=t[s];return i},Object.defineProperties(Cc,Sc);var Mc=function(){};Mc.prototype.compare=function(t,e){return Cc.compare(t,e)},Mc.prototype.interfaces_=function(){return[wu]},Mc.prototype.getClass=function(){return Mc};var Lc=function(){};Lc.prototype.compare=function(t,e){var n=t,r=e;if(n.length<r.length)return-1;if(n.length>r.length)return 1;if(0===n.length)return 0;var i=Cc.compare(n,r);return Cc.isEqualReversed(n,r)?0:i},Lc.prototype.OLDcompare=function(t,e){var n=t,r=e;if(n.length<r.length)return-1;if(n.length>r.length)return 1;if(0===n.length)return 0;for(var i=Cc.increasingDirection(n),o=Cc.increasingDirection(r),s=i>0?0:n.length-1,a=o>0?0:n.length-1,u=0;u<n.length;u++){var c=n[s].compareTo(r[a]);if(0!==c)return c;s+=i,a+=o}return 0},Lc.prototype.interfaces_=function(){return[wu]},Lc.prototype.getClass=function(){return Lc};var Pc=function(){};Pc.prototype.get=function(){},Pc.prototype.put=function(){},Pc.prototype.size=function(){},Pc.prototype.values=function(){},Pc.prototype.entrySet=function(){};var Oc=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Pc);(Oi.prototype=new Error).name=\"OperationNotSupported\",(Ri.prototype=new vc).contains=function(){};var Rc=function(t){function e(){t.call(this),this.array_=[],arguments[0]instanceof vc&&this.addAll(arguments[0])}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.contains=function(t){for(var e=0,n=this.array_.length;e<n;e++){if(this.array_[e]===t)return!0}return!1},e.prototype.add=function(t){return!this.contains(t)&&(this.array_.push(t),!0)},e.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},e.prototype.remove=function(t){throw new Error},e.prototype.size=function(){return this.array_.length},e.prototype.isEmpty=function(){return 0===this.array_.length},e.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},e.prototype.iterator=function(){return new Tc(this)},e}(Ri),Tc=function(t){function e(e){t.call(this),this.hashSet_=e,this.position_=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.next=function(){if(this.position_===this.hashSet_.size())throw new Pi;return this.hashSet_.array_[this.position_++]},e.prototype.hasNext=function(){return this.position_<this.hashSet_.size()},e.prototype.remove=function(){throw new Oi},e}(Ec),Ac=0;(Gi.prototype=new Oc).get=function(t){for(var e=this.root_;null!==e;){var n=t.compareTo(e.key);if(n<0)e=e.left;else{if(!(n>0))return e.value;e=e.right}}return null},Gi.prototype.put=function(t,e){if(null===this.root_)return this.root_={key:t,value:e,left:null,right:null,parent:null,color:Ac,getValue:function(){return this.value},getKey:function(){return this.key}},this.size_=1,null;var n,r,i=this.root_;do{if(n=i,(r=t.compareTo(i.key))<0)i=i.left;else{if(!(r>0)){var o=i.value;return i.value=e,o}i=i.right}}while(null!==i);var s={key:t,left:null,right:null,value:e,parent:n,color:Ac,getValue:function(){return this.value},getKey:function(){return this.key}};return r<0?n.left=s:n.right=s,this.fixAfterInsertion(s),this.size_++,null},Gi.prototype.fixAfterInsertion=function(t){for(t.color=1;null!=t&&t!==this.root_&&1===t.parent.color;)if(Ai(t)===Fi(Ai(Ai(t)))){var e=qi(Ai(Ai(t)));1===Ti(e)?(Di(Ai(t),Ac),Di(e,Ac),Di(Ai(Ai(t)),1),t=Ai(Ai(t))):(t===qi(Ai(t))&&(t=Ai(t),this.rotateLeft(t)),Di(Ai(t),Ac),Di(Ai(Ai(t)),1),this.rotateRight(Ai(Ai(t))))}else{var n=Fi(Ai(Ai(t)));1===Ti(n)?(Di(Ai(t),Ac),Di(n,Ac),Di(Ai(Ai(t)),1),t=Ai(Ai(t))):(t===Fi(Ai(t))&&(t=Ai(t),this.rotateRight(t)),Di(Ai(t),Ac),Di(Ai(Ai(t)),1),this.rotateLeft(Ai(Ai(t))))}this.root_.color=Ac},Gi.prototype.values=function(){var t=new bc,e=this.getFirstEntry();if(null!==e)for(t.add(e.value);null!==(e=Gi.successor(e));)t.add(e.value);return t},Gi.prototype.entrySet=function(){var t=new Rc,e=this.getFirstEntry();if(null!==e)for(t.add(e);null!==(e=Gi.successor(e));)t.add(e);return t},Gi.prototype.rotateLeft=function(t){if(null!=t){var e=t.right;t.right=e.left,null!=e.left&&(e.left.parent=t),e.parent=t.parent,null===t.parent?this.root_=e:t.parent.left===t?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e}},Gi.prototype.rotateRight=function(t){if(null!=t){var e=t.left;t.left=e.right,null!=e.right&&(e.right.parent=t),e.parent=t.parent,null===t.parent?this.root_=e:t.parent.right===t?t.parent.right=e:t.parent.left=e,e.right=t,t.parent=e}},Gi.prototype.getFirstEntry=function(){var t=this.root_;if(null!=t)for(;null!=t.left;)t=t.left;return t},Gi.successor=function(t){if(null===t)return null;if(null!==t.right){for(var e=t.right;null!==e.left;)e=e.left;return e}for(var n=t.parent,r=t;null!==n&&r===n.right;)r=n,n=n.parent;return n},Gi.prototype.size=function(){return this.size_};var Dc=function(){};Dc.prototype.interfaces_=function(){return[]},Dc.prototype.getClass=function(){return Dc},Bi.prototype=new Ri,(ki.prototype=new Bi).contains=function(t){for(var e=0,n=this.array_.length;e<n;e++){if(0===this.array_[e].compareTo(t))return!0}return!1},ki.prototype.add=function(t){if(this.contains(t))return!1;for(var e=0,n=this.array_.length;e<n;e++){if(1===this.array_[e].compareTo(t))return this.array_.splice(e,0,t),!0}return this.array_.push(t),!0},ki.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next());return!0},ki.prototype.remove=function(t){throw new Oi},ki.prototype.size=function(){return this.array_.length},ki.prototype.isEmpty=function(){return 0===this.array_.length},ki.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t},ki.prototype.iterator=function(){return new Fc(this)};var Fc=function(t){this.treeSet_=t,this.position_=0};Fc.prototype.next=function(){if(this.position_===this.treeSet_.size())throw new Pi;return this.treeSet_.array_[this.position_++]},Fc.prototype.hasNext=function(){return this.position_<this.treeSet_.size()},Fc.prototype.remove=function(){throw new Oi};var qc=function(){};qc.sort=function(){var t,e,n,r,i=arguments[0];if(1===arguments.length)r=function(t,e){return t.compareTo(e)},i.sort(r);else if(2===arguments.length)n=arguments[1],r=function(t,e){return n.compare(t,e)},i.sort(r);else if(3===arguments.length){(e=i.slice(arguments[1],arguments[2])).sort();var o=i.slice(0,arguments[1]).concat(e,i.slice(arguments[2],i.length));for(i.splice(0,i.length),t=0;t<o.length;t++)i.push(o[t])}else if(4===arguments.length)for(e=i.slice(arguments[1],arguments[2]),n=arguments[3],r=function(t,e){return n.compare(t,e)},e.sort(r),o=i.slice(0,arguments[1]).concat(e,i.slice(arguments[2],i.length)),i.splice(0,i.length),t=0;t<o.length;t++)i.push(o[t])},qc.asList=function(t){for(var e=new bc,n=0,r=t.length;n<r;n++)e.add(t[n]);return e};var Gc=function(){},Bc={P:{configurable:!0},L:{configurable:!0},A:{configurable:!0},FALSE:{configurable:!0},TRUE:{configurable:!0},DONTCARE:{configurable:!0},SYM_FALSE:{configurable:!0},SYM_TRUE:{configurable:!0},SYM_DONTCARE:{configurable:!0},SYM_P:{configurable:!0},SYM_L:{configurable:!0},SYM_A:{configurable:!0}};Bc.P.get=function(){return 0},Bc.L.get=function(){return 1},Bc.A.get=function(){return 2},Bc.FALSE.get=function(){return-1},Bc.TRUE.get=function(){return-2},Bc.DONTCARE.get=function(){return-3},Bc.SYM_FALSE.get=function(){return\"F\"},Bc.SYM_TRUE.get=function(){return\"T\"},Bc.SYM_DONTCARE.get=function(){return\"*\"},Bc.SYM_P.get=function(){return\"0\"},Bc.SYM_L.get=function(){return\"1\"},Bc.SYM_A.get=function(){return\"2\"},Gc.prototype.interfaces_=function(){return[]},Gc.prototype.getClass=function(){return Gc},Gc.toDimensionSymbol=function(t){switch(t){case Gc.FALSE:return Gc.SYM_FALSE;case Gc.TRUE:return Gc.SYM_TRUE;case Gc.DONTCARE:return Gc.SYM_DONTCARE;case Gc.P:return Gc.SYM_P;case Gc.L:return Gc.SYM_L;case Gc.A:return Gc.SYM_A}throw new _u(\"Unknown dimension value: \"+t)},Gc.toDimensionValue=function(t){switch(Au.toUpperCase(t)){case Gc.SYM_FALSE:return Gc.FALSE;case Gc.SYM_TRUE:return Gc.TRUE;case Gc.SYM_DONTCARE:return Gc.DONTCARE;case Gc.SYM_P:return Gc.P;case Gc.SYM_L:return Gc.L;case Gc.SYM_A:return Gc.A}throw new _u(\"Unknown dimension symbol: \"+t)},Object.defineProperties(Gc,Bc);var kc=function(){};kc.prototype.filter=function(t){},kc.prototype.interfaces_=function(){return[]},kc.prototype.getClass=function(){return kc};var zc=function(){};zc.prototype.filter=function(t,e){},zc.prototype.isDone=function(){},zc.prototype.isGeometryChanged=function(){},zc.prototype.interfaces_=function(){return[]},zc.prototype.getClass=function(){return zc};var jc=function(t){function e(e,n){if(t.call(this,n),this._geometries=e||[],t.hasNullElements(this._geometries))throw new _u(\"geometries must not contain null elements\")}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){for(var t=new Yu,e=0;e<this._geometries.length;e++)t.expandToInclude(this._geometries[e].getEnvelopeInternal());return t},e.prototype.getGeometryN=function(t){return this._geometries[t]},e.prototype.getSortIndex=function(){return t.SORTINDEX_GEOMETRYCOLLECTION},e.prototype.getCoordinates=function(){for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=0;n<this._geometries.length;n++)for(var r=this._geometries[n].getCoordinates(),i=0;i<r.length;i++)t[++e]=r[i];return t},e.prototype.getArea=function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getArea();return t},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];if(!this.isEquivalentClass(e))return!1;var r=e;if(this._geometries.length!==r._geometries.length)return!1;for(var i=0;i<this._geometries.length;i++)if(!this._geometries[i].equalsExact(r._geometries[i],n))return!1;return!0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){for(var t=0;t<this._geometries.length;t++)this._geometries[t].normalize();qc.sort(this._geometries)},e.prototype.getCoordinate=function(){return this.isEmpty()?null:this._geometries[0].getCoordinate()},e.prototype.getBoundaryDimension=function(){for(var t=Gc.FALSE,e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getBoundaryDimension());return t},e.prototype.getDimension=function(){for(var t=Gc.FALSE,e=0;e<this._geometries.length;e++)t=Math.max(t,this._geometries[e].getDimension());return t},e.prototype.getLength=function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getLength();return t},e.prototype.getNumPoints=function(){for(var t=0,e=0;e<this._geometries.length;e++)t+=this._geometries[e].getNumPoints();return t},e.prototype.getNumGeometries=function(){return this._geometries.length},e.prototype.reverse=function(){for(var t=this._geometries.length,e=new Array(t).fill(null),n=0;n<this._geometries.length;n++)e[n]=this._geometries[n].reverse();return this.getFactory().createGeometryCollection(e)},e.prototype.compareToSameClass=function(){if(1===arguments.length){var t=arguments[0],e=new ki(qc.asList(this._geometries)),n=new ki(qc.asList(t._geometries));return this.compare(e,n)}if(2===arguments.length){for(var r=arguments[0],i=arguments[1],o=r,s=this.getNumGeometries(),a=o.getNumGeometries(),u=0;u<s&&u<a;){var c=this.getGeometryN(u),h=o.getGeometryN(u),l=c.compareToSameClass(h,i);if(0!==l)return l;u++}return u<s?1:u<a?-1:0}},e.prototype.apply=function(){if(Lu(arguments[0],pc))for(var t=arguments[0],e=0;e<this._geometries.length;e++)this._geometries[e].apply(t);else if(Lu(arguments[0],zc)){var n=arguments[0];if(0===this._geometries.length)return null;for(var r=0;r<this._geometries.length&&(this._geometries[r].apply(n),!n.isDone());r++);n.isGeometryChanged()&&this.geometryChanged()}else if(Lu(arguments[0],kc)){var i=arguments[0];i.filter(this);for(var o=0;o<this._geometries.length;o++)this._geometries[o].apply(i)}else if(Lu(arguments[0],uc)){var s=arguments[0];s.filter(this);for(var a=0;a<this._geometries.length;a++)this._geometries[a].apply(s)}},e.prototype.getBoundary=function(){return this.checkNotGeometryCollection(this),tc.shouldNeverReachHere(),null},e.prototype.clone=function(){var e=t.prototype.clone.call(this);e._geometries=new Array(this._geometries.length).fill(null);for(var n=0;n<this._geometries.length;n++)e._geometries[n]=this._geometries[n].clone();return e},e.prototype.getGeometryType=function(){return\"GeometryCollection\"},e.prototype.copy=function(){for(var t=new Array(this._geometries.length).fill(null),n=0;n<t.length;n++)t[n]=this._geometries[n].copy();return new e(t,this._factory)},e.prototype.isEmpty=function(){for(var t=0;t<this._geometries.length;t++)if(!this._geometries[t].isEmpty())return!1;return!0},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return-0x4f07bcb1f857d800},Object.defineProperties(e,n),e}(cc),Xc=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return cc.SORTINDEX_MULTILINESTRING},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return this.isClosed()?Gc.FALSE:0},e.prototype.isClosed=function(){if(this.isEmpty())return!1;for(var t=0;t<this._geometries.length;t++)if(!this._geometries[t].isClosed())return!1;return!0},e.prototype.getDimension=function(){return 1},e.prototype.reverse=function(){for(var t=this._geometries.length,e=new Array(t).fill(null),n=0;n<this._geometries.length;n++)e[t-1-n]=this._geometries[n].reverse();return this.getFactory().createMultiLineString(e)},e.prototype.getBoundary=function(){return new Uc(this).getBoundary()},e.prototype.getGeometryType=function(){return\"MultiLineString\"},e.prototype.copy=function(){for(var t=new Array(this._geometries.length).fill(null),n=0;n<t.length;n++)t[n]=this._geometries[n].copy();return new e(t,this._factory)},e.prototype.interfaces_=function(){return[Dc]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x7155d2ab4afa8000},Object.defineProperties(e,n),e}(jc),Uc=function(){if(this._geom=null,this._geomFact=null,this._bnRule=null,this._endpointMap=null,1===arguments.length){var t=arguments[0],e=fc.MOD2_BOUNDARY_RULE;this._geom=t,this._geomFact=t.getFactory(),this._bnRule=e}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this._geom=n,this._geomFact=n.getFactory(),this._bnRule=r}};Uc.prototype.boundaryMultiLineString=function(t){if(this._geom.isEmpty())return this.getEmptyMultiPoint();var e=this.computeBoundaryCoordinates(t);return 1===e.length?this._geomFact.createPoint(e[0]):this._geomFact.createMultiPointFromCoords(e)},Uc.prototype.getBoundary=function(){return this._geom instanceof Jc?this.boundaryLineString(this._geom):this._geom instanceof Xc?this.boundaryMultiLineString(this._geom):this._geom.getBoundary()},Uc.prototype.boundaryLineString=function(t){if(this._geom.isEmpty())return this.getEmptyMultiPoint();if(t.isClosed()){return this._bnRule.isInBoundary(2)?t.getStartPoint():this._geomFact.createMultiPoint()}return this._geomFact.createMultiPoint([t.getStartPoint(),t.getEndPoint()])},Uc.prototype.getEmptyMultiPoint=function(){return this._geomFact.createMultiPoint()},Uc.prototype.computeBoundaryCoordinates=function(t){var e=new bc;this._endpointMap=new Gi;for(var n=0;n<t.getNumGeometries();n++){var r=t.getGeometryN(n);0!==r.getNumPoints()&&(this.addEndpoint(r.getCoordinateN(0)),this.addEndpoint(r.getCoordinateN(r.getNumPoints()-1)))}for(var i=this._endpointMap.entrySet().iterator();i.hasNext();){var o=i.next(),s=o.getValue().count;this._bnRule.isInBoundary(s)&&e.add(o.getKey())}return Cc.toCoordinateArray(e)},Uc.prototype.addEndpoint=function(t){var e=this._endpointMap.get(t);null===e&&(e=new Yc,this._endpointMap.put(t,e)),e.count++},Uc.prototype.interfaces_=function(){return[]},Uc.prototype.getClass=function(){return Uc},Uc.getBoundary=function(){if(1===arguments.length){var t=arguments[0];return new Uc(t).getBoundary()}if(2===arguments.length){var e=arguments[0],n=arguments[1];return new Uc(e,n).getBoundary()}};var Yc=function(){this.count=null};Yc.prototype.interfaces_=function(){return[]},Yc.prototype.getClass=function(){return Yc};var Vc=function(){},Hc={NEWLINE:{configurable:!0},SIMPLE_ORDINATE_FORMAT:{configurable:!0}};Vc.prototype.interfaces_=function(){return[]},Vc.prototype.getClass=function(){return Vc},Vc.chars=function(t,e){for(var n=new Array(e).fill(null),r=0;r<e;r++)n[r]=t;return String(n)},Vc.getStackTrace=function(){if(1===arguments.length){var t=arguments[0],e=new function(){},n=new function(){}(e);return t.printStackTrace(n),e.toString()}if(2===arguments.length){for(var r=arguments[0],i=arguments[1],o=\"\",s=new function(){}(new function(){}(Vc.getStackTrace(r))),a=0;a<i;a++)try{o+=s.readLine()+Vc.NEWLINE}catch(t){if(!(t instanceof zi))throw t;tc.shouldNeverReachHere()}return o}},Vc.split=function(t,e){for(var n=e.length,r=new bc,i=\"\"+t,o=i.indexOf(e);o>=0;){var s=i.substring(0,o);r.add(s),o=(i=i.substring(o+n)).indexOf(e)}i.length>0&&r.add(i);for(var a=new Array(r.size()).fill(null),u=0;u<a.length;u++)a[u]=r.get(u);return a},Vc.toString=function(){if(1===arguments.length){var t=arguments[0];return Vc.SIMPLE_ORDINATE_FORMAT.format(t)}},Vc.spaces=function(t){return Vc.chars(\" \",t)},Hc.NEWLINE.get=function(){return Xu.getProperty(\"line.separator\")},Hc.SIMPLE_ORDINATE_FORMAT.get=function(){return new function(){}(\"0.#\")},Object.defineProperties(Vc,Hc);var Wc=function(){};Wc.prototype.interfaces_=function(){return[]},Wc.prototype.getClass=function(){return Wc},Wc.copyCoord=function(t,e,n,r){for(var i=Math.min(t.getDimension(),n.getDimension()),o=0;o<i;o++)n.setOrdinate(r,o,t.getOrdinate(e,o))},Wc.isRing=function(t){var e=t.size();return 0===e||!(e<=3)&&(t.getOrdinate(0,Bu.X)===t.getOrdinate(e-1,Bu.X)&&t.getOrdinate(0,Bu.Y)===t.getOrdinate(e-1,Bu.Y))},Wc.isEqual=function(t,e){var n=t.size();if(n!==e.size())return!1;for(var r=Math.min(t.getDimension(),e.getDimension()),i=0;i<n;i++)for(var o=0;o<r;o++){var s=t.getOrdinate(i,o),a=e.getOrdinate(i,o);if(t.getOrdinate(i,o)!==e.getOrdinate(i,o)&&(!mu.isNaN(s)||!mu.isNaN(a)))return!1}return!0},Wc.extend=function(t,e,n){var r=t.create(n,e.getDimension()),i=e.size();if(Wc.copy(e,0,r,0,i),i>0)for(var o=i;o<n;o++)Wc.copy(e,i-1,r,o,1);return r},Wc.reverse=function(t){for(var e=t.size()-1,n=Math.trunc(e/2),r=0;r<=n;r++)Wc.swap(t,r,e-r)},Wc.swap=function(t,e,n){if(e===n)return null;for(var r=0;r<t.getDimension();r++){var i=t.getOrdinate(e,r);t.setOrdinate(e,r,t.getOrdinate(n,r)),t.setOrdinate(n,r,i)}},Wc.copy=function(t,e,n,r,i){for(var o=0;o<i;o++)Wc.copyCoord(t,e+o,n,r+o)},Wc.toString=function(){if(1===arguments.length){var t=arguments[0],e=t.size();if(0===e)return\"()\";var n=t.getDimension(),r=new Ru;r.append(\"(\");for(var i=0;i<e;i++){i>0&&r.append(\" \");for(var o=0;o<n;o++)o>0&&r.append(\",\"),r.append(Vc.toString(t.getOrdinate(i,o)))}return r.append(\")\"),r.toString()}},Wc.ensureValidRing=function(t,e){var n=e.size();if(0===n)return e;if(n<=3)return Wc.createClosedRing(t,e,4);return e.getOrdinate(0,Bu.X)===e.getOrdinate(n-1,Bu.X)&&e.getOrdinate(0,Bu.Y)===e.getOrdinate(n-1,Bu.Y)?e:Wc.createClosedRing(t,e,n+1)},Wc.createClosedRing=function(t,e,n){var r=t.create(n,e.getDimension()),i=e.size();Wc.copy(e,0,r,0,i);for(var o=i;o<n;o++)Wc.copy(e,0,r,o,1);return r};var Jc=function(t){function e(e,n){t.call(this,n),this._points=null,this.init(e)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){return this.isEmpty()?new Yu:this._points.expandEnvelope(new Yu)},e.prototype.isRing=function(){return this.isClosed()&&this.isSimple()},e.prototype.getSortIndex=function(){return t.SORTINDEX_LINESTRING},e.prototype.getCoordinates=function(){return this._points.toCoordinateArray()},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];if(!this.isEquivalentClass(e))return!1;var r=e;if(this._points.size()!==r._points.size())return!1;for(var i=0;i<this._points.size();i++)if(!this.equal(this._points.getCoordinate(i),r._points.getCoordinate(i),n))return!1;return!0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){for(var t=0;t<Math.trunc(this._points.size()/2);t++){var e=this._points.size()-1-t;if(!this._points.getCoordinate(t).equals(this._points.getCoordinate(e)))return this._points.getCoordinate(t).compareTo(this._points.getCoordinate(e))>0&&Wc.reverse(this._points),null}},e.prototype.getCoordinate=function(){return this.isEmpty()?null:this._points.getCoordinate(0)},e.prototype.getBoundaryDimension=function(){return this.isClosed()?Gc.FALSE:0},e.prototype.isClosed=function(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))},e.prototype.getEndPoint=function(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)},e.prototype.getDimension=function(){return 1},e.prototype.getLength=function(){return sc.computeLength(this._points)},e.prototype.getNumPoints=function(){return this._points.size()},e.prototype.reverse=function(){var t=this._points.copy();Wc.reverse(t);return this.getFactory().createLineString(t)},e.prototype.compareToSameClass=function(){if(1===arguments.length){for(var t=arguments[0],e=0,n=0;e<this._points.size()&&n<t._points.size();){var r=this._points.getCoordinate(e).compareTo(t._points.getCoordinate(n));if(0!==r)return r;e++,n++}return e<this._points.size()?1:n<t._points.size()?-1:0}if(2===arguments.length){var i=arguments[0];return arguments[1].compare(this._points,i._points)}},e.prototype.apply=function(){if(Lu(arguments[0],pc))for(var t=arguments[0],e=0;e<this._points.size();e++)t.filter(this._points.getCoordinate(e));else if(Lu(arguments[0],zc)){var n=arguments[0];if(0===this._points.size())return null;for(var r=0;r<this._points.size()&&(n.filter(this._points,r),!n.isDone());r++);n.isGeometryChanged()&&this.geometryChanged()}else if(Lu(arguments[0],kc)){arguments[0].filter(this)}else if(Lu(arguments[0],uc)){arguments[0].filter(this)}},e.prototype.getBoundary=function(){return new Uc(this).getBoundary()},e.prototype.isEquivalentClass=function(t){return t instanceof e},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e._points=this._points.clone(),e},e.prototype.getCoordinateN=function(t){return this._points.getCoordinate(t)},e.prototype.getGeometryType=function(){return\"LineString\"},e.prototype.copy=function(){return new e(this._points.copy(),this._factory)},e.prototype.getCoordinateSequence=function(){return this._points},e.prototype.isEmpty=function(){return 0===this._points.size()},e.prototype.init=function(t){if(null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),1===t.size())throw new _u(\"Invalid number of points in LineString (found \"+t.size()+\" - must be 0 or >= 2)\");this._points=t},e.prototype.isCoordinate=function(t){for(var e=0;e<this._points.size();e++)if(this._points.getCoordinate(e).equals(t))return!0;return!1},e.prototype.getStartPoint=function(){return this.isEmpty()?null:this.getPointN(0)},e.prototype.getPointN=function(t){return this.getFactory().createPoint(this._points.getCoordinate(t))},e.prototype.interfaces_=function(){return[Dc]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x2b2b51ba435c8e00},Object.defineProperties(e,n),e}(cc),Zc=function(){};Zc.prototype.interfaces_=function(){return[]},Zc.prototype.getClass=function(){return Zc};var Kc=function(t){function e(e,n){t.call(this,n),this._coordinates=e||null,this.init(this._coordinates)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){if(this.isEmpty())return new Yu;var t=new Yu;return t.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0)),t},e.prototype.getSortIndex=function(){return t.SORTINDEX_POINT},e.prototype.getCoordinates=function(){return this.isEmpty()?[]:[this.getCoordinate()]},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!this.isEquivalentClass(e)&&(!(!this.isEmpty()||!e.isEmpty())||this.isEmpty()===e.isEmpty()&&this.equal(e.getCoordinate(),this.getCoordinate(),n))}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){},e.prototype.getCoordinate=function(){return 0!==this._coordinates.size()?this._coordinates.getCoordinate(0):null},e.prototype.getBoundaryDimension=function(){return Gc.FALSE},e.prototype.getDimension=function(){return 0},e.prototype.getNumPoints=function(){return this.isEmpty()?0:1},e.prototype.reverse=function(){return this.copy()},e.prototype.getX=function(){if(null===this.getCoordinate())throw new Error(\"getX called on empty Point\");return this.getCoordinate().x},e.prototype.compareToSameClass=function(){if(1===arguments.length){var t=arguments[0];return this.getCoordinate().compareTo(t.getCoordinate())}if(2===arguments.length){var e=arguments[0];return arguments[1].compare(this._coordinates,e._coordinates)}},e.prototype.apply=function(){if(Lu(arguments[0],pc)){var t=arguments[0];if(this.isEmpty())return null;t.filter(this.getCoordinate())}else if(Lu(arguments[0],zc)){var e=arguments[0];if(this.isEmpty())return null;e.filter(this._coordinates,0),e.isGeometryChanged()&&this.geometryChanged()}else if(Lu(arguments[0],kc)){arguments[0].filter(this)}else if(Lu(arguments[0],uc)){arguments[0].filter(this)}},e.prototype.getBoundary=function(){return this.getFactory().createGeometryCollection(null)},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e._coordinates=this._coordinates.clone(),e},e.prototype.getGeometryType=function(){return\"Point\"},e.prototype.copy=function(){return new e(this._coordinates.copy(),this._factory)},e.prototype.getCoordinateSequence=function(){return this._coordinates},e.prototype.getY=function(){if(null===this.getCoordinate())throw new Error(\"getY called on empty Point\");return this.getCoordinate().y},e.prototype.isEmpty=function(){return 0===this._coordinates.size()},e.prototype.init=function(t){null===t&&(t=this.getFactory().getCoordinateSequenceFactory().create([])),tc.isTrue(t.size()<=1),this._coordinates=t},e.prototype.isSimple=function(){return!0},e.prototype.interfaces_=function(){return[Zc]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return 0x44077bad161cbc00},Object.defineProperties(e,n),e}(cc),Qc=function(){};Qc.prototype.interfaces_=function(){return[]},Qc.prototype.getClass=function(){return Qc};var $c=function(t){function e(e,n,r){if(t.call(this,r),this._shell=null,this._holes=null,null===e&&(e=this.getFactory().createLinearRing()),null===n&&(n=[]),t.hasNullElements(n))throw new _u(\"holes must not contain null elements\");if(e.isEmpty()&&t.hasNonEmptyElements(n))throw new _u(\"shell is empty but holes are not\");this._shell=e,this._holes=n}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.computeEnvelopeInternal=function(){return this._shell.getEnvelopeInternal()},e.prototype.getSortIndex=function(){return t.SORTINDEX_POLYGON},e.prototype.getCoordinates=function(){if(this.isEmpty())return[];for(var t=new Array(this.getNumPoints()).fill(null),e=-1,n=this._shell.getCoordinates(),r=0;r<n.length;r++)t[++e]=n[r];for(var i=0;i<this._holes.length;i++)for(var o=this._holes[i].getCoordinates(),s=0;s<o.length;s++)t[++e]=o[s];return t},e.prototype.getArea=function(){var t=0;t+=Math.abs(sc.signedArea(this._shell.getCoordinateSequence()));for(var e=0;e<this._holes.length;e++)t-=Math.abs(sc.signedArea(this._holes[e].getCoordinateSequence()));return t},e.prototype.isRectangle=function(){if(0!==this.getNumInteriorRing())return!1;if(null===this._shell)return!1;if(5!==this._shell.getNumPoints())return!1;for(var t=this._shell.getCoordinateSequence(),e=this.getEnvelopeInternal(),n=0;n<5;n++){var r=t.getX(n);if(r!==e.getMinX()&&r!==e.getMaxX())return!1;var i=t.getY(n);if(i!==e.getMinY()&&i!==e.getMaxY())return!1}for(var o=t.getX(0),s=t.getY(0),a=1;a<=4;a++){var u=t.getX(a),c=t.getY(a);if(u!==o===(c!==s))return!1;o=u,s=c}return!0},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];if(!this.isEquivalentClass(e))return!1;var r=e,i=this._shell,o=r._shell;if(!i.equalsExact(o,n))return!1;if(this._holes.length!==r._holes.length)return!1;for(var s=0;s<this._holes.length;s++)if(!this._holes[s].equalsExact(r._holes[s],n))return!1;return!0}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.normalize=function(){if(0===arguments.length){this.normalize(this._shell,!0);for(var t=0;t<this._holes.length;t++)this.normalize(this._holes[t],!1);qc.sort(this._holes)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(e.isEmpty())return null;var r=new Array(e.getCoordinates().length-1).fill(null);Xu.arraycopy(e.getCoordinates(),0,r,0,r.length);var i=Cc.minCoordinate(e.getCoordinates());Cc.scroll(r,i),Xu.arraycopy(r,0,e.getCoordinates(),0,r.length),e.getCoordinates()[r.length]=r[0],sc.isCCW(e.getCoordinates())===n&&Cc.reverse(e.getCoordinates())}},e.prototype.getCoordinate=function(){return this._shell.getCoordinate()},e.prototype.getNumInteriorRing=function(){return this._holes.length},e.prototype.getBoundaryDimension=function(){return 1},e.prototype.getDimension=function(){return 2},e.prototype.getLength=function(){var t=0;t+=this._shell.getLength();for(var e=0;e<this._holes.length;e++)t+=this._holes[e].getLength();return t},e.prototype.getNumPoints=function(){for(var t=this._shell.getNumPoints(),e=0;e<this._holes.length;e++)t+=this._holes[e].getNumPoints();return t},e.prototype.reverse=function(){var t=this.copy();t._shell=this._shell.copy().reverse(),t._holes=new Array(this._holes.length).fill(null);for(var e=0;e<this._holes.length;e++)t._holes[e]=this._holes[e].copy().reverse();return t},e.prototype.convexHull=function(){return this.getExteriorRing().convexHull()},e.prototype.compareToSameClass=function(){if(1===arguments.length){var t=arguments[0],e=this._shell,n=t._shell;return e.compareToSameClass(n)}if(2===arguments.length){var r=arguments[0],i=arguments[1],o=r,s=this._shell,a=o._shell,u=s.compareToSameClass(a,i);if(0!==u)return u;for(var c=this.getNumInteriorRing(),h=o.getNumInteriorRing(),l=0;l<c&&l<h;){var p=this.getInteriorRingN(l),f=o.getInteriorRingN(l),g=p.compareToSameClass(f,i);if(0!==g)return g;l++}return l<c?1:l<h?-1:0}},e.prototype.apply=function(t){if(Lu(t,pc)){this._shell.apply(t);for(var e=0;e<this._holes.length;e++)this._holes[e].apply(t)}else if(Lu(t,zc)){if(this._shell.apply(t),!t.isDone())for(var n=0;n<this._holes.length&&(this._holes[n].apply(t),!t.isDone());n++);t.isGeometryChanged()&&this.geometryChanged()}else if(Lu(t,kc))t.filter(this);else if(Lu(t,uc)){t.filter(this),this._shell.apply(t);for(var r=0;r<this._holes.length;r++)this._holes[r].apply(t)}},e.prototype.getBoundary=function(){if(this.isEmpty())return this.getFactory().createMultiLineString();var t=new Array(this._holes.length+1).fill(null);t[0]=this._shell;for(var e=0;e<this._holes.length;e++)t[e+1]=this._holes[e];return t.length<=1?this.getFactory().createLinearRing(t[0].getCoordinateSequence()):this.getFactory().createMultiLineString(t)},e.prototype.clone=function(){var e=t.prototype.clone.call(this);e._shell=this._shell.clone(),e._holes=new Array(this._holes.length).fill(null);for(var n=0;n<this._holes.length;n++)e._holes[n]=this._holes[n].clone();return e},e.prototype.getGeometryType=function(){return\"Polygon\"},e.prototype.copy=function(){for(var t=this._shell.copy(),n=new Array(this._holes.length).fill(null),r=0;r<n.length;r++)n[r]=this._holes[r].copy();return new e(t,n,this._factory)},e.prototype.getExteriorRing=function(){return this._shell},e.prototype.isEmpty=function(){return this._shell.isEmpty()},e.prototype.getInteriorRingN=function(t){return this._holes[t]},e.prototype.interfaces_=function(){return[Qc]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return-0x307ffefd8dc97200},Object.defineProperties(e,n),e}(cc),th=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return cc.SORTINDEX_MULTIPOINT},e.prototype.isValid=function(){return!0},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getCoordinate=function(){if(1===arguments.length){var e=arguments[0];return this._geometries[e].getCoordinate()}return t.prototype.getCoordinate.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return Gc.FALSE},e.prototype.getDimension=function(){return 0},e.prototype.getBoundary=function(){return this.getFactory().createGeometryCollection(null)},e.prototype.getGeometryType=function(){return\"MultiPoint\"},e.prototype.copy=function(){for(var t=new Array(this._geometries.length).fill(null),n=0;n<t.length;n++)t[n]=this._geometries[n].copy();return new e(t,this._factory)},e.prototype.interfaces_=function(){return[Zc]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return-0x6fb1ed4162e0fc00},Object.defineProperties(e,n),e}(jc),eh=function(t){function e(e,n){e instanceof bu&&n instanceof _h&&(e=n.getCoordinateSequenceFactory().create(e)),t.call(this,e,n),this.validateConstruction()}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={MINIMUM_VALID_SIZE:{configurable:!0},serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return cc.SORTINDEX_LINEARRING},e.prototype.getBoundaryDimension=function(){return Gc.FALSE},e.prototype.isClosed=function(){return!!this.isEmpty()||t.prototype.isClosed.call(this)},e.prototype.reverse=function(){var t=this._points.copy();Wc.reverse(t);return this.getFactory().createLinearRing(t)},e.prototype.validateConstruction=function(){if(!this.isEmpty()&&!t.prototype.isClosed.call(this))throw new _u(\"Points of LinearRing do not form a closed linestring\");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<e.MINIMUM_VALID_SIZE)throw new _u(\"Invalid number of points in LinearRing (found \"+this.getCoordinateSequence().size()+\" - must be 0 or >= 4)\")},e.prototype.getGeometryType=function(){return\"LinearRing\"},e.prototype.copy=function(){return new e(this._points.copy(),this._factory)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},n.MINIMUM_VALID_SIZE.get=function(){return 4},n.serialVersionUID.get=function(){return-0x3b229e262367a600},Object.defineProperties(e,n),e}(Jc),nh=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={serialVersionUID:{configurable:!0}};return e.prototype.getSortIndex=function(){return cc.SORTINDEX_MULTIPOLYGON},e.prototype.equalsExact=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return!!this.isEquivalentClass(e)&&t.prototype.equalsExact.call(this,e,n)}return t.prototype.equalsExact.apply(this,arguments)},e.prototype.getBoundaryDimension=function(){return 1},e.prototype.getDimension=function(){return 2},e.prototype.reverse=function(){for(var t=this._geometries.length,e=new Array(t).fill(null),n=0;n<this._geometries.length;n++)e[n]=this._geometries[n].reverse();return this.getFactory().createMultiPolygon(e)},e.prototype.getBoundary=function(){if(this.isEmpty())return this.getFactory().createMultiLineString();for(var t=new bc,e=0;e<this._geometries.length;e++)for(var n=this._geometries[e].getBoundary(),r=0;r<n.getNumGeometries();r++)t.add(n.getGeometryN(r));var i=new Array(t.size()).fill(null);return this.getFactory().createMultiLineString(t.toArray(i))},e.prototype.getGeometryType=function(){return\"MultiPolygon\"},e.prototype.copy=function(){for(var t=new Array(this._geometries.length).fill(null),n=0;n<t.length;n++)t[n]=this._geometries[n].copy();return new e(t,this._factory)},e.prototype.interfaces_=function(){return[Qc]},e.prototype.getClass=function(){return e},n.serialVersionUID.get=function(){return-0x7a5aa1369171980},Object.defineProperties(e,n),e}(jc),rh=function(t){this._factory=t||null,this._isUserDataCopied=!1},ih={NoOpGeometryOperation:{configurable:!0},CoordinateOperation:{configurable:!0},CoordinateSequenceOperation:{configurable:!0}};rh.prototype.setCopyUserData=function(t){this._isUserDataCopied=t},rh.prototype.edit=function(t,e){if(null===t)return null;var n=this.editInternal(t,e);return this._isUserDataCopied&&n.setUserData(t.getUserData()),n},rh.prototype.editInternal=function(t,e){return null===this._factory&&(this._factory=t.getFactory()),t instanceof jc?this.editGeometryCollection(t,e):t instanceof $c?this.editPolygon(t,e):t instanceof Kc?e.edit(t,this._factory):t instanceof Jc?e.edit(t,this._factory):(tc.shouldNeverReachHere(\"Unsupported Geometry class: \"+t.getClass().getName()),null)},rh.prototype.editGeometryCollection=function(t,e){for(var n=e.edit(t,this._factory),r=new bc,i=0;i<n.getNumGeometries();i++){var o=this.edit(n.getGeometryN(i),e);null===o||o.isEmpty()||r.add(o)}return n.getClass()===th?this._factory.createMultiPoint(r.toArray([])):n.getClass()===Xc?this._factory.createMultiLineString(r.toArray([])):n.getClass()===nh?this._factory.createMultiPolygon(r.toArray([])):this._factory.createGeometryCollection(r.toArray([]))},rh.prototype.editPolygon=function(t,e){var n=e.edit(t,this._factory);if(null===n&&(n=this._factory.createPolygon(null)),n.isEmpty())return n;var r=this.edit(n.getExteriorRing(),e);if(null===r||r.isEmpty())return this._factory.createPolygon();for(var i=new bc,o=0;o<n.getNumInteriorRing();o++){var s=this.edit(n.getInteriorRingN(o),e);null===s||s.isEmpty()||i.add(s)}return this._factory.createPolygon(r,i.toArray([]))},rh.prototype.interfaces_=function(){return[]},rh.prototype.getClass=function(){return rh},rh.GeometryEditorOperation=function(){},ih.NoOpGeometryOperation.get=function(){return oh},ih.CoordinateOperation.get=function(){return sh},ih.CoordinateSequenceOperation.get=function(){return ah},Object.defineProperties(rh,ih);var oh=function(){};oh.prototype.edit=function(t,e){return t},oh.prototype.interfaces_=function(){return[rh.GeometryEditorOperation]},oh.prototype.getClass=function(){return oh};var sh=function(){};sh.prototype.edit=function(t,e){var n=this.editCoordinates(t.getCoordinates(),t);return null===n?t:t instanceof eh?e.createLinearRing(n):t instanceof Jc?e.createLineString(n):t instanceof Kc?n.length>0?e.createPoint(n[0]):e.createPoint():t},sh.prototype.interfaces_=function(){return[rh.GeometryEditorOperation]},sh.prototype.getClass=function(){return sh};var ah=function(){};ah.prototype.edit=function(t,e){return t instanceof eh?e.createLinearRing(this.edit(t.getCoordinateSequence(),t)):t instanceof Jc?e.createLineString(this.edit(t.getCoordinateSequence(),t)):t instanceof Kc?e.createPoint(this.edit(t.getCoordinateSequence(),t)):t},ah.prototype.interfaces_=function(){return[rh.GeometryEditorOperation]},ah.prototype.getClass=function(){return ah};var uh=function(){if(this._dimension=3,this._coordinates=null,1===arguments.length){if(arguments[0]instanceof Array)this._coordinates=arguments[0],this._dimension=3;else if(Number.isInteger(arguments[0])){var t=arguments[0];this._coordinates=new Array(t).fill(null);for(var e=0;e<t;e++)this._coordinates[e]=new bu}else if(Lu(arguments[0],Bu)){var n=arguments[0];if(null===n)return this._coordinates=new Array(0).fill(null),null;this._dimension=n.getDimension(),this._coordinates=new Array(n.size()).fill(null);for(var r=0;r<this._coordinates.length;r++)this._coordinates[r]=n.getCoordinateCopy(r)}}else if(2===arguments.length)if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var i=arguments[0],o=arguments[1];this._coordinates=i,this._dimension=o,null===i&&(this._coordinates=new Array(0).fill(null))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var s=arguments[0],a=arguments[1];this._coordinates=new Array(s).fill(null),this._dimension=a;for(var u=0;u<s;u++)this._coordinates[u]=new bu}},ch={serialVersionUID:{configurable:!0}};uh.prototype.setOrdinate=function(t,e,n){switch(e){case Bu.X:this._coordinates[t].x=n;break;case Bu.Y:this._coordinates[t].y=n;break;case Bu.Z:this._coordinates[t].z=n;break;default:throw new _u(\"invalid ordinateIndex\")}},uh.prototype.size=function(){return this._coordinates.length},uh.prototype.getOrdinate=function(t,e){switch(e){case Bu.X:return this._coordinates[t].x;case Bu.Y:return this._coordinates[t].y;case Bu.Z:return this._coordinates[t].z}return mu.NaN},uh.prototype.getCoordinate=function(){if(1===arguments.length){var t=arguments[0];return this._coordinates[t]}if(2===arguments.length){var e=arguments[0],n=arguments[1];n.x=this._coordinates[e].x,n.y=this._coordinates[e].y,n.z=this._coordinates[e].z}},uh.prototype.getCoordinateCopy=function(t){return new bu(this._coordinates[t])},uh.prototype.getDimension=function(){return this._dimension},uh.prototype.getX=function(t){return this._coordinates[t].x},uh.prototype.clone=function(){for(var t=new Array(this.size()).fill(null),e=0;e<this._coordinates.length;e++)t[e]=this._coordinates[e].clone();return new uh(t,this._dimension)},uh.prototype.expandEnvelope=function(t){for(var e=0;e<this._coordinates.length;e++)t.expandToInclude(this._coordinates[e]);return t},uh.prototype.copy=function(){for(var t=new Array(this.size()).fill(null),e=0;e<this._coordinates.length;e++)t[e]=this._coordinates[e].copy();return new uh(t,this._dimension)},uh.prototype.toString=function(){if(this._coordinates.length>0){var t=new Ru(17*this._coordinates.length);t.append(\"(\"),t.append(this._coordinates[0]);for(var e=1;e<this._coordinates.length;e++)t.append(\", \"),t.append(this._coordinates[e]);return t.append(\")\"),t.toString()}return\"()\"},uh.prototype.getY=function(t){return this._coordinates[t].y},uh.prototype.toCoordinateArray=function(){return this._coordinates},uh.prototype.interfaces_=function(){return[Bu,Li]},uh.prototype.getClass=function(){return uh},ch.serialVersionUID.get=function(){return-0xcb44a778db18e00},Object.defineProperties(uh,ch);var hh=function(){},lh={serialVersionUID:{configurable:!0},instanceObject:{configurable:!0}};hh.prototype.readResolve=function(){return hh.instance()},hh.prototype.create=function(){if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new uh(t)}if(Lu(arguments[0],Bu)){var e=arguments[0];return new uh(e)}}else if(2===arguments.length){var n=arguments[0],r=arguments[1];return r>3&&(r=3),r<2?new uh(n):new uh(n,r)}},hh.prototype.interfaces_=function(){return[Cu,Li]},hh.prototype.getClass=function(){return hh},hh.instance=function(){return hh.instanceObject},lh.serialVersionUID.get=function(){return-0x38e49fa6cf6f2e00},lh.instanceObject.get=function(){return new hh},Object.defineProperties(hh,lh);var ph=function(t){function e(){t.call(this),this.map_=new Map}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.get=function(t){return this.map_.get(t)||null},e.prototype.put=function(t,e){return this.map_.set(t,e),e},e.prototype.values=function(){for(var t=new bc,e=this.map_.values(),n=e.next();!n.done;)t.add(n.value),n=e.next();return t},e.prototype.entrySet=function(){var t=new Rc;return this.map_.entries().forEach(function(e){return t.add(e)}),t},e.prototype.size=function(){return this.map_.size()},e}(Pc),fh=function t(){if(this._modelType=null,this._scale=null,0===arguments.length)this._modelType=t.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof dh){var e=arguments[0];this._modelType=e,e===t.FIXED&&this.setScale(1)}else if(\"number\"==typeof arguments[0]){var n=arguments[0];this._modelType=t.FIXED,this.setScale(n)}else if(arguments[0]instanceof t){var r=arguments[0];this._modelType=r._modelType,this._scale=r._scale}},gh={serialVersionUID:{configurable:!0},maximumPreciseValue:{configurable:!0}};fh.prototype.equals=function(t){if(!(t instanceof fh))return!1;var e=t;return this._modelType===e._modelType&&this._scale===e._scale},fh.prototype.compareTo=function(t){var e=t,n=this.getMaximumSignificantDigits(),r=e.getMaximumSignificantDigits();return new Tu(n).compareTo(new Tu(r))},fh.prototype.getScale=function(){return this._scale},fh.prototype.isFloating=function(){return this._modelType===fh.FLOATING||this._modelType===fh.FLOATING_SINGLE},fh.prototype.getType=function(){return this._modelType},fh.prototype.toString=function(){var t=\"UNKNOWN\";return this._modelType===fh.FLOATING?t=\"Floating\":this._modelType===fh.FLOATING_SINGLE?t=\"Floating-Single\":this._modelType===fh.FIXED&&(t=\"Fixed (Scale=\"+this.getScale()+\")\"),t},fh.prototype.makePrecise=function(){if(\"number\"==typeof arguments[0]){var t=arguments[0];if(mu.isNaN(t))return t;if(this._modelType===fh.FLOATING_SINGLE){return t}return this._modelType===fh.FIXED?Math.round(t*this._scale)/this._scale:t}if(arguments[0]instanceof bu){var e=arguments[0];if(this._modelType===fh.FLOATING)return null;e.x=this.makePrecise(e.x),e.y=this.makePrecise(e.y)}},fh.prototype.getMaximumSignificantDigits=function(){var t=16;return this._modelType===fh.FLOATING?t=16:this._modelType===fh.FLOATING_SINGLE?t=6:this._modelType===fh.FIXED&&(t=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),t},fh.prototype.setScale=function(t){this._scale=Math.abs(t)},fh.prototype.interfaces_=function(){return[Li,xu]},fh.prototype.getClass=function(){return fh},fh.mostPrecise=function(t,e){return t.compareTo(e)>=0?t:e},gh.serialVersionUID.get=function(){return 0x6bee6404e9a25c00},gh.maximumPreciseValue.get=function(){return 9007199254740992},Object.defineProperties(fh,gh);var dh=function t(e){this._name=e||null,t.nameToTypeMap.put(e,this)},yh={serialVersionUID:{configurable:!0},nameToTypeMap:{configurable:!0}};dh.prototype.readResolve=function(){return dh.nameToTypeMap.get(this._name)},dh.prototype.toString=function(){return this._name},dh.prototype.interfaces_=function(){return[Li]},dh.prototype.getClass=function(){return dh},yh.serialVersionUID.get=function(){return-552860263173159e4},yh.nameToTypeMap.get=function(){return new ph},Object.defineProperties(dh,yh),fh.Type=dh,fh.FIXED=new dh(\"FIXED\"),fh.FLOATING=new dh(\"FLOATING\"),fh.FLOATING_SINGLE=new dh(\"FLOATING SINGLE\");var _h=function t(){this._precisionModel=new fh,this._SRID=0,this._coordinateSequenceFactory=t.getDefaultCoordinateSequenceFactory(),0===arguments.length||(1===arguments.length?Lu(arguments[0],Cu)?this._coordinateSequenceFactory=arguments[0]:arguments[0]instanceof fh&&(this._precisionModel=arguments[0]):2===arguments.length?(this._precisionModel=arguments[0],this._SRID=arguments[1]):3===arguments.length&&(this._precisionModel=arguments[0],this._SRID=arguments[1],this._coordinateSequenceFactory=arguments[2]))},mh={serialVersionUID:{configurable:!0}};_h.prototype.toGeometry=function(t){return t.isNull()?this.createPoint(null):t.getMinX()===t.getMaxX()&&t.getMinY()===t.getMaxY()?this.createPoint(new bu(t.getMinX(),t.getMinY())):t.getMinX()===t.getMaxX()||t.getMinY()===t.getMaxY()?this.createLineString([new bu(t.getMinX(),t.getMinY()),new bu(t.getMaxX(),t.getMaxY())]):this.createPolygon(this.createLinearRing([new bu(t.getMinX(),t.getMinY()),new bu(t.getMinX(),t.getMaxY()),new bu(t.getMaxX(),t.getMaxY()),new bu(t.getMaxX(),t.getMinY()),new bu(t.getMinX(),t.getMinY())]),null)},_h.prototype.createLineString=function(t){return t?t instanceof Array?new Jc(this.getCoordinateSequenceFactory().create(t),this):Lu(t,Bu)?new Jc(t,this):void 0:new Jc(this.getCoordinateSequenceFactory().create([]),this)},_h.prototype.createMultiLineString=function(){if(0===arguments.length)return new Xc(null,this);if(1===arguments.length){var t=arguments[0];return new Xc(t,this)}},_h.prototype.buildGeometry=function(t){for(var e=null,n=!1,r=!1,i=t.iterator();i.hasNext();){var o=i.next(),s=o.getClass();null===e&&(e=s),s!==e&&(n=!0),o.isGeometryCollectionOrDerived()&&(r=!0)}if(null===e)return this.createGeometryCollection();if(n||r)return this.createGeometryCollection(_h.toGeometryArray(t));var a=t.iterator().next();if(t.size()>1){if(a instanceof $c)return this.createMultiPolygon(_h.toPolygonArray(t));if(a instanceof Jc)return this.createMultiLineString(_h.toLineStringArray(t));if(a instanceof Kc)return this.createMultiPoint(_h.toPointArray(t));tc.shouldNeverReachHere(\"Unhandled class: \"+a.getClass().getName())}return a},_h.prototype.createMultiPointFromCoords=function(t){return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)},_h.prototype.createPoint=function(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof bu){var t=arguments[0];return this.createPoint(null!==t?this.getCoordinateSequenceFactory().create([t]):null)}if(Lu(arguments[0],Bu)){var e=arguments[0];return new Kc(e,this)}}},_h.prototype.getCoordinateSequenceFactory=function(){return this._coordinateSequenceFactory},_h.prototype.createPolygon=function(){if(0===arguments.length)return new $c(null,null,this);if(1===arguments.length){if(Lu(arguments[0],Bu)){var t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Array){var e=arguments[0];return this.createPolygon(this.createLinearRing(e))}if(arguments[0]instanceof eh){var n=arguments[0];return this.createPolygon(n,null)}}else if(2===arguments.length){var r=arguments[0],i=arguments[1];return new $c(r,i,this)}},_h.prototype.getSRID=function(){return this._SRID},_h.prototype.createGeometryCollection=function(){if(0===arguments.length)return new jc(null,this);if(1===arguments.length){var t=arguments[0];return new jc(t,this)}},_h.prototype.createGeometry=function(t){return new rh(this).edit(t,{edit:function(){if(2===arguments.length){var t=arguments[0];return this._coordinateSequenceFactory.create(t)}}})},_h.prototype.getPrecisionModel=function(){return this._precisionModel},_h.prototype.createLinearRing=function(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return this.createLinearRing(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(Lu(arguments[0],Bu)){var e=arguments[0];return new eh(e,this)}}},_h.prototype.createMultiPolygon=function(){if(0===arguments.length)return new nh(null,this);if(1===arguments.length){var t=arguments[0];return new nh(t,this)}},_h.prototype.createMultiPoint=function(){if(0===arguments.length)return new th(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){var t=arguments[0];return new th(t,this)}if(arguments[0]instanceof Array){var e=arguments[0];return this.createMultiPoint(null!==e?this.getCoordinateSequenceFactory().create(e):null)}if(Lu(arguments[0],Bu)){var n=arguments[0];if(null===n)return this.createMultiPoint(new Array(0).fill(null));for(var r=new Array(n.size()).fill(null),i=0;i<n.size();i++){var o=this.getCoordinateSequenceFactory().create(1,n.getDimension());Wc.copy(n,i,o,0,1),r[i]=this.createPoint(o)}return this.createMultiPoint(r)}}},_h.prototype.interfaces_=function(){return[Li]},_h.prototype.getClass=function(){return _h},_h.toMultiPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_h.toGeometryArray=function(t){if(null===t)return null;var e=new Array(t.size()).fill(null);return t.toArray(e)},_h.getDefaultCoordinateSequenceFactory=function(){return hh.instance()},_h.toMultiLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_h.toLineStringArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_h.toMultiPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_h.toLinearRingArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_h.toPointArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_h.toPolygonArray=function(t){var e=new Array(t.size()).fill(null);return t.toArray(e)},_h.createPointFromInternalCoord=function(t,e){return e.getPrecisionModel().makePrecise(t),e.getFactory().createPoint(t)},mh.serialVersionUID.get=function(){return-0x5ea75f2051eeb400},Object.defineProperties(_h,mh);var vh=[\"Point\",\"MultiPoint\",\"LineString\",\"MultiLineString\",\"Polygon\",\"MultiPolygon\"],xh=function(t){this.geometryFactory=t||new _h};xh.prototype.read=function(t){var e,n=(e=\"string\"==typeof t?JSON.parse(t):t).type;if(!Eh[n])throw new Error(\"Unknown GeoJSON type: \"+e.type);return-1!==vh.indexOf(n)?Eh[n].apply(this,[e.coordinates]):\"GeometryCollection\"===n?Eh[n].apply(this,[e.geometries]):Eh[n].apply(this,[e])},xh.prototype.write=function(t){var e=t.getGeometryType();if(!wh[e])throw new Error(\"Geometry is not supported\");return wh[e].apply(this,[t])};var Eh={Feature:function(t){var e={};for(var n in t)e[n]=t[n];if(t.geometry){var r=t.geometry.type;if(!Eh[r])throw new Error(\"Unknown GeoJSON type: \"+t.type);e.geometry=this.read(t.geometry)}return t.bbox&&(e.bbox=Eh.bbox.apply(this,[t.bbox])),e},FeatureCollection:function(t){var e={};if(t.features){e.features=[];for(var n=0;n<t.features.length;++n)e.features.push(this.read(t.features[n]))}return t.bbox&&(e.bbox=this.parse.bbox.apply(this,[t.bbox])),e},coordinates:function(t){for(var e=[],n=0;n<t.length;++n){var r=t[n];e.push(new bu(r[0],r[1]))}return e},bbox:function(t){return this.geometryFactory.createLinearRing([new bu(t[0],t[1]),new bu(t[2],t[1]),new bu(t[2],t[3]),new bu(t[0],t[3]),new bu(t[0],t[1])])},Point:function(t){var e=new bu(t[0],t[1]);return this.geometryFactory.createPoint(e)},MultiPoint:function(t){for(var e=[],n=0;n<t.length;++n)e.push(Eh.Point.apply(this,[t[n]]));return this.geometryFactory.createMultiPoint(e)},LineString:function(t){var e=Eh.coordinates.apply(this,[t]);return this.geometryFactory.createLineString(e)},MultiLineString:function(t){for(var e=[],n=0;n<t.length;++n)e.push(Eh.LineString.apply(this,[t[n]]));return this.geometryFactory.createMultiLineString(e)},Polygon:function(t){for(var e=Eh.coordinates.apply(this,[t[0]]),n=this.geometryFactory.createLinearRing(e),r=[],i=1;i<t.length;++i){var o=t[i],s=Eh.coordinates.apply(this,[o]),a=this.geometryFactory.createLinearRing(s);r.push(a)}return this.geometryFactory.createPolygon(n,r)},MultiPolygon:function(t){for(var e=[],n=0;n<t.length;++n){var r=t[n];e.push(Eh.Polygon.apply(this,[r]))}return this.geometryFactory.createMultiPolygon(e)},GeometryCollection:function(t){for(var e=[],n=0;n<t.length;++n){var r=t[n];e.push(this.read(r))}return this.geometryFactory.createGeometryCollection(e)}},wh={coordinate:function(t){return[t.x,t.y]},Point:function(t){return{type:\"Point\",coordinates:wh.coordinate.apply(this,[t.getCoordinate()])}},MultiPoint:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var r=t._geometries[n],i=wh.Point.apply(this,[r]);e.push(i.coordinates)}return{type:\"MultiPoint\",coordinates:e}},LineString:function(t){for(var e=[],n=t.getCoordinates(),r=0;r<n.length;++r){var i=n[r];e.push(wh.coordinate.apply(this,[i]))}return{type:\"LineString\",coordinates:e}},MultiLineString:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var r=t._geometries[n],i=wh.LineString.apply(this,[r]);e.push(i.coordinates)}return{type:\"MultiLineString\",coordinates:e}},Polygon:function(t){var e=[],n=wh.LineString.apply(this,[t._shell]);e.push(n.coordinates);for(var r=0;r<t._holes.length;++r){var i=t._holes[r],o=wh.LineString.apply(this,[i]);e.push(o.coordinates)}return{type:\"Polygon\",coordinates:e}},MultiPolygon:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var r=t._geometries[n],i=wh.Polygon.apply(this,[r]);e.push(i.coordinates)}return{type:\"MultiPolygon\",coordinates:e}},GeometryCollection:function(t){for(var e=[],n=0;n<t._geometries.length;++n){var r=t._geometries[n],i=r.getGeometryType();e.push(wh[i].apply(this,[r]))}return{type:\"GeometryCollection\",geometries:e}}},bh=function(t){this.geometryFactory=t||new _h,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new xh(this.geometryFactory)};bh.prototype.read=function(t){var e=this.parser.read(t);return this.precisionModel.getType()===fh.FIXED&&this.reducePrecision(e),e},bh.prototype.reducePrecision=function(t){var e,n;if(t.coordinate)this.precisionModel.makePrecise(t.coordinate);else if(t.points)for(e=0,n=t.points.length;e<n;e++)this.precisionModel.makePrecise(t.points[e]);else if(t.geometries)for(e=0,n=t.geometries.length;e<n;e++)this.reducePrecision(t.geometries[e])};var Ih=function(){this.parser=new xh(this.geometryFactory)};Ih.prototype.write=function(t){return this.parser.write(t)};var Nh=function(){},Ch={ON:{configurable:!0},LEFT:{configurable:!0},RIGHT:{configurable:!0}};Nh.prototype.interfaces_=function(){return[]},Nh.prototype.getClass=function(){return Nh},Nh.opposite=function(t){return t===Nh.LEFT?Nh.RIGHT:t===Nh.RIGHT?Nh.LEFT:t},Ch.ON.get=function(){return 0},Ch.LEFT.get=function(){return 1},Ch.RIGHT.get=function(){return 2},Object.defineProperties(Nh,Ch),(ji.prototype=new Error).name=\"EmptyStackException\",(Xi.prototype=new wc).add=function(t){return this.array_.push(t),!0},Xi.prototype.get=function(t){if(t<0||t>=this.size())throw new Error;return this.array_[t]},Xi.prototype.push=function(t){return this.array_.push(t),t},Xi.prototype.pop=function(t){if(0===this.array_.length)throw new ji;return this.array_.pop()},Xi.prototype.peek=function(){if(0===this.array_.length)throw new ji;return this.array_[this.array_.length-1]},Xi.prototype.empty=function(){return 0===this.array_.length},Xi.prototype.isEmpty=function(){return this.empty()},Xi.prototype.search=function(t){return this.array_.indexOf(t)},Xi.prototype.size=function(){return this.array_.length},Xi.prototype.toArray=function(){for(var t=[],e=0,n=this.array_.length;e<n;e++)t.push(this.array_[e]);return t};var Sh=function(){this._minIndex=-1,this._minCoord=null,this._minDe=null,this._orientedDe=null};Sh.prototype.getCoordinate=function(){return this._minCoord},Sh.prototype.getRightmostSide=function(t,e){var n=this.getRightmostSideOfSegment(t,e);return n<0&&(n=this.getRightmostSideOfSegment(t,e-1)),n<0&&(this._minCoord=null,this.checkForRightmostCoordinate(t)),n},Sh.prototype.findRightmostEdgeAtVertex=function(){var t=this._minDe.getEdge().getCoordinates();tc.isTrue(this._minIndex>0&&this._minIndex<t.length,\"rightmost point expected to be interior vertex of edge\");var e=t[this._minIndex-1],n=t[this._minIndex+1],r=sc.computeOrientation(this._minCoord,n,e),i=!1;e.y<this._minCoord.y&&n.y<this._minCoord.y&&r===sc.COUNTERCLOCKWISE?i=!0:e.y>this._minCoord.y&&n.y>this._minCoord.y&&r===sc.CLOCKWISE&&(i=!0),i&&(this._minIndex=this._minIndex-1)},Sh.prototype.getRightmostSideOfSegment=function(t,e){var n=t.getEdge().getCoordinates();if(e<0||e+1>=n.length)return-1;if(n[e].y===n[e+1].y)return-1;var r=Nh.LEFT;return n[e].y<n[e+1].y&&(r=Nh.RIGHT),r},Sh.prototype.getEdge=function(){return this._orientedDe},Sh.prototype.checkForRightmostCoordinate=function(t){for(var e=t.getEdge().getCoordinates(),n=0;n<e.length-1;n++)(null===this._minCoord||e[n].x>this._minCoord.x)&&(this._minDe=t,this._minIndex=n,this._minCoord=e[n])},Sh.prototype.findRightmostEdgeAtNode=function(){var t=this._minDe.getNode().getEdges();this._minDe=t.getRightmostEdge(),this._minDe.isForward()||(this._minDe=this._minDe.getSym(),this._minIndex=this._minDe.getEdge().getCoordinates().length-1)},Sh.prototype.findEdge=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();n.isForward()&&this.checkForRightmostCoordinate(n)}tc.isTrue(0!==this._minIndex||this._minCoord.equals(this._minDe.getCoordinate()),\"inconsistency in rightmost processing\"),0===this._minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this._orientedDe=this._minDe;this.getRightmostSide(this._minDe,this._minIndex)===Nh.LEFT&&(this._orientedDe=this._minDe.getSym())},Sh.prototype.interfaces_=function(){return[]},Sh.prototype.getClass=function(){return Sh};var Mh=function(t){function e(n,r){t.call(this,e.msgWithCoord(n,r)),this.pt=r?new bu(r):null,this.name=\"TopologyException\"}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getCoordinate=function(){return this.pt},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.msgWithCoord=function(t,e){return e?t:t+\" [ \"+e+\" ]\"},e}(Qu),Lh=function(){this.array_=[]};Lh.prototype.addLast=function(t){this.array_.push(t)},Lh.prototype.removeFirst=function(){return this.array_.shift()},Lh.prototype.isEmpty=function(){return 0===this.array_.length};var Ph=function(){this._finder=null,this._dirEdgeList=new bc,this._nodes=new bc,this._rightMostCoord=null,this._env=null,this._finder=new Sh};Ph.prototype.clearVisitedEdges=function(){for(var t=this._dirEdgeList.iterator();t.hasNext();){t.next().setVisited(!1)}},Ph.prototype.getRightmostCoordinate=function(){return this._rightMostCoord},Ph.prototype.computeNodeDepth=function(t){for(var e=null,n=t.getEdges().iterator();n.hasNext();){var r=n.next();if(r.isVisited()||r.getSym().isVisited()){e=r;break}}if(null===e)throw new Mh(\"unable to find edge to compute depths at \"+t.getCoordinate());t.getEdges().computeDepths(e);for(var i=t.getEdges().iterator();i.hasNext();){var o=i.next();o.setVisited(!0),this.copySymDepths(o)}},Ph.prototype.computeDepth=function(t){this.clearVisitedEdges();var e=this._finder.getEdge();e.setEdgeDepths(Nh.RIGHT,t),this.copySymDepths(e),this.computeDepths(e)},Ph.prototype.create=function(t){this.addReachable(t),this._finder.findEdge(this._dirEdgeList),this._rightMostCoord=this._finder.getCoordinate()},Ph.prototype.findResultEdges=function(){for(var t=this._dirEdgeList.iterator();t.hasNext();){var e=t.next();e.getDepth(Nh.RIGHT)>=1&&e.getDepth(Nh.LEFT)<=0&&!e.isInteriorAreaEdge()&&e.setInResult(!0)}},Ph.prototype.computeDepths=function(t){var e=new Rc,n=new Lh,r=t.getNode();for(n.addLast(r),e.add(r),t.setVisited(!0);!n.isEmpty();){var i=n.removeFirst();e.add(i),this.computeNodeDepth(i);for(var o=i.getEdges().iterator();o.hasNext();){var s=o.next().getSym();if(!s.isVisited()){var a=s.getNode();e.contains(a)||(n.addLast(a),e.add(a))}}}},Ph.prototype.compareTo=function(t){var e=t;return this._rightMostCoord.x<e._rightMostCoord.x?-1:this._rightMostCoord.x>e._rightMostCoord.x?1:0},Ph.prototype.getEnvelope=function(){if(null===this._env){for(var t=new Yu,e=this._dirEdgeList.iterator();e.hasNext();)for(var n=e.next().getEdge().getCoordinates(),r=0;r<n.length-1;r++)t.expandToInclude(n[r]);this._env=t}return this._env},Ph.prototype.addReachable=function(t){var e=new Xi;for(e.add(t);!e.empty();){var n=e.pop();this.add(n,e)}},Ph.prototype.copySymDepths=function(t){var e=t.getSym();e.setDepth(Nh.LEFT,t.getDepth(Nh.RIGHT)),e.setDepth(Nh.RIGHT,t.getDepth(Nh.LEFT))},Ph.prototype.add=function(t,e){t.setVisited(!0),this._nodes.add(t);for(var n=t.getEdges().iterator();n.hasNext();){var r=n.next();this._dirEdgeList.add(r);var i=r.getSym().getNode();i.isVisited()||e.push(i)}},Ph.prototype.getNodes=function(){return this._nodes},Ph.prototype.getDirectedEdges=function(){return this._dirEdgeList},Ph.prototype.interfaces_=function(){return[xu]},Ph.prototype.getClass=function(){return Ph};var Oh=function t(){if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){var e=arguments[0];this.init(e.length)}else if(Number.isInteger(arguments[0])){var n=arguments[0];this.init(1),this.location[Nh.ON]=n}else if(arguments[0]instanceof t){var r=arguments[0];if(this.init(r.location.length),null!==r)for(var i=0;i<this.location.length;i++)this.location[i]=r.location[i]}}else if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];this.init(3),this.location[Nh.ON]=o,this.location[Nh.LEFT]=s,this.location[Nh.RIGHT]=a}};Oh.prototype.setAllLocations=function(t){for(var e=0;e<this.location.length;e++)this.location[e]=t},Oh.prototype.isNull=function(){for(var t=0;t<this.location.length;t++)if(this.location[t]!==Su.NONE)return!1;return!0},Oh.prototype.setAllLocationsIfNull=function(t){for(var e=0;e<this.location.length;e++)this.location[e]===Su.NONE&&(this.location[e]=t)},Oh.prototype.isLine=function(){return 1===this.location.length},Oh.prototype.merge=function(t){if(t.location.length>this.location.length){var e=new Array(3).fill(null);e[Nh.ON]=this.location[Nh.ON],e[Nh.LEFT]=Su.NONE,e[Nh.RIGHT]=Su.NONE,this.location=e}for(var n=0;n<this.location.length;n++)this.location[n]===Su.NONE&&n<t.location.length&&(this.location[n]=t.location[n])},Oh.prototype.getLocations=function(){return this.location},Oh.prototype.flip=function(){if(this.location.length<=1)return null;var t=this.location[Nh.LEFT];this.location[Nh.LEFT]=this.location[Nh.RIGHT],this.location[Nh.RIGHT]=t},Oh.prototype.toString=function(){var t=new Ru;return this.location.length>1&&t.append(Su.toLocationSymbol(this.location[Nh.LEFT])),t.append(Su.toLocationSymbol(this.location[Nh.ON])),this.location.length>1&&t.append(Su.toLocationSymbol(this.location[Nh.RIGHT])),t.toString()},Oh.prototype.setLocations=function(t,e,n){this.location[Nh.ON]=t,this.location[Nh.LEFT]=e,this.location[Nh.RIGHT]=n},Oh.prototype.get=function(t){return t<this.location.length?this.location[t]:Su.NONE},Oh.prototype.isArea=function(){return this.location.length>1},Oh.prototype.isAnyNull=function(){for(var t=0;t<this.location.length;t++)if(this.location[t]===Su.NONE)return!0;return!1},Oh.prototype.setLocation=function(){if(1===arguments.length){var t=arguments[0];this.setLocation(Nh.ON,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.location[e]=n}},Oh.prototype.init=function(t){this.location=new Array(t).fill(null),this.setAllLocations(Su.NONE)},Oh.prototype.isEqualOnSide=function(t,e){return this.location[e]===t.location[e]},Oh.prototype.allPositionsEqual=function(t){for(var e=0;e<this.location.length;e++)if(this.location[e]!==t)return!1;return!0},Oh.prototype.interfaces_=function(){return[]},Oh.prototype.getClass=function(){return Oh};var Rh=function t(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){var e=arguments[0];this.elt[0]=new Oh(e),this.elt[1]=new Oh(e)}else if(arguments[0]instanceof t){var n=arguments[0];this.elt[0]=new Oh(n.elt[0]),this.elt[1]=new Oh(n.elt[1])}}else if(2===arguments.length){var r=arguments[0],i=arguments[1];this.elt[0]=new Oh(Su.NONE),this.elt[1]=new Oh(Su.NONE),this.elt[r].setLocation(i)}else if(3===arguments.length){var o=arguments[0],s=arguments[1],a=arguments[2];this.elt[0]=new Oh(o,s,a),this.elt[1]=new Oh(o,s,a)}else if(4===arguments.length){var u=arguments[0],c=arguments[1],h=arguments[2],l=arguments[3];this.elt[0]=new Oh(Su.NONE,Su.NONE,Su.NONE),this.elt[1]=new Oh(Su.NONE,Su.NONE,Su.NONE),this.elt[u].setLocations(c,h,l)}};Rh.prototype.getGeometryCount=function(){var t=0;return this.elt[0].isNull()||t++,this.elt[1].isNull()||t++,t},Rh.prototype.setAllLocations=function(t,e){this.elt[t].setAllLocations(e)},Rh.prototype.isNull=function(t){return this.elt[t].isNull()},Rh.prototype.setAllLocationsIfNull=function(){if(1===arguments.length){var t=arguments[0];this.setAllLocationsIfNull(0,t),this.setAllLocationsIfNull(1,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.elt[e].setAllLocationsIfNull(n)}},Rh.prototype.isLine=function(t){return this.elt[t].isLine()},Rh.prototype.merge=function(t){for(var e=0;e<2;e++)null===this.elt[e]&&null!==t.elt[e]?this.elt[e]=new Oh(t.elt[e]):this.elt[e].merge(t.elt[e])},Rh.prototype.flip=function(){this.elt[0].flip(),this.elt[1].flip()},Rh.prototype.getLocation=function(){if(1===arguments.length){var t=arguments[0];return this.elt[t].get(Nh.ON)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return this.elt[e].get(n)}},Rh.prototype.toString=function(){var t=new Ru;return null!==this.elt[0]&&(t.append(\"A:\"),t.append(this.elt[0].toString())),null!==this.elt[1]&&(t.append(\" B:\"),t.append(this.elt[1].toString())),t.toString()},Rh.prototype.isArea=function(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){var t=arguments[0];return this.elt[t].isArea()}},Rh.prototype.isAnyNull=function(t){return this.elt[t].isAnyNull()},Rh.prototype.setLocation=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.elt[t].setLocation(Nh.ON,e)}else if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];this.elt[n].setLocation(r,i)}},Rh.prototype.isEqualOnSide=function(t,e){return this.elt[0].isEqualOnSide(t.elt[0],e)&&this.elt[1].isEqualOnSide(t.elt[1],e)},Rh.prototype.allPositionsEqual=function(t,e){return this.elt[t].allPositionsEqual(e)},Rh.prototype.toLine=function(t){this.elt[t].isArea()&&(this.elt[t]=new Oh(this.elt[t].location[0]))},Rh.prototype.interfaces_=function(){return[]},Rh.prototype.getClass=function(){return Rh},Rh.toLineLabel=function(t){for(var e=new Rh(Su.NONE),n=0;n<2;n++)e.setLocation(n,t.getLocation(n));return e};var Th=function(){this._startDe=null,this._maxNodeDegree=-1,this._edges=new bc,this._pts=new bc,this._label=new Rh(Su.NONE),this._ring=null,this._isHole=null,this._shell=null,this._holes=new bc,this._geometryFactory=null;var t=arguments[0],e=arguments[1];this._geometryFactory=e,this.computePoints(t),this.computeRing()};Th.prototype.computeRing=function(){if(null!==this._ring)return null;for(var t=new Array(this._pts.size()).fill(null),e=0;e<this._pts.size();e++)t[e]=this._pts.get(e);this._ring=this._geometryFactory.createLinearRing(t),this._isHole=sc.isCCW(this._ring.getCoordinates())},Th.prototype.isIsolated=function(){return 1===this._label.getGeometryCount()},Th.prototype.computePoints=function(t){this._startDe=t;var e=t,n=!0;do{if(null===e)throw new Mh(\"Found null DirectedEdge\");if(e.getEdgeRing()===this)throw new Mh(\"Directed Edge visited twice during ring-building at \"+e.getCoordinate());this._edges.add(e);var r=e.getLabel();tc.isTrue(r.isArea()),this.mergeLabel(r),this.addPoints(e.getEdge(),e.isForward(),n),n=!1,this.setEdgeRing(e,this),e=this.getNext(e)}while(e!==this._startDe)},Th.prototype.getLinearRing=function(){return this._ring},Th.prototype.getCoordinate=function(t){return this._pts.get(t)},Th.prototype.computeMaxNodeDegree=function(){this._maxNodeDegree=0;var t=this._startDe;do{var e=t.getNode().getEdges().getOutgoingDegree(this);e>this._maxNodeDegree&&(this._maxNodeDegree=e),t=this.getNext(t)}while(t!==this._startDe);this._maxNodeDegree*=2},Th.prototype.addPoints=function(t,e,n){var r=t.getCoordinates();if(e){var i=1;n&&(i=0);for(var o=i;o<r.length;o++)this._pts.add(r[o])}else{var s=r.length-2;n&&(s=r.length-1);for(var a=s;a>=0;a--)this._pts.add(r[a])}},Th.prototype.isHole=function(){return this._isHole},Th.prototype.setInResult=function(){var t=this._startDe;do{t.getEdge().setInResult(!0),t=t.getNext()}while(t!==this._startDe)},Th.prototype.containsPoint=function(t){var e=this.getLinearRing();if(!e.getEnvelopeInternal().contains(t))return!1;if(!sc.isPointInRing(t,e.getCoordinates()))return!1;for(var n=this._holes.iterator();n.hasNext();){if(n.next().containsPoint(t))return!1}return!0},Th.prototype.addHole=function(t){this._holes.add(t)},Th.prototype.isShell=function(){return null===this._shell},Th.prototype.getLabel=function(){return this._label},Th.prototype.getEdges=function(){return this._edges},Th.prototype.getMaxNodeDegree=function(){return this._maxNodeDegree<0&&this.computeMaxNodeDegree(),this._maxNodeDegree},Th.prototype.getShell=function(){return this._shell},Th.prototype.mergeLabel=function(){if(1===arguments.length){var t=arguments[0];this.mergeLabel(t,0),this.mergeLabel(t,1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],r=e.getLocation(n,Nh.RIGHT);if(r===Su.NONE)return null;if(this._label.getLocation(n)===Su.NONE)return this._label.setLocation(n,r),null}},Th.prototype.setShell=function(t){this._shell=t,null!==t&&t.addHole(this)},Th.prototype.toPolygon=function(t){for(var e=new Array(this._holes.size()).fill(null),n=0;n<this._holes.size();n++)e[n]=this._holes.get(n).getLinearRing();return t.createPolygon(this.getLinearRing(),e)},Th.prototype.interfaces_=function(){return[]},Th.prototype.getClass=function(){return Th};var Ah=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setEdgeRing=function(t,e){t.setMinEdgeRing(e)},e.prototype.getNext=function(t){return t.getNextMin()},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Th),Dh=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.buildMinimalRings=function(){var t=new bc,e=this._startDe;do{if(null===e.getMinEdgeRing()){var n=new Ah(e,this._geometryFactory);t.add(n)}e=e.getNext()}while(e!==this._startDe);return t},e.prototype.setEdgeRing=function(t,e){t.setEdgeRing(e)},e.prototype.linkDirectedEdgesForMinimalEdgeRings=function(){var t=this._startDe;do{t.getNode().getEdges().linkMinimalDirectedEdges(this),t=t.getNext()}while(t!==this._startDe)},e.prototype.getNext=function(t){return t.getNext()},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Th),Fh=function(){if(this._label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this._label=t}};Fh.prototype.setVisited=function(t){this._isVisited=t},Fh.prototype.setInResult=function(t){this._isInResult=t},Fh.prototype.isCovered=function(){return this._isCovered},Fh.prototype.isCoveredSet=function(){return this._isCoveredSet},Fh.prototype.setLabel=function(t){this._label=t},Fh.prototype.getLabel=function(){return this._label},Fh.prototype.setCovered=function(t){this._isCovered=t,this._isCoveredSet=!0},Fh.prototype.updateIM=function(t){tc.isTrue(this._label.getGeometryCount()>=2,\"found partial label\"),this.computeIM(t)},Fh.prototype.isInResult=function(){return this._isInResult},Fh.prototype.isVisited=function(){return this._isVisited},Fh.prototype.interfaces_=function(){return[]},Fh.prototype.getClass=function(){return Fh};var qh=function(t){function e(){t.call(this),this._coord=null,this._edges=null;var e=arguments[0],n=arguments[1];this._coord=e,this._edges=n,this._label=new Rh(0,Su.NONE)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isIncidentEdgeInResult=function(){for(var t=this.getEdges().getEdges().iterator();t.hasNext();){if(t.next().getEdge().isInResult())return!0}return!1},e.prototype.isIsolated=function(){return 1===this._label.getGeometryCount()},e.prototype.getCoordinate=function(){return this._coord},e.prototype.print=function(t){t.println(\"node \"+this._coord+\" lbl: \"+this._label)},e.prototype.computeIM=function(t){},e.prototype.computeMergedLocation=function(t,e){var n=Su.NONE;if(n=this._label.getLocation(e),!t.isNull(e)){var r=t.getLocation(e);n!==Su.BOUNDARY&&(n=r)}return n},e.prototype.setLabel=function(){if(2!==arguments.length)return t.prototype.setLabel.apply(this,arguments);var e=arguments[0],n=arguments[1];null===this._label?this._label=new Rh(e,n):this._label.setLocation(e,n)},e.prototype.getEdges=function(){return this._edges},e.prototype.mergeLabel=function(){if(arguments[0]instanceof e){var t=arguments[0];this.mergeLabel(t._label)}else if(arguments[0]instanceof Rh)for(var n=arguments[0],r=0;r<2;r++){var i=this.computeMergedLocation(n,r);this._label.getLocation(r)===Su.NONE&&this._label.setLocation(r,i)}},e.prototype.add=function(t){this._edges.insert(t),t.setNode(this)},e.prototype.setLabelBoundary=function(t){if(null===this._label)return null;var e=Su.NONE;null!==this._label&&(e=this._label.getLocation(t));var n=null;switch(e){case Su.BOUNDARY:n=Su.INTERIOR;break;case Su.INTERIOR:default:n=Su.BOUNDARY}this._label.setLocation(t,n)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Fh),Gh=function(){this.nodeMap=new Gi,this.nodeFact=null;var t=arguments[0];this.nodeFact=t};Gh.prototype.find=function(t){return this.nodeMap.get(t)},Gh.prototype.addNode=function(){if(arguments[0]instanceof bu){var t=arguments[0],e=this.nodeMap.get(t);return null===e&&(e=this.nodeFact.createNode(t),this.nodeMap.put(t,e)),e}if(arguments[0]instanceof qh){var n=arguments[0],r=this.nodeMap.get(n.getCoordinate());return null===r?(this.nodeMap.put(n.getCoordinate(),n),n):(r.mergeLabel(n),r)}},Gh.prototype.print=function(t){for(var e=this.iterator();e.hasNext();){e.next().print(t)}},Gh.prototype.iterator=function(){return this.nodeMap.values().iterator()},Gh.prototype.values=function(){return this.nodeMap.values()},Gh.prototype.getBoundaryNodes=function(t){for(var e=new bc,n=this.iterator();n.hasNext();){var r=n.next();r.getLabel().getLocation(t)===Su.BOUNDARY&&e.add(r)}return e},Gh.prototype.add=function(t){var e=t.getCoordinate();this.addNode(e).add(t)},Gh.prototype.interfaces_=function(){return[]},Gh.prototype.getClass=function(){return Gh};var Bh=function(){},kh={NE:{configurable:!0},NW:{configurable:!0},SW:{configurable:!0},SE:{configurable:!0}};Bh.prototype.interfaces_=function(){return[]},Bh.prototype.getClass=function(){return Bh},Bh.isNorthern=function(t){return t===Bh.NE||t===Bh.NW},Bh.isOpposite=function(t,e){if(t===e)return!1;return 2===(t-e+4)%4},Bh.commonHalfPlane=function(t,e){if(t===e)return t;if(2===(t-e+4)%4)return-1;var n=t<e?t:e;return 0===n&&3===(t>e?t:e)?3:n},Bh.isInHalfPlane=function(t,e){return e===Bh.SE?t===Bh.SE||t===Bh.SW:t===e||t===e+1},Bh.quadrant=function(){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new _u(\"Cannot compute the quadrant for point ( \"+t+\", \"+e+\" )\");return t>=0?e>=0?Bh.NE:Bh.SE:e>=0?Bh.NW:Bh.SW}if(arguments[0]instanceof bu&&arguments[1]instanceof bu){var n=arguments[0],r=arguments[1];if(r.x===n.x&&r.y===n.y)throw new _u(\"Cannot compute the quadrant for two identical points \"+n);return r.x>=n.x?r.y>=n.y?Bh.NE:Bh.SE:r.y>=n.y?Bh.NW:Bh.SW}},kh.NE.get=function(){return 0},kh.NW.get=function(){return 1},kh.SW.get=function(){return 2},kh.SE.get=function(){return 3},Object.defineProperties(Bh,kh);var zh=function(){if(this._edge=null,this._label=null,this._node=null,this._p0=null,this._p1=null,this._dx=null,this._dy=null,this._quadrant=null,1===arguments.length){var t=arguments[0];this._edge=t}else if(3===arguments.length){var e=arguments[0],n=arguments[1],r=arguments[2];this._edge=e,this.init(n,r),this._label=null}else if(4===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3];this._edge=i,this.init(o,s),this._label=a}};zh.prototype.compareDirection=function(t){return this._dx===t._dx&&this._dy===t._dy?0:this._quadrant>t._quadrant?1:this._quadrant<t._quadrant?-1:sc.computeOrientation(t._p0,t._p1,this._p1)},zh.prototype.getDy=function(){return this._dy},zh.prototype.getCoordinate=function(){return this._p0},zh.prototype.setNode=function(t){this._node=t},zh.prototype.print=function(t){var e=Math.atan2(this._dy,this._dx),n=this.getClass().getName(),r=n.lastIndexOf(\".\"),i=n.substring(r+1);t.print(\"  \"+i+\": \"+this._p0+\" - \"+this._p1+\" \"+this._quadrant+\":\"+e+\"   \"+this._label)},zh.prototype.compareTo=function(t){var e=t;return this.compareDirection(e)},zh.prototype.getDirectedCoordinate=function(){return this._p1},zh.prototype.getDx=function(){return this._dx},zh.prototype.getLabel=function(){return this._label},zh.prototype.getEdge=function(){return this._edge},zh.prototype.getQuadrant=function(){return this._quadrant},zh.prototype.getNode=function(){return this._node},zh.prototype.toString=function(){var t=Math.atan2(this._dy,this._dx),e=this.getClass().getName(),n=e.lastIndexOf(\".\");return\"  \"+e.substring(n+1)+\": \"+this._p0+\" - \"+this._p1+\" \"+this._quadrant+\":\"+t+\"   \"+this._label},zh.prototype.computeLabel=function(t){},zh.prototype.init=function(t,e){this._p0=t,this._p1=e,this._dx=e.x-t.x,this._dy=e.y-t.y,this._quadrant=Bh.quadrant(this._dx,this._dy),tc.isTrue(!(0===this._dx&&0===this._dy),\"EdgeEnd with identical endpoints found\")},zh.prototype.interfaces_=function(){return[xu]},zh.prototype.getClass=function(){return zh};var jh=function(t){function e(){var e=arguments[0],n=arguments[1];if(t.call(this,e),this._isForward=null,this._isInResult=!1,this._isVisited=!1,this._sym=null,this._next=null,this._nextMin=null,this._edgeRing=null,this._minEdgeRing=null,this._depth=[0,-999,-999],this._isForward=n,n)this.init(e.getCoordinate(0),e.getCoordinate(1));else{var r=e.getNumPoints()-1;this.init(e.getCoordinate(r),e.getCoordinate(r-1))}this.computeDirectedLabel()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getNextMin=function(){return this._nextMin},e.prototype.getDepth=function(t){return this._depth[t]},e.prototype.setVisited=function(t){this._isVisited=t},e.prototype.computeDirectedLabel=function(){this._label=new Rh(this._edge.getLabel()),this._isForward||this._label.flip()},e.prototype.getNext=function(){return this._next},e.prototype.setDepth=function(t,e){if(-999!==this._depth[t]&&this._depth[t]!==e)throw new Mh(\"assigned depths do not match\",this.getCoordinate());this._depth[t]=e},e.prototype.isInteriorAreaEdge=function(){for(var t=!0,e=0;e<2;e++)this._label.isArea(e)&&this._label.getLocation(e,Nh.LEFT)===Su.INTERIOR&&this._label.getLocation(e,Nh.RIGHT)===Su.INTERIOR||(t=!1);return t},e.prototype.setNextMin=function(t){this._nextMin=t},e.prototype.print=function(e){t.prototype.print.call(this,e),e.print(\" \"+this._depth[Nh.LEFT]+\"/\"+this._depth[Nh.RIGHT]),e.print(\" (\"+this.getDepthDelta()+\")\"),this._isInResult&&e.print(\" inResult\")},e.prototype.setMinEdgeRing=function(t){this._minEdgeRing=t},e.prototype.isLineEdge=function(){var t=this._label.isLine(0)||this._label.isLine(1),e=!this._label.isArea(0)||this._label.allPositionsEqual(0,Su.EXTERIOR),n=!this._label.isArea(1)||this._label.allPositionsEqual(1,Su.EXTERIOR);return t&&e&&n},e.prototype.setEdgeRing=function(t){this._edgeRing=t},e.prototype.getMinEdgeRing=function(){return this._minEdgeRing},e.prototype.getDepthDelta=function(){var t=this._edge.getDepthDelta();return this._isForward||(t=-t),t},e.prototype.setInResult=function(t){this._isInResult=t},e.prototype.getSym=function(){return this._sym},e.prototype.isForward=function(){return this._isForward},e.prototype.getEdge=function(){return this._edge},e.prototype.printEdge=function(t){this.print(t),t.print(\" \"),this._isForward?this._edge.print(t):this._edge.printReverse(t)},e.prototype.setSym=function(t){this._sym=t},e.prototype.setVisitedEdge=function(t){this.setVisited(t),this._sym.setVisited(t)},e.prototype.setEdgeDepths=function(t,e){var n=this.getEdge().getDepthDelta();this._isForward||(n=-n);var r=1;t===Nh.LEFT&&(r=-1);var i=Nh.opposite(t),o=e+n*r;this.setDepth(t,e),this.setDepth(i,o)},e.prototype.getEdgeRing=function(){return this._edgeRing},e.prototype.isInResult=function(){return this._isInResult},e.prototype.setNext=function(t){this._next=t},e.prototype.isVisited=function(){return this._isVisited},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.depthFactor=function(t,e){return t===Su.EXTERIOR&&e===Su.INTERIOR?1:t===Su.INTERIOR&&e===Su.EXTERIOR?-1:0},e}(zh),Xh=function(){};Xh.prototype.createNode=function(t){return new qh(t,null)},Xh.prototype.interfaces_=function(){return[]},Xh.prototype.getClass=function(){return Xh};var Uh=function(){if(this._edges=new bc,this._nodes=null,this._edgeEndList=new bc,0===arguments.length)this._nodes=new Gh(new Xh);else if(1===arguments.length){var t=arguments[0];this._nodes=new Gh(t)}};Uh.prototype.printEdges=function(t){t.println(\"Edges:\");for(var e=0;e<this._edges.size();e++){t.println(\"edge \"+e+\":\");var n=this._edges.get(e);n.print(t),n.eiList.print(t)}},Uh.prototype.find=function(t){return this._nodes.find(t)},Uh.prototype.addNode=function(){if(arguments[0]instanceof qh){var t=arguments[0];return this._nodes.addNode(t)}if(arguments[0]instanceof bu){var e=arguments[0];return this._nodes.addNode(e)}},Uh.prototype.getNodeIterator=function(){return this._nodes.iterator()},Uh.prototype.linkResultDirectedEdges=function(){for(var t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkResultDirectedEdges()}},Uh.prototype.debugPrintln=function(t){Xu.out.println(t)},Uh.prototype.isBoundaryNode=function(t,e){var n=this._nodes.find(e);if(null===n)return!1;var r=n.getLabel();return null!==r&&r.getLocation(t)===Su.BOUNDARY},Uh.prototype.linkAllDirectedEdges=function(){for(var t=this._nodes.iterator();t.hasNext();){t.next().getEdges().linkAllDirectedEdges()}},Uh.prototype.matchInSameDirection=function(t,e,n,r){return!!t.equals(n)&&(sc.computeOrientation(t,e,r)===sc.COLLINEAR&&Bh.quadrant(t,e)===Bh.quadrant(n,r))},Uh.prototype.getEdgeEnds=function(){return this._edgeEndList},Uh.prototype.debugPrint=function(t){Xu.out.print(t)},Uh.prototype.getEdgeIterator=function(){return this._edges.iterator()},Uh.prototype.findEdgeInSameDirection=function(t,e){for(var n=0;n<this._edges.size();n++){var r=this._edges.get(n),i=r.getCoordinates();if(this.matchInSameDirection(t,e,i[0],i[1]))return r;if(this.matchInSameDirection(t,e,i[i.length-1],i[i.length-2]))return r}return null},Uh.prototype.insertEdge=function(t){this._edges.add(t)},Uh.prototype.findEdgeEnd=function(t){for(var e=this.getEdgeEnds().iterator();e.hasNext();){var n=e.next();if(n.getEdge()===t)return n}return null},Uh.prototype.addEdges=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this._edges.add(n);var r=new jh(n,!0),i=new jh(n,!1);r.setSym(i),i.setSym(r),this.add(r),this.add(i)}},Uh.prototype.add=function(t){this._nodes.add(t),this._edgeEndList.add(t)},Uh.prototype.getNodes=function(){return this._nodes.values()},Uh.prototype.findEdge=function(t,e){for(var n=0;n<this._edges.size();n++){var r=this._edges.get(n),i=r.getCoordinates();if(t.equals(i[0])&&e.equals(i[1]))return r}return null},Uh.prototype.interfaces_=function(){return[]},Uh.prototype.getClass=function(){return Uh},Uh.linkResultDirectedEdges=function(t){for(var e=t.iterator();e.hasNext();){e.next().getEdges().linkResultDirectedEdges()}};var Yh=function(){this._geometryFactory=null,this._shellList=new bc;var t=arguments[0];this._geometryFactory=t};Yh.prototype.sortShellsAndHoles=function(t,e,n){for(var r=t.iterator();r.hasNext();){var i=r.next();i.isHole()?n.add(i):e.add(i)}},Yh.prototype.computePolygons=function(t){for(var e=new bc,n=t.iterator();n.hasNext();){var r=n.next().toPolygon(this._geometryFactory);e.add(r)}return e},Yh.prototype.placeFreeHoles=function(t,e){for(var n=e.iterator();n.hasNext();){var r=n.next();if(null===r.getShell()){var i=this.findEdgeRingContaining(r,t);if(null===i)throw new Mh(\"unable to assign hole to a shell\",r.getCoordinate(0));r.setShell(i)}}},Yh.prototype.buildMinimalEdgeRings=function(t,e,n){for(var r=new bc,i=t.iterator();i.hasNext();){var o=i.next();if(o.getMaxNodeDegree()>2){o.linkDirectedEdgesForMinimalEdgeRings();var s=o.buildMinimalRings(),a=this.findShell(s);null!==a?(this.placePolygonHoles(a,s),e.add(a)):n.addAll(s)}else r.add(o)}return r},Yh.prototype.containsPoint=function(t){for(var e=this._shellList.iterator();e.hasNext();){if(e.next().containsPoint(t))return!0}return!1},Yh.prototype.buildMaximalEdgeRings=function(t){for(var e=new bc,n=t.iterator();n.hasNext();){var r=n.next();if(r.isInResult()&&r.getLabel().isArea()&&null===r.getEdgeRing()){var i=new Dh(r,this._geometryFactory);e.add(i),i.setInResult()}}return e},Yh.prototype.placePolygonHoles=function(t,e){for(var n=e.iterator();n.hasNext();){var r=n.next();r.isHole()&&r.setShell(t)}},Yh.prototype.getPolygons=function(){return this.computePolygons(this._shellList)},Yh.prototype.findEdgeRingContaining=function(t,e){for(var n=t.getLinearRing(),r=n.getEnvelopeInternal(),i=n.getCoordinateN(0),o=null,s=null,a=e.iterator();a.hasNext();){var u=a.next(),c=u.getLinearRing(),h=c.getEnvelopeInternal();null!==o&&(s=o.getLinearRing().getEnvelopeInternal());var l=!1;h.contains(r)&&sc.isPointInRing(i,c.getCoordinates())&&(l=!0),l&&(null===o||s.contains(h))&&(o=u)}return o},Yh.prototype.findShell=function(t){for(var e=0,n=null,r=t.iterator();r.hasNext();){var i=r.next();i.isHole()||(n=i,e++)}return tc.isTrue(e<=1,\"found two shells in MinimalEdgeRing list\"),n},Yh.prototype.add=function(){if(1===arguments.length){var t=arguments[0];this.add(t.getEdgeEnds(),t.getNodes())}else if(2===arguments.length){var e=arguments[0],n=arguments[1];Uh.linkResultDirectedEdges(n);var r=this.buildMaximalEdgeRings(e),i=new bc,o=this.buildMinimalEdgeRings(r,this._shellList,i);this.sortShellsAndHoles(o,this._shellList,i),this.placeFreeHoles(this._shellList,i)}},Yh.prototype.interfaces_=function(){return[]},Yh.prototype.getClass=function(){return Yh};var Vh=function(){};Vh.prototype.getBounds=function(){},Vh.prototype.interfaces_=function(){return[]},Vh.prototype.getClass=function(){return Vh};var Hh=function(){this._bounds=null,this._item=null;var t=arguments[0],e=arguments[1];this._bounds=t,this._item=e};Hh.prototype.getItem=function(){return this._item},Hh.prototype.getBounds=function(){return this._bounds},Hh.prototype.interfaces_=function(){return[Vh,Li]},Hh.prototype.getClass=function(){return Hh};var Wh=function(){this._size=null,this._items=null,this._size=0,this._items=new bc,this._items.add(null)};Wh.prototype.poll=function(){if(this.isEmpty())return null;var t=this._items.get(1);return this._items.set(1,this._items.get(this._size)),this._size-=1,this.reorder(1),t},Wh.prototype.size=function(){return this._size},Wh.prototype.reorder=function(t){for(var e=null,n=this._items.get(t);2*t<=this._size&&((e=2*t)!==this._size&&this._items.get(e+1).compareTo(this._items.get(e))<0&&e++,this._items.get(e).compareTo(n)<0);t=e)this._items.set(t,this._items.get(e));this._items.set(t,n)},Wh.prototype.clear=function(){this._size=0,this._items.clear()},Wh.prototype.isEmpty=function(){return 0===this._size},Wh.prototype.add=function(t){this._items.add(null),this._size+=1;var e=this._size;for(this._items.set(0,t);t.compareTo(this._items.get(Math.trunc(e/2)))<0;e/=2)this._items.set(e,this._items.get(Math.trunc(e/2)));this._items.set(e,t)},Wh.prototype.interfaces_=function(){return[]},Wh.prototype.getClass=function(){return Wh};var Jh=function(){};Jh.prototype.visitItem=function(t){},Jh.prototype.interfaces_=function(){return[]},Jh.prototype.getClass=function(){return Jh};var Zh=function(){};Zh.prototype.insert=function(t,e){},Zh.prototype.remove=function(t,e){},Zh.prototype.query=function(){},Zh.prototype.interfaces_=function(){return[]},Zh.prototype.getClass=function(){return Zh};var Kh=function(){if(this._childBoundables=new bc,this._bounds=null,this._level=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this._level=t}},Qh={serialVersionUID:{configurable:!0}};Kh.prototype.getLevel=function(){return this._level},Kh.prototype.size=function(){return this._childBoundables.size()},Kh.prototype.getChildBoundables=function(){return this._childBoundables},Kh.prototype.addChildBoundable=function(t){tc.isTrue(null===this._bounds),this._childBoundables.add(t)},Kh.prototype.isEmpty=function(){return this._childBoundables.isEmpty()},Kh.prototype.getBounds=function(){return null===this._bounds&&(this._bounds=this.computeBounds()),this._bounds},Kh.prototype.interfaces_=function(){return[Vh,Li]},Kh.prototype.getClass=function(){return Kh},Qh.serialVersionUID.get=function(){return 0x5a1e55ec41369800},Object.defineProperties(Kh,Qh);var $h=function(){};$h.reverseOrder=function(){return{compare:function(t,e){return e.compareTo(t)}}},$h.min=function(t){return $h.sort(t),t.get(0)},$h.sort=function(t,e){var n=t.toArray();e?qc.sort(n,e):qc.sort(n);for(var r=t.iterator(),i=0,o=n.length;i<o;i++)r.next(),r.set(n[i])},$h.singletonList=function(t){var e=new bc;return e.add(t),e};var tl=function(){this._boundable1=null,this._boundable2=null,this._distance=null,this._itemDistance=null;var t=arguments[0],e=arguments[1],n=arguments[2];this._boundable1=t,this._boundable2=e,this._itemDistance=n,this._distance=this.distance()};tl.prototype.expandToQueue=function(t,e){var n=tl.isComposite(this._boundable1),r=tl.isComposite(this._boundable2);if(n&&r)return tl.area(this._boundable1)>tl.area(this._boundable2)?(this.expand(this._boundable1,this._boundable2,t,e),null):(this.expand(this._boundable2,this._boundable1,t,e),null);if(n)return this.expand(this._boundable1,this._boundable2,t,e),null;if(r)return this.expand(this._boundable2,this._boundable1,t,e),null;throw new _u(\"neither boundable is composite\")},tl.prototype.isLeaves=function(){return!(tl.isComposite(this._boundable1)||tl.isComposite(this._boundable2))},tl.prototype.compareTo=function(t){var e=t;return this._distance<e._distance?-1:this._distance>e._distance?1:0},tl.prototype.expand=function(t,e,n,r){for(var i=t.getChildBoundables().iterator();i.hasNext();){var o=i.next(),s=new tl(o,e,this._itemDistance);s.getDistance()<r&&n.add(s)}},tl.prototype.getBoundable=function(t){return 0===t?this._boundable1:this._boundable2},tl.prototype.getDistance=function(){return this._distance},tl.prototype.distance=function(){return this.isLeaves()?this._itemDistance.distance(this._boundable1,this._boundable2):this._boundable1.getBounds().distance(this._boundable2.getBounds())},tl.prototype.interfaces_=function(){return[xu]},tl.prototype.getClass=function(){return tl},tl.area=function(t){return t.getBounds().getArea()},tl.isComposite=function(t){return t instanceof Kh};var el=function t(){if(this._root=null,this._built=!1,this._itemBoundables=new bc,this._nodeCapacity=null,0===arguments.length){var e=t.DEFAULT_NODE_CAPACITY;this._nodeCapacity=e}else if(1===arguments.length){var n=arguments[0];tc.isTrue(n>1,\"Node capacity must be greater than 1\"),this._nodeCapacity=n}},nl={IntersectsOp:{configurable:!0},serialVersionUID:{configurable:!0},DEFAULT_NODE_CAPACITY:{configurable:!0}};el.prototype.getNodeCapacity=function(){return this._nodeCapacity},el.prototype.lastNode=function(t){return t.get(t.size()-1)},el.prototype.size=function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this._root));if(1===arguments.length){for(var t=0,e=arguments[0].getChildBoundables().iterator();e.hasNext();){var n=e.next();n instanceof Kh?t+=this.size(n):n instanceof Hh&&(t+=1)}return t}},el.prototype.removeItem=function(t,e){for(var n=null,r=t.getChildBoundables().iterator();r.hasNext();){var i=r.next();i instanceof Hh&&i.getItem()===e&&(n=i)}return null!==n&&(t.getChildBoundables().remove(n),!0)},el.prototype.itemsTree=function(){if(0===arguments.length){this.build();var t=this.itemsTree(this._root);return null===t?new bc:t}if(1===arguments.length){for(var e=arguments[0],n=new bc,r=e.getChildBoundables().iterator();r.hasNext();){var i=r.next();if(i instanceof Kh){var o=this.itemsTree(i);null!==o&&n.add(o)}else i instanceof Hh?n.add(i.getItem()):tc.shouldNeverReachHere()}return n.size()<=0?null:n}},el.prototype.insert=function(t,e){tc.isTrue(!this._built,\"Cannot insert items into an STR packed R-tree after it has been built.\"),this._itemBoundables.add(new Hh(t,e))},el.prototype.boundablesAtLevel=function(){if(1===arguments.length){var t=arguments[0],e=new bc;return this.boundablesAtLevel(t,this._root,e),e}if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];if(tc.isTrue(n>-2),r.getLevel()===n)return i.add(r),null;for(var o=r.getChildBoundables().iterator();o.hasNext();){var s=o.next();s instanceof Kh?this.boundablesAtLevel(n,s,i):(tc.isTrue(s instanceof Hh),-1===n&&i.add(s))}return null}},el.prototype.query=function(){if(1===arguments.length){var t=arguments[0];this.build();var e=new bc;return this.isEmpty()?e:(this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.query(t,this._root,e),e)}if(2===arguments.length){var n=arguments[0],r=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this._root.getBounds(),n)&&this.query(n,this._root,r)}else if(3===arguments.length)if(Lu(arguments[2],Jh)&&arguments[0]instanceof Object&&arguments[1]instanceof Kh)for(var i=arguments[0],o=arguments[1],s=arguments[2],a=o.getChildBoundables(),u=0;u<a.size();u++){var c=a.get(u);this.getIntersectsOp().intersects(c.getBounds(),i)&&(c instanceof Kh?this.query(i,c,s):c instanceof Hh?s.visitItem(c.getItem()):tc.shouldNeverReachHere())}else if(Lu(arguments[2],wc)&&arguments[0]instanceof Object&&arguments[1]instanceof Kh)for(var h=arguments[0],l=arguments[1],p=arguments[2],f=l.getChildBoundables(),g=0;g<f.size();g++){var d=f.get(g);this.getIntersectsOp().intersects(d.getBounds(),h)&&(d instanceof Kh?this.query(h,d,p):d instanceof Hh?p.add(d.getItem()):tc.shouldNeverReachHere())}},el.prototype.build=function(){if(this._built)return null;this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1),this._itemBoundables=null,this._built=!0},el.prototype.getRoot=function(){return this.build(),this._root},el.prototype.remove=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this._root.getBounds(),t)&&this.remove(t,this._root,e)}if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2],o=this.removeItem(r,i);if(o)return!0;for(var s=null,a=r.getChildBoundables().iterator();a.hasNext();){var u=a.next();if(this.getIntersectsOp().intersects(u.getBounds(),n)&&(u instanceof Kh&&(o=this.remove(n,u,i)))){s=u;break}}return null!==s&&s.getChildBoundables().isEmpty()&&r.getChildBoundables().remove(s),o}},el.prototype.createHigherLevels=function(t,e){tc.isTrue(!t.isEmpty());var n=this.createParentBoundables(t,e+1);return 1===n.size()?n.get(0):this.createHigherLevels(n,e+1)},el.prototype.depth=function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this._root));if(1===arguments.length){for(var t=0,e=arguments[0].getChildBoundables().iterator();e.hasNext();){var n=e.next();if(n instanceof Kh){var r=this.depth(n);r>t&&(t=r)}}return t+1}},el.prototype.createParentBoundables=function(t,e){tc.isTrue(!t.isEmpty());var n=new bc;n.add(this.createNode(e));var r=new bc(t);$h.sort(r,this.getComparator());for(var i=r.iterator();i.hasNext();){var o=i.next();this.lastNode(n).getChildBoundables().size()===this.getNodeCapacity()&&n.add(this.createNode(e)),this.lastNode(n).addChildBoundable(o)}return n},el.prototype.isEmpty=function(){return this._built?this._root.isEmpty():this._itemBoundables.isEmpty()},el.prototype.interfaces_=function(){return[Li]},el.prototype.getClass=function(){return el},el.compareDoubles=function(t,e){return t>e?1:t<e?-1:0},nl.IntersectsOp.get=function(){return rl},nl.serialVersionUID.get=function(){return-0x35ef64c82d4c5400},nl.DEFAULT_NODE_CAPACITY.get=function(){return 10},Object.defineProperties(el,nl);var rl=function(){},il=function(){};il.prototype.distance=function(t,e){},il.prototype.interfaces_=function(){return[]},il.prototype.getClass=function(){return il};var ol=function(t){function e(n){n=n||e.DEFAULT_NODE_CAPACITY,t.call(this,n)}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={STRtreeNode:{configurable:!0},serialVersionUID:{configurable:!0},xComparator:{configurable:!0},yComparator:{configurable:!0},intersectsOp:{configurable:!0},DEFAULT_NODE_CAPACITY:{configurable:!0}};return e.prototype.createParentBoundablesFromVerticalSlices=function(t,e){tc.isTrue(t.length>0);for(var n=new bc,r=0;r<t.length;r++)n.addAll(this.createParentBoundablesFromVerticalSlice(t[r],e));return n},e.prototype.createNode=function(t){return new sl(t)},e.prototype.size=function(){return 0===arguments.length?t.prototype.size.call(this):t.prototype.size.apply(this,arguments)},e.prototype.insert=function(){if(2!==arguments.length)return t.prototype.insert.apply(this,arguments);var e=arguments[0],n=arguments[1];if(e.isNull())return null;t.prototype.insert.call(this,e,n)},e.prototype.getIntersectsOp=function(){return e.intersectsOp},e.prototype.verticalSlices=function(t,e){for(var n=Math.trunc(Math.ceil(t.size()/e)),r=new Array(e).fill(null),i=t.iterator(),o=0;o<e;o++){r[o]=new bc;for(var s=0;i.hasNext()&&s<n;){var a=i.next();r[o].add(a),s++}}return r},e.prototype.query=function(){if(1===arguments.length){var e=arguments[0];return t.prototype.query.call(this,e)}if(2===arguments.length){var n=arguments[0],r=arguments[1];t.prototype.query.call(this,n,r)}else if(3===arguments.length)if(Lu(arguments[2],Jh)&&arguments[0]instanceof Object&&arguments[1]instanceof Kh){var i=arguments[0],o=arguments[1],s=arguments[2];t.prototype.query.call(this,i,o,s)}else if(Lu(arguments[2],wc)&&arguments[0]instanceof Object&&arguments[1]instanceof Kh){var a=arguments[0],u=arguments[1],c=arguments[2];t.prototype.query.call(this,a,u,c)}},e.prototype.getComparator=function(){return e.yComparator},e.prototype.createParentBoundablesFromVerticalSlice=function(e,n){return t.prototype.createParentBoundables.call(this,e,n)},e.prototype.remove=function(){if(2===arguments.length){var e=arguments[0],n=arguments[1];return t.prototype.remove.call(this,e,n)}return t.prototype.remove.apply(this,arguments)},e.prototype.depth=function(){return 0===arguments.length?t.prototype.depth.call(this):t.prototype.depth.apply(this,arguments)},e.prototype.createParentBoundables=function(t,n){tc.isTrue(!t.isEmpty());var r=Math.trunc(Math.ceil(t.size()/this.getNodeCapacity())),i=new bc(t);$h.sort(i,e.xComparator);var o=this.verticalSlices(i,Math.trunc(Math.ceil(Math.sqrt(r))));return this.createParentBoundablesFromVerticalSlices(o,n)},e.prototype.nearestNeighbour=function(){if(1===arguments.length){if(Lu(arguments[0],il)){var t=arguments[0],n=new tl(this.getRoot(),this.getRoot(),t);return this.nearestNeighbour(n)}if(arguments[0]instanceof tl){var r=arguments[0];return this.nearestNeighbour(r,mu.POSITIVE_INFINITY)}}else if(2===arguments.length){if(arguments[0]instanceof e&&Lu(arguments[1],il)){var i=arguments[0],o=arguments[1],s=new tl(this.getRoot(),i.getRoot(),o);return this.nearestNeighbour(s)}if(arguments[0]instanceof tl&&\"number\"==typeof arguments[1]){var a=arguments[0],u=arguments[1],c=null,h=new Wh;for(h.add(a);!h.isEmpty()&&u>0;){var l=h.poll(),p=l.getDistance();if(p>=u)break;l.isLeaves()?(u=p,c=l):l.expandToQueue(h,u)}return[c.getBoundable(0).getItem(),c.getBoundable(1).getItem()]}}else if(3===arguments.length){var f=arguments[0],g=arguments[1],d=arguments[2],y=new Hh(f,g),_=new tl(this.getRoot(),y,d);return this.nearestNeighbour(_)[0]}},e.prototype.interfaces_=function(){return[Zh,Li]},e.prototype.getClass=function(){return e},e.centreX=function(t){return e.avg(t.getMinX(),t.getMaxX())},e.avg=function(t,e){return(t+e)/2},e.centreY=function(t){return e.avg(t.getMinY(),t.getMaxY())},n.STRtreeNode.get=function(){return sl},n.serialVersionUID.get=function(){return 0x39920f7d5f261e0},n.xComparator.get=function(){return{interfaces_:function(){return[wu]},compare:function(n,r){return t.compareDoubles(e.centreX(n.getBounds()),e.centreX(r.getBounds()))}}},n.yComparator.get=function(){return{interfaces_:function(){return[wu]},compare:function(n,r){return t.compareDoubles(e.centreY(n.getBounds()),e.centreY(r.getBounds()))}}},n.intersectsOp.get=function(){return{interfaces_:function(){return[t.IntersectsOp]},intersects:function(t,e){return t.intersects(e)}}},n.DEFAULT_NODE_CAPACITY.get=function(){return 10},Object.defineProperties(e,n),e}(el),sl=function(t){function e(){var e=arguments[0];t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.computeBounds=function(){for(var t=null,e=this.getChildBoundables().iterator();e.hasNext();){var n=e.next();null===t?t=new Yu(n.getBounds()):t.expandToInclude(n.getBounds())}return t},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Kh),al=function(){};al.prototype.interfaces_=function(){return[]},al.prototype.getClass=function(){return al},al.relativeSign=function(t,e){return t<e?-1:t>e?1:0},al.compare=function(t,e,n){if(e.equals2D(n))return 0;var r=al.relativeSign(e.x,n.x),i=al.relativeSign(e.y,n.y);switch(t){case 0:return al.compareValue(r,i);case 1:return al.compareValue(i,r);case 2:return al.compareValue(i,-r);case 3:return al.compareValue(-r,i);case 4:return al.compareValue(-r,-i);case 5:return al.compareValue(-i,-r);case 6:return al.compareValue(-i,r);case 7:return al.compareValue(r,-i)}return tc.shouldNeverReachHere(\"invalid octant value\"),0},al.compareValue=function(t,e){return t<0?-1:t>0?1:e<0?-1:e>0?1:0};var ul=function(){this._segString=null,this.coord=null,this.segmentIndex=null,this._segmentOctant=null,this._isInterior=null;var t=arguments[0],e=arguments[1],n=arguments[2],r=arguments[3];this._segString=t,this.coord=new bu(e),this.segmentIndex=n,this._segmentOctant=r,this._isInterior=!e.equals2D(t.getCoordinate(n))};ul.prototype.getCoordinate=function(){return this.coord},ul.prototype.print=function(t){t.print(this.coord),t.print(\" seg # = \"+this.segmentIndex)},ul.prototype.compareTo=function(t){var e=t;return this.segmentIndex<e.segmentIndex?-1:this.segmentIndex>e.segmentIndex?1:this.coord.equals2D(e.coord)?0:al.compare(this._segmentOctant,this.coord,e.coord)},ul.prototype.isEndPoint=function(t){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===t},ul.prototype.isInterior=function(){return this._isInterior},ul.prototype.interfaces_=function(){return[xu]},ul.prototype.getClass=function(){return ul};var cl=function(){this._nodeMap=new Gi,this._edge=null;var t=arguments[0];this._edge=t};cl.prototype.getSplitCoordinates=function(){var t=new Nc;this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var r=e.next();this.addEdgeCoordinates(n,r,t),n=r}return t.toCoordinateArray()},cl.prototype.addCollapsedNodes=function(){var t=new bc;this.findCollapsesFromInsertedNodes(t),this.findCollapsesFromExistingVertices(t);for(var e=t.iterator();e.hasNext();){var n=e.next().intValue();this.add(this._edge.getCoordinate(n),n)}},cl.prototype.print=function(t){t.println(\"Intersections:\");for(var e=this.iterator();e.hasNext();){e.next().print(t)}},cl.prototype.findCollapsesFromExistingVertices=function(t){for(var e=0;e<this._edge.size()-2;e++){var n=this._edge.getCoordinate(e),r=this._edge.getCoordinate(e+2);n.equals2D(r)&&t.add(new Tu(e+1))}},cl.prototype.addEdgeCoordinates=function(t,e,n){var r=this._edge.getCoordinate(e.segmentIndex),i=e.isInterior()||!e.coord.equals2D(r);n.add(new bu(t.coord),!1);for(var o=t.segmentIndex+1;o<=e.segmentIndex;o++)n.add(this._edge.getCoordinate(o));i&&n.add(new bu(e.coord))},cl.prototype.iterator=function(){return this._nodeMap.values().iterator()},cl.prototype.addSplitEdges=function(t){this.addEndpoints(),this.addCollapsedNodes();for(var e=this.iterator(),n=e.next();e.hasNext();){var r=e.next(),i=this.createSplitEdge(n,r);t.add(i),n=r}},cl.prototype.findCollapseIndex=function(t,e,n){if(!t.coord.equals2D(e.coord))return!1;var r=e.segmentIndex-t.segmentIndex;return e.isInterior()||r--,1===r&&(n[0]=t.segmentIndex+1,!0)},cl.prototype.findCollapsesFromInsertedNodes=function(t){for(var e=new Array(1).fill(null),n=this.iterator(),r=n.next();n.hasNext();){var i=n.next();this.findCollapseIndex(r,i,e)&&t.add(new Tu(e[0])),r=i}},cl.prototype.getEdge=function(){return this._edge},cl.prototype.addEndpoints=function(){var t=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0),this.add(this._edge.getCoordinate(t),t)},cl.prototype.createSplitEdge=function(t,e){var n=e.segmentIndex-t.segmentIndex+2,r=this._edge.getCoordinate(e.segmentIndex),i=e.isInterior()||!e.coord.equals2D(r);i||n--;var o=new Array(n).fill(null),s=0;o[s++]=new bu(t.coord);for(var a=t.segmentIndex+1;a<=e.segmentIndex;a++)o[s++]=this._edge.getCoordinate(a);return i&&(o[s]=new bu(e.coord)),new fl(o,this._edge.getData())},cl.prototype.add=function(t,e){var n=new ul(this._edge,t,e,this._edge.getSegmentOctant(e)),r=this._nodeMap.get(n);return null!==r?(tc.isTrue(r.coord.equals2D(t),\"Found equal nodes with different coordinates\"),r):(this._nodeMap.put(n,n),n)},cl.prototype.checkSplitEdgesCorrectness=function(t){var e=this._edge.getCoordinates(),n=t.get(0).getCoordinate(0);if(!n.equals2D(e[0]))throw new Qu(\"bad split edge start point at \"+n);var r=t.get(t.size()-1).getCoordinates(),i=r[r.length-1];if(!i.equals2D(e[e.length-1]))throw new Qu(\"bad split edge end point at \"+i)},cl.prototype.interfaces_=function(){return[]},cl.prototype.getClass=function(){return cl};var hl=function(){};hl.prototype.interfaces_=function(){return[]},hl.prototype.getClass=function(){return hl},hl.octant=function(){if(\"number\"==typeof arguments[0]&&\"number\"==typeof arguments[1]){var t=arguments[0],e=arguments[1];if(0===t&&0===e)throw new _u(\"Cannot compute the octant for point ( \"+t+\", \"+e+\" )\");var n=Math.abs(t),r=Math.abs(e);return t>=0?e>=0?n>=r?0:1:n>=r?7:6:e>=0?n>=r?3:2:n>=r?4:5}if(arguments[0]instanceof bu&&arguments[1]instanceof bu){var i=arguments[0],o=arguments[1],s=o.x-i.x,a=o.y-i.y;if(0===s&&0===a)throw new _u(\"Cannot compute the octant for two identical points \"+i);return hl.octant(s,a)}};var ll=function(){};ll.prototype.getCoordinates=function(){},ll.prototype.size=function(){},ll.prototype.getCoordinate=function(t){},ll.prototype.isClosed=function(){},ll.prototype.setData=function(t){},ll.prototype.getData=function(){},ll.prototype.interfaces_=function(){return[]},ll.prototype.getClass=function(){return ll};var pl=function(){};pl.prototype.addIntersection=function(t,e){},pl.prototype.interfaces_=function(){return[ll]},pl.prototype.getClass=function(){return pl};var fl=function(){this._nodeList=new cl(this),this._pts=null,this._data=null;var t=arguments[0],e=arguments[1];this._pts=t,this._data=e};fl.prototype.getCoordinates=function(){return this._pts},fl.prototype.size=function(){return this._pts.length},fl.prototype.getCoordinate=function(t){return this._pts[t]},fl.prototype.isClosed=function(){return this._pts[0].equals(this._pts[this._pts.length-1])},fl.prototype.getSegmentOctant=function(t){return t===this._pts.length-1?-1:this.safeOctant(this.getCoordinate(t),this.getCoordinate(t+1))},fl.prototype.setData=function(t){this._data=t},fl.prototype.safeOctant=function(t,e){return t.equals2D(e)?0:hl.octant(t,e)},fl.prototype.getData=function(){return this._data},fl.prototype.addIntersection=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];this.addIntersectionNode(t,e)}else if(4===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[3],o=new bu(n.getIntersection(i));this.addIntersection(o,r)}},fl.prototype.toString=function(){return Ku.toLineString(new uh(this._pts))},fl.prototype.getNodeList=function(){return this._nodeList},fl.prototype.addIntersectionNode=function(t,e){var n=e,r=n+1;if(r<this._pts.length){var i=this._pts[r];t.equals2D(i)&&(n=r)}return this._nodeList.add(t,n)},fl.prototype.addIntersections=function(t,e,n){for(var r=0;r<t.getIntersectionNum();r++)this.addIntersection(t,e,n,r)},fl.prototype.interfaces_=function(){return[pl]},fl.prototype.getClass=function(){return fl},fl.getNodedSubstrings=function(){if(1===arguments.length){var t=arguments[0],e=new bc;return fl.getNodedSubstrings(t,e),e}if(2===arguments.length)for(var n=arguments[0],r=arguments[1],i=n.iterator();i.hasNext();){i.next().getNodeList().addSplitEdges(r)}};var gl=function(){if(this.p0=null,this.p1=null,0===arguments.length)this.p0=new bu,this.p1=new bu;else if(1===arguments.length){var t=arguments[0];this.p0=new bu(t.p0),this.p1=new bu(t.p1)}else if(2===arguments.length)this.p0=arguments[0],this.p1=arguments[1];else if(4===arguments.length){var e=arguments[0],n=arguments[1],r=arguments[2],i=arguments[3];this.p0=new bu(e,n),this.p1=new bu(r,i)}},dl={serialVersionUID:{configurable:!0}};gl.prototype.minX=function(){return Math.min(this.p0.x,this.p1.x)},gl.prototype.orientationIndex=function(){if(arguments[0]instanceof gl){var t=arguments[0],e=sc.orientationIndex(this.p0,this.p1,t.p0),n=sc.orientationIndex(this.p0,this.p1,t.p1);return e>=0&&n>=0?Math.max(e,n):e<=0&&n<=0?Math.max(e,n):0}if(arguments[0]instanceof bu){var r=arguments[0];return sc.orientationIndex(this.p0,this.p1,r)}},gl.prototype.toGeometry=function(t){return t.createLineString([this.p0,this.p1])},gl.prototype.isVertical=function(){return this.p0.x===this.p1.x},gl.prototype.equals=function(t){if(!(t instanceof gl))return!1;var e=t;return this.p0.equals(e.p0)&&this.p1.equals(e.p1)},gl.prototype.intersection=function(t){var e=new rc;return e.computeIntersection(this.p0,this.p1,t.p0,t.p1),e.hasIntersection()?e.getIntersection(0):null},gl.prototype.project=function(){if(arguments[0]instanceof bu){var t=arguments[0];if(t.equals(this.p0)||t.equals(this.p1))return new bu(t);var e=this.projectionFactor(t),n=new bu;return n.x=this.p0.x+e*(this.p1.x-this.p0.x),n.y=this.p0.y+e*(this.p1.y-this.p0.y),n}if(arguments[0]instanceof gl){var r=arguments[0],i=this.projectionFactor(r.p0),o=this.projectionFactor(r.p1);if(i>=1&&o>=1)return null;if(i<=0&&o<=0)return null;var s=this.project(r.p0);i<0&&(s=this.p0),i>1&&(s=this.p1);var a=this.project(r.p1);return o<0&&(a=this.p0),o>1&&(a=this.p1),new gl(s,a)}},gl.prototype.normalize=function(){this.p1.compareTo(this.p0)<0&&this.reverse()},gl.prototype.angle=function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)},gl.prototype.getCoordinate=function(t){return 0===t?this.p0:this.p1},gl.prototype.distancePerpendicular=function(t){return sc.distancePointLinePerpendicular(t,this.p0,this.p1)},gl.prototype.minY=function(){return Math.min(this.p0.y,this.p1.y)},gl.prototype.midPoint=function(){return gl.midPoint(this.p0,this.p1)},gl.prototype.projectionFactor=function(t){if(t.equals(this.p0))return 0;if(t.equals(this.p1))return 1;var e=this.p1.x-this.p0.x,n=this.p1.y-this.p0.y,r=e*e+n*n;if(r<=0)return mu.NaN;return((t.x-this.p0.x)*e+(t.y-this.p0.y)*n)/r},gl.prototype.closestPoints=function(t){var e=this.intersection(t);if(null!==e)return[e,e];var n=new Array(2).fill(null),r=mu.MAX_VALUE,i=null,o=this.closestPoint(t.p0);r=o.distance(t.p0),n[0]=o,n[1]=t.p0;var s=this.closestPoint(t.p1);(i=s.distance(t.p1))<r&&(r=i,n[0]=s,n[1]=t.p1);var a=t.closestPoint(this.p0);(i=a.distance(this.p0))<r&&(r=i,n[0]=this.p0,n[1]=a);var u=t.closestPoint(this.p1);return(i=u.distance(this.p1))<r&&(r=i,n[0]=this.p1,n[1]=u),n},gl.prototype.closestPoint=function(t){var e=this.projectionFactor(t);if(e>0&&e<1)return this.project(t);return this.p0.distance(t)<this.p1.distance(t)?this.p0:this.p1},gl.prototype.maxX=function(){return Math.max(this.p0.x,this.p1.x)},gl.prototype.getLength=function(){return this.p0.distance(this.p1)},gl.prototype.compareTo=function(t){var e=t,n=this.p0.compareTo(e.p0);return 0!==n?n:this.p1.compareTo(e.p1)},gl.prototype.reverse=function(){var t=this.p0;this.p0=this.p1,this.p1=t},gl.prototype.equalsTopo=function(t){return this.p0.equals(t.p0)&&(this.p1.equals(t.p1)||this.p0.equals(t.p1))&&this.p1.equals(t.p0)},gl.prototype.lineIntersection=function(t){try{return Uu.intersection(this.p0,this.p1,t.p0,t.p1)}catch(t){if(!(t instanceof ju))throw t}return null},gl.prototype.maxY=function(){return Math.max(this.p0.y,this.p1.y)},gl.prototype.pointAlongOffset=function(t,e){var n=this.p0.x+t*(this.p1.x-this.p0.x),r=this.p0.y+t*(this.p1.y-this.p0.y),i=this.p1.x-this.p0.x,o=this.p1.y-this.p0.y,s=Math.sqrt(i*i+o*o),a=0,u=0;if(0!==e){if(s<=0)throw new Error(\"Cannot compute offset from zero-length line segment\");a=e*i/s,u=e*o/s}return new bu(n-u,r+a)},gl.prototype.setCoordinates=function(){if(1===arguments.length){var t=arguments[0];this.setCoordinates(t.p0,t.p1)}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this.p0.x=e.x,this.p0.y=e.y,this.p1.x=n.x,this.p1.y=n.y}},gl.prototype.segmentFraction=function(t){var e=this.projectionFactor(t);return e<0?e=0:(e>1||mu.isNaN(e))&&(e=1),e},gl.prototype.toString=function(){return\"LINESTRING( \"+this.p0.x+\" \"+this.p0.y+\", \"+this.p1.x+\" \"+this.p1.y+\")\"},gl.prototype.isHorizontal=function(){return this.p0.y===this.p1.y},gl.prototype.distance=function(){if(arguments[0]instanceof gl){var t=arguments[0];return sc.distanceLineLine(this.p0,this.p1,t.p0,t.p1)}if(arguments[0]instanceof bu){var e=arguments[0];return sc.distancePointLine(e,this.p0,this.p1)}},gl.prototype.pointAlong=function(t){var e=new bu;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e},gl.prototype.hashCode=function(){var t=mu.doubleToLongBits(this.p0.x);t^=31*mu.doubleToLongBits(this.p0.y);var e=Math.trunc(t)^Math.trunc(t>>32),n=mu.doubleToLongBits(this.p1.x);n^=31*mu.doubleToLongBits(this.p1.y);return e^(Math.trunc(n)^Math.trunc(n>>32))},gl.prototype.interfaces_=function(){return[xu,Li]},gl.prototype.getClass=function(){return gl},gl.midPoint=function(t,e){return new bu((t.x+e.x)/2,(t.y+e.y)/2)},dl.serialVersionUID.get=function(){return 0x2d2172135f411c00},Object.defineProperties(gl,dl);var yl=function(){this.tempEnv1=new Yu,this.tempEnv2=new Yu,this._overlapSeg1=new gl,this._overlapSeg2=new gl};yl.prototype.overlap=function(){if(2===arguments.length);else if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],r=arguments[3];t.getLineSegment(e,this._overlapSeg1),n.getLineSegment(r,this._overlapSeg2),this.overlap(this._overlapSeg1,this._overlapSeg2)}},yl.prototype.interfaces_=function(){return[]},yl.prototype.getClass=function(){return yl};var _l=function(){this._pts=null,this._start=null,this._end=null,this._env=null,this._context=null,this._id=null;var t=arguments[0],e=arguments[1],n=arguments[2],r=arguments[3];this._pts=t,this._start=e,this._end=n,this._context=r};_l.prototype.getLineSegment=function(t,e){e.p0=this._pts[t],e.p1=this._pts[t+1]},_l.prototype.computeSelect=function(t,e,n,r){var i=this._pts[e],o=this._pts[n];if(r.tempEnv1.init(i,o),n-e==1)return r.select(this,e),null;if(!t.intersects(r.tempEnv1))return null;var s=Math.trunc((e+n)/2);e<s&&this.computeSelect(t,e,s,r),s<n&&this.computeSelect(t,s,n,r)},_l.prototype.getCoordinates=function(){for(var t=new Array(this._end-this._start+1).fill(null),e=0,n=this._start;n<=this._end;n++)t[e++]=this._pts[n];return t},_l.prototype.computeOverlaps=function(t,e){this.computeOverlapsInternal(this._start,this._end,t,t._start,t._end,e)},_l.prototype.setId=function(t){this._id=t},_l.prototype.select=function(t,e){this.computeSelect(t,this._start,this._end,e)},_l.prototype.getEnvelope=function(){if(null===this._env){var t=this._pts[this._start],e=this._pts[this._end];this._env=new Yu(t,e)}return this._env},_l.prototype.getEndIndex=function(){return this._end},_l.prototype.getStartIndex=function(){return this._start},_l.prototype.getContext=function(){return this._context},_l.prototype.getId=function(){return this._id},_l.prototype.computeOverlapsInternal=function(t,e,n,r,i,o){var s=this._pts[t],a=this._pts[e],u=n._pts[r],c=n._pts[i];if(e-t==1&&i-r==1)return o.overlap(this,t,n,r),null;if(o.tempEnv1.init(s,a),o.tempEnv2.init(u,c),!o.tempEnv1.intersects(o.tempEnv2))return null;var h=Math.trunc((t+e)/2),l=Math.trunc((r+i)/2);t<h&&(r<l&&this.computeOverlapsInternal(t,h,n,r,l,o),l<i&&this.computeOverlapsInternal(t,h,n,l,i,o)),h<e&&(r<l&&this.computeOverlapsInternal(h,e,n,r,l,o),l<i&&this.computeOverlapsInternal(h,e,n,l,i,o))},_l.prototype.interfaces_=function(){return[]},_l.prototype.getClass=function(){return _l};var ml=function(){};ml.prototype.interfaces_=function(){return[]},ml.prototype.getClass=function(){return ml},ml.getChainStartIndices=function(t){var e=0,n=new bc;n.add(new Tu(e));do{var r=ml.findChainEnd(t,e);n.add(new Tu(r)),e=r}while(e<t.length-1);return ml.toIntArray(n)},ml.findChainEnd=function(t,e){for(var n=e;n<t.length-1&&t[n].equals2D(t[n+1]);)n++;if(n>=t.length-1)return t.length-1;for(var r=Bh.quadrant(t[n],t[n+1]),i=e+1;i<t.length;){if(!t[i-1].equals2D(t[i])){if(Bh.quadrant(t[i-1],t[i])!==r)break}i++}return i-1},ml.getChains=function(){if(1===arguments.length){var t=arguments[0];return ml.getChains(t,null)}if(2===arguments.length){for(var e=arguments[0],n=arguments[1],r=new bc,i=ml.getChainStartIndices(e),o=0;o<i.length-1;o++){var s=new _l(e,i[o],i[o+1],n);r.add(s)}return r}},ml.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e};var vl=function(){};vl.prototype.computeNodes=function(t){},vl.prototype.getNodedSubstrings=function(){},vl.prototype.interfaces_=function(){return[]},vl.prototype.getClass=function(){return vl};var xl=function(){if(this._segInt=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];this.setSegmentIntersector(t)}};xl.prototype.setSegmentIntersector=function(t){this._segInt=t},xl.prototype.interfaces_=function(){return[vl]},xl.prototype.getClass=function(){return xl};var El=function(t){function e(e){e?t.call(this,e):t.call(this),this._monoChains=new bc,this._index=new ol,this._idCounter=0,this._nodedSegStrings=null,this._nOverlaps=0}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var n={SegmentOverlapAction:{configurable:!0}};return e.prototype.getMonotoneChains=function(){return this._monoChains},e.prototype.getNodedSubstrings=function(){return fl.getNodedSubstrings(this._nodedSegStrings)},e.prototype.getIndex=function(){return this._index},e.prototype.add=function(t){for(var e=ml.getChains(t.getCoordinates(),t).iterator();e.hasNext();){var n=e.next();n.setId(this._idCounter++),this._index.insert(n.getEnvelope(),n),this._monoChains.add(n)}},e.prototype.computeNodes=function(t){this._nodedSegStrings=t;for(var e=t.iterator();e.hasNext();)this.add(e.next());this.intersectChains()},e.prototype.intersectChains=function(){for(var t=new wl(this._segInt),e=this._monoChains.iterator();e.hasNext();)for(var n=e.next(),r=this._index.query(n.getEnvelope()).iterator();r.hasNext();){var i=r.next();if(i.getId()>n.getId()&&(n.computeOverlaps(i,t),this._nOverlaps++),this._segInt.isDone())return null}},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},n.SegmentOverlapAction.get=function(){return wl},Object.defineProperties(e,n),e}(xl),wl=function(t){function e(){t.call(this),this._si=null;var e=arguments[0];this._si=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.overlap=function(){if(4!==arguments.length)return t.prototype.overlap.apply(this,arguments);var e=arguments[0],n=arguments[1],r=arguments[2],i=arguments[3],o=e.getContext(),s=r.getContext();this._si.processIntersections(o,n,s,i)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(yl),bl=function t(){if(this._quadrantSegments=t.DEFAULT_QUADRANT_SEGMENTS,this._endCapStyle=t.CAP_ROUND,this._joinStyle=t.JOIN_ROUND,this._mitreLimit=t.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this._simplifyFactor=t.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){var e=arguments[0];this.setQuadrantSegments(e)}else if(2===arguments.length){var n=arguments[0],r=arguments[1];this.setQuadrantSegments(n),this.setEndCapStyle(r)}else if(4===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3];this.setQuadrantSegments(i),this.setEndCapStyle(o),this.setJoinStyle(s),this.setMitreLimit(a)}},Il={CAP_ROUND:{configurable:!0},CAP_FLAT:{configurable:!0},CAP_SQUARE:{configurable:!0},JOIN_ROUND:{configurable:!0},JOIN_MITRE:{configurable:!0},JOIN_BEVEL:{configurable:!0},DEFAULT_QUADRANT_SEGMENTS:{configurable:!0},DEFAULT_MITRE_LIMIT:{configurable:!0},DEFAULT_SIMPLIFY_FACTOR:{configurable:!0}};bl.prototype.getEndCapStyle=function(){return this._endCapStyle},bl.prototype.isSingleSided=function(){return this._isSingleSided},bl.prototype.setQuadrantSegments=function(t){this._quadrantSegments=t,0===this._quadrantSegments&&(this._joinStyle=bl.JOIN_BEVEL),this._quadrantSegments<0&&(this._joinStyle=bl.JOIN_MITRE,this._mitreLimit=Math.abs(this._quadrantSegments)),t<=0&&(this._quadrantSegments=1),this._joinStyle!==bl.JOIN_ROUND&&(this._quadrantSegments=bl.DEFAULT_QUADRANT_SEGMENTS)},bl.prototype.getJoinStyle=function(){return this._joinStyle},bl.prototype.setJoinStyle=function(t){this._joinStyle=t},bl.prototype.setSimplifyFactor=function(t){this._simplifyFactor=t<0?0:t},bl.prototype.getSimplifyFactor=function(){return this._simplifyFactor},bl.prototype.getQuadrantSegments=function(){return this._quadrantSegments},bl.prototype.setEndCapStyle=function(t){this._endCapStyle=t},bl.prototype.getMitreLimit=function(){return this._mitreLimit},bl.prototype.setMitreLimit=function(t){this._mitreLimit=t},bl.prototype.setSingleSided=function(t){this._isSingleSided=t},bl.prototype.interfaces_=function(){return[]},bl.prototype.getClass=function(){return bl},bl.bufferDistanceError=function(t){var e=Math.PI/2/t;return 1-Math.cos(e/2)},Il.CAP_ROUND.get=function(){return 1},Il.CAP_FLAT.get=function(){return 2},Il.CAP_SQUARE.get=function(){return 3},Il.JOIN_ROUND.get=function(){return 1},Il.JOIN_MITRE.get=function(){return 2},Il.JOIN_BEVEL.get=function(){return 3},Il.DEFAULT_QUADRANT_SEGMENTS.get=function(){return 8},Il.DEFAULT_MITRE_LIMIT.get=function(){return 5},Il.DEFAULT_SIMPLIFY_FACTOR.get=function(){return.01},Object.defineProperties(bl,Il);var Nl=function(t){this._distanceTol=null,this._isDeleted=null,this._angleOrientation=sc.COUNTERCLOCKWISE,this._inputLine=t||null},Cl={INIT:{configurable:!0},DELETE:{configurable:!0},KEEP:{configurable:!0},NUM_PTS_TO_CHECK:{configurable:!0}};Nl.prototype.isDeletable=function(t,e,n,r){var i=this._inputLine[t],o=this._inputLine[e],s=this._inputLine[n];return!!this.isConcave(i,o,s)&&(!!this.isShallow(i,o,s,r)&&this.isShallowSampled(i,o,t,n,r))},Nl.prototype.deleteShallowConcavities=function(){for(var t=1,e=this.findNextNonDeletedIndex(t),n=this.findNextNonDeletedIndex(e),r=!1;n<this._inputLine.length;){var i=!1;this.isDeletable(t,e,n,this._distanceTol)&&(this._isDeleted[e]=Nl.DELETE,i=!0,r=!0),t=i?n:e,e=this.findNextNonDeletedIndex(t),n=this.findNextNonDeletedIndex(e)}return r},Nl.prototype.isShallowConcavity=function(t,e,n,r){if(!(sc.computeOrientation(t,e,n)===this._angleOrientation))return!1;return sc.distancePointLine(e,t,n)<r},Nl.prototype.isShallowSampled=function(t,e,n,r,i){var o=Math.trunc((r-n)/Nl.NUM_PTS_TO_CHECK);o<=0&&(o=1);for(var s=n;s<r;s+=o)if(!this.isShallow(t,e,this._inputLine[s],i))return!1;return!0},Nl.prototype.isConcave=function(t,e,n){var r=sc.computeOrientation(t,e,n)===this._angleOrientation;return r},Nl.prototype.simplify=function(t){this._distanceTol=Math.abs(t),t<0&&(this._angleOrientation=sc.CLOCKWISE),this._isDeleted=new Array(this._inputLine.length).fill(null);var e=!1;do{e=this.deleteShallowConcavities()}while(e);return this.collapseLine()},Nl.prototype.findNextNonDeletedIndex=function(t){for(var e=t+1;e<this._inputLine.length&&this._isDeleted[e]===Nl.DELETE;)e++;return e},Nl.prototype.isShallow=function(t,e,n,r){return sc.distancePointLine(e,t,n)<r},Nl.prototype.collapseLine=function(){for(var t=new Nc,e=0;e<this._inputLine.length;e++)this._isDeleted[e]!==Nl.DELETE&&t.add(this._inputLine[e]);return t.toCoordinateArray()},Nl.prototype.interfaces_=function(){return[]},Nl.prototype.getClass=function(){return Nl},Nl.simplify=function(t,e){return new Nl(t).simplify(e)},Cl.INIT.get=function(){return 0},Cl.DELETE.get=function(){return 1},Cl.KEEP.get=function(){return 1},Cl.NUM_PTS_TO_CHECK.get=function(){return 10},Object.defineProperties(Nl,Cl);var Sl=function(){this._ptList=null,this._precisionModel=null,this._minimimVertexDistance=0,this._ptList=new bc},Ml={COORDINATE_ARRAY_TYPE:{configurable:!0}};Sl.prototype.getCoordinates=function(){return this._ptList.toArray(Sl.COORDINATE_ARRAY_TYPE)},Sl.prototype.setPrecisionModel=function(t){this._precisionModel=t},Sl.prototype.addPt=function(t){var e=new bu(t);if(this._precisionModel.makePrecise(e),this.isRedundant(e))return null;this._ptList.add(e)},Sl.prototype.revere=function(){},Sl.prototype.addPts=function(t,e){if(e)for(var n=0;n<t.length;n++)this.addPt(t[n]);else for(var r=t.length-1;r>=0;r--)this.addPt(t[r])},Sl.prototype.isRedundant=function(t){if(this._ptList.size()<1)return!1;var e=this._ptList.get(this._ptList.size()-1);return t.distance(e)<this._minimimVertexDistance},Sl.prototype.toString=function(){return(new _h).createLineString(this.getCoordinates()).toString()},Sl.prototype.closeRing=function(){if(this._ptList.size()<1)return null;var t=new bu(this._ptList.get(0)),e=this._ptList.get(this._ptList.size()-1);if(t.equals(e))return null;this._ptList.add(t)},Sl.prototype.setMinimumVertexDistance=function(t){this._minimimVertexDistance=t},Sl.prototype.interfaces_=function(){return[]},Sl.prototype.getClass=function(){return Sl},Ml.COORDINATE_ARRAY_TYPE.get=function(){return new Array(0).fill(null)},Object.defineProperties(Sl,Ml);var Ll=function(){},Pl={PI_TIMES_2:{configurable:!0},PI_OVER_2:{configurable:!0},PI_OVER_4:{configurable:!0},COUNTERCLOCKWISE:{configurable:!0},CLOCKWISE:{configurable:!0},NONE:{configurable:!0}};Ll.prototype.interfaces_=function(){return[]},Ll.prototype.getClass=function(){return Ll},Ll.toDegrees=function(t){return 180*t/Math.PI},Ll.normalize=function(t){for(;t>Math.PI;)t-=Ll.PI_TIMES_2;for(;t<=-Math.PI;)t+=Ll.PI_TIMES_2;return t},Ll.angle=function(){if(1===arguments.length){var t=arguments[0];return Math.atan2(t.y,t.x)}if(2===arguments.length){var e=arguments[0],n=arguments[1],r=n.x-e.x,i=n.y-e.y;return Math.atan2(i,r)}},Ll.isAcute=function(t,e,n){var r=t.x-e.x,i=t.y-e.y;return r*(n.x-e.x)+i*(n.y-e.y)>0},Ll.isObtuse=function(t,e,n){var r=t.x-e.x,i=t.y-e.y;return r*(n.x-e.x)+i*(n.y-e.y)<0},Ll.interiorAngle=function(t,e,n){var r=Ll.angle(e,t),i=Ll.angle(e,n);return Math.abs(i-r)},Ll.normalizePositive=function(t){if(t<0){for(;t<0;)t+=Ll.PI_TIMES_2;t>=Ll.PI_TIMES_2&&(t=0)}else{for(;t>=Ll.PI_TIMES_2;)t-=Ll.PI_TIMES_2;t<0&&(t=0)}return t},Ll.angleBetween=function(t,e,n){var r=Ll.angle(e,t),i=Ll.angle(e,n);return Ll.diff(r,i)},Ll.diff=function(t,e){var n=null;return(n=t<e?e-t:t-e)>Math.PI&&(n=2*Math.PI-n),n},Ll.toRadians=function(t){return t*Math.PI/180},Ll.getTurn=function(t,e){var n=Math.sin(e-t);return n>0?Ll.COUNTERCLOCKWISE:n<0?Ll.CLOCKWISE:Ll.NONE},Ll.angleBetweenOriented=function(t,e,n){var r=Ll.angle(e,t),i=Ll.angle(e,n)-r;return i<=-Math.PI?i+Ll.PI_TIMES_2:i>Math.PI?i-Ll.PI_TIMES_2:i},Pl.PI_TIMES_2.get=function(){return 2*Math.PI},Pl.PI_OVER_2.get=function(){return Math.PI/2},Pl.PI_OVER_4.get=function(){return Math.PI/4},Pl.COUNTERCLOCKWISE.get=function(){return sc.COUNTERCLOCKWISE},Pl.CLOCKWISE.get=function(){return sc.CLOCKWISE},Pl.NONE.get=function(){return sc.COLLINEAR},Object.defineProperties(Ll,Pl);var Ol=function t(){this._maxCurveSegmentError=0,this._filletAngleQuantum=null,this._closingSegLengthFactor=1,this._segList=null,this._distance=0,this._precisionModel=null,this._bufParams=null,this._li=null,this._s0=null,this._s1=null,this._s2=null,this._seg0=new gl,this._seg1=new gl,this._offset0=new gl,this._offset1=new gl,this._side=0,this._hasNarrowConcaveAngle=!1;var e=arguments[0],n=arguments[1],r=arguments[2];this._precisionModel=e,this._bufParams=n,this._li=new rc,this._filletAngleQuantum=Math.PI/2/n.getQuadrantSegments(),n.getQuadrantSegments()>=8&&n.getJoinStyle()===bl.JOIN_ROUND&&(this._closingSegLengthFactor=t.MAX_CLOSING_SEG_LEN_FACTOR),this.init(r)},Rl={OFFSET_SEGMENT_SEPARATION_FACTOR:{configurable:!0},INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:!0},CURVE_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:!0},MAX_CLOSING_SEG_LEN_FACTOR:{configurable:!0}};Ol.prototype.addNextSegment=function(t,e){if(this._s0=this._s1,this._s1=this._s2,this._s2=t,this._seg0.setCoordinates(this._s0,this._s1),this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0),this._seg1.setCoordinates(this._s1,this._s2),this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1),this._s1.equals(this._s2))return null;var n=sc.computeOrientation(this._s0,this._s1,this._s2),r=n===sc.CLOCKWISE&&this._side===Nh.LEFT||n===sc.COUNTERCLOCKWISE&&this._side===Nh.RIGHT;0===n?this.addCollinear(e):r?this.addOutsideTurn(n,e):this.addInsideTurn(n,e)},Ol.prototype.addLineEndCap=function(t,e){var n=new gl(t,e),r=new gl;this.computeOffsetSegment(n,Nh.LEFT,this._distance,r);var i=new gl;this.computeOffsetSegment(n,Nh.RIGHT,this._distance,i);var o=e.x-t.x,s=e.y-t.y,a=Math.atan2(s,o);switch(this._bufParams.getEndCapStyle()){case bl.CAP_ROUND:this._segList.addPt(r.p1),this.addFilletArc(e,a+Math.PI/2,a-Math.PI/2,sc.CLOCKWISE,this._distance),this._segList.addPt(i.p1);break;case bl.CAP_FLAT:this._segList.addPt(r.p1),this._segList.addPt(i.p1);break;case bl.CAP_SQUARE:var u=new bu;u.x=Math.abs(this._distance)*Math.cos(a),u.y=Math.abs(this._distance)*Math.sin(a);var c=new bu(r.p1.x+u.x,r.p1.y+u.y),h=new bu(i.p1.x+u.x,i.p1.y+u.y);this._segList.addPt(c),this._segList.addPt(h)}},Ol.prototype.getCoordinates=function(){return this._segList.getCoordinates()},Ol.prototype.addMitreJoin=function(t,e,n,r){var i=!0,o=null;try{o=Uu.intersection(e.p0,e.p1,n.p0,n.p1);(r<=0?1:o.distance(t)/Math.abs(r))>this._bufParams.getMitreLimit()&&(i=!1)}catch(t){if(!(t instanceof ju))throw t;o=new bu(0,0),i=!1}i?this._segList.addPt(o):this.addLimitedMitreJoin(e,n,r,this._bufParams.getMitreLimit())},Ol.prototype.addFilletCorner=function(t,e,n,r,i){var o=e.x-t.x,s=e.y-t.y,a=Math.atan2(s,o),u=n.x-t.x,c=n.y-t.y,h=Math.atan2(c,u);r===sc.CLOCKWISE?a<=h&&(a+=2*Math.PI):a>=h&&(a-=2*Math.PI),this._segList.addPt(e),this.addFilletArc(t,a,h,r,i),this._segList.addPt(n)},Ol.prototype.addOutsideTurn=function(t,e){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*Ol.OFFSET_SEGMENT_SEPARATION_FACTOR)return this._segList.addPt(this._offset0.p1),null;this._bufParams.getJoinStyle()===bl.JOIN_MITRE?this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance):this._bufParams.getJoinStyle()===bl.JOIN_BEVEL?this.addBevelJoin(this._offset0,this._offset1):(e&&this._segList.addPt(this._offset0.p1),this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,t,this._distance),this._segList.addPt(this._offset1.p0))},Ol.prototype.createSquare=function(t){this._segList.addPt(new bu(t.x+this._distance,t.y+this._distance)),this._segList.addPt(new bu(t.x+this._distance,t.y-this._distance)),this._segList.addPt(new bu(t.x-this._distance,t.y-this._distance)),this._segList.addPt(new bu(t.x-this._distance,t.y+this._distance)),this._segList.closeRing()},Ol.prototype.addSegments=function(t,e){this._segList.addPts(t,e)},Ol.prototype.addFirstSegment=function(){this._segList.addPt(this._offset1.p0)},Ol.prototype.addLastSegment=function(){this._segList.addPt(this._offset1.p1)},Ol.prototype.initSideSegments=function(t,e,n){this._s1=t,this._s2=e,this._side=n,this._seg1.setCoordinates(t,e),this.computeOffsetSegment(this._seg1,n,this._distance,this._offset1)},Ol.prototype.addLimitedMitreJoin=function(t,e,n,r){var i=this._seg0.p1,o=Ll.angle(i,this._seg0.p0),s=Ll.angleBetweenOriented(this._seg0.p0,i,this._seg1.p1)/2,a=Ll.normalize(o+s),u=Ll.normalize(a+Math.PI),c=r*n,h=n-c*Math.abs(Math.sin(s)),l=i.x+c*Math.cos(u),p=i.y+c*Math.sin(u),f=new bu(l,p),g=new gl(i,f),d=g.pointAlongOffset(1,h),y=g.pointAlongOffset(1,-h);this._side===Nh.LEFT?(this._segList.addPt(d),this._segList.addPt(y)):(this._segList.addPt(y),this._segList.addPt(d))},Ol.prototype.computeOffsetSegment=function(t,e,n,r){var i=e===Nh.LEFT?1:-1,o=t.p1.x-t.p0.x,s=t.p1.y-t.p0.y,a=Math.sqrt(o*o+s*s),u=i*n*o/a,c=i*n*s/a;r.p0.x=t.p0.x-c,r.p0.y=t.p0.y+u,r.p1.x=t.p1.x-c,r.p1.y=t.p1.y+u},Ol.prototype.addFilletArc=function(t,e,n,r,i){var o=r===sc.CLOCKWISE?-1:1,s=Math.abs(e-n),a=Math.trunc(s/this._filletAngleQuantum+.5);if(a<1)return null;for(var u=s/a,c=0,h=new bu;c<s;){var l=e+o*c;h.x=t.x+i*Math.cos(l),h.y=t.y+i*Math.sin(l),this._segList.addPt(h),c+=u}},Ol.prototype.addInsideTurn=function(t,e){if(this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1),this._li.hasIntersection())this._segList.addPt(this._li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this._offset0.p1.distance(this._offset1.p0)<this._distance*Ol.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this._segList.addPt(this._offset0.p1);else{if(this._segList.addPt(this._offset0.p1),this._closingSegLengthFactor>0){var n=new bu((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(n);var r=new bu((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(r)}else this._segList.addPt(this._s1);this._segList.addPt(this._offset1.p0)}},Ol.prototype.createCircle=function(t){var e=new bu(t.x+this._distance,t.y);this._segList.addPt(e),this.addFilletArc(t,0,2*Math.PI,-1,this._distance),this._segList.closeRing()},Ol.prototype.addBevelJoin=function(t,e){this._segList.addPt(t.p1),this._segList.addPt(e.p0)},Ol.prototype.init=function(t){this._distance=t,this._maxCurveSegmentError=t*(1-Math.cos(this._filletAngleQuantum/2)),this._segList=new Sl,this._segList.setPrecisionModel(this._precisionModel),this._segList.setMinimumVertexDistance(t*Ol.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)},Ol.prototype.addCollinear=function(t){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2);this._li.getIntersectionNum()>=2&&(this._bufParams.getJoinStyle()===bl.JOIN_BEVEL||this._bufParams.getJoinStyle()===bl.JOIN_MITRE?(t&&this._segList.addPt(this._offset0.p1),this._segList.addPt(this._offset1.p0)):this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,sc.CLOCKWISE,this._distance))},Ol.prototype.closeRing=function(){this._segList.closeRing()},Ol.prototype.hasNarrowConcaveAngle=function(){return this._hasNarrowConcaveAngle},Ol.prototype.interfaces_=function(){return[]},Ol.prototype.getClass=function(){return Ol},Rl.OFFSET_SEGMENT_SEPARATION_FACTOR.get=function(){return.001},Rl.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return.001},Rl.CURVE_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return 1e-6},Rl.MAX_CLOSING_SEG_LEN_FACTOR.get=function(){return 80},Object.defineProperties(Ol,Rl);var Tl=function(){this._distance=0,this._precisionModel=null,this._bufParams=null;var t=arguments[0],e=arguments[1];this._precisionModel=t,this._bufParams=e};Tl.prototype.getOffsetCurve=function(t,e){if(this._distance=e,0===e)return null;var n=e<0,r=Math.abs(e),i=this.getSegGen(r);t.length<=1?this.computePointCurve(t[0],i):this.computeOffsetCurve(t,n,i);var o=i.getCoordinates();return n&&Cc.reverse(o),o},Tl.prototype.computeSingleSidedBufferCurve=function(t,e,n){var r=this.simplifyTolerance(this._distance);if(e){n.addSegments(t,!0);var i=Nl.simplify(t,-r),o=i.length-1;n.initSideSegments(i[o],i[o-1],Nh.LEFT),n.addFirstSegment();for(var s=o-2;s>=0;s--)n.addNextSegment(i[s],!0)}else{n.addSegments(t,!1);var a=Nl.simplify(t,r),u=a.length-1;n.initSideSegments(a[0],a[1],Nh.LEFT),n.addFirstSegment();for(var c=2;c<=u;c++)n.addNextSegment(a[c],!0)}n.addLastSegment(),n.closeRing()},Tl.prototype.computeRingBufferCurve=function(t,e,n){var r=this.simplifyTolerance(this._distance);e===Nh.RIGHT&&(r=-r);var i=Nl.simplify(t,r),o=i.length-1;n.initSideSegments(i[o-1],i[0],e);for(var s=1;s<=o;s++){var a=1!==s;n.addNextSegment(i[s],a)}n.closeRing()},Tl.prototype.computeLineBufferCurve=function(t,e){var n=this.simplifyTolerance(this._distance),r=Nl.simplify(t,n),i=r.length-1;e.initSideSegments(r[0],r[1],Nh.LEFT);for(var o=2;o<=i;o++)e.addNextSegment(r[o],!0);e.addLastSegment(),e.addLineEndCap(r[i-1],r[i]);var s=Nl.simplify(t,-n),a=s.length-1;e.initSideSegments(s[a],s[a-1],Nh.LEFT);for(var u=a-2;u>=0;u--)e.addNextSegment(s[u],!0);e.addLastSegment(),e.addLineEndCap(s[1],s[0]),e.closeRing()},Tl.prototype.computePointCurve=function(t,e){switch(this._bufParams.getEndCapStyle()){case bl.CAP_ROUND:e.createCircle(t);break;case bl.CAP_SQUARE:e.createSquare(t)}},Tl.prototype.getLineCurve=function(t,e){if(this._distance=e,e<0&&!this._bufParams.isSingleSided())return null;if(0===e)return null;var n=Math.abs(e),r=this.getSegGen(n);if(t.length<=1)this.computePointCurve(t[0],r);else if(this._bufParams.isSingleSided()){var i=e<0;this.computeSingleSidedBufferCurve(t,i,r)}else this.computeLineBufferCurve(t,r);return r.getCoordinates()},Tl.prototype.getBufferParameters=function(){return this._bufParams},Tl.prototype.simplifyTolerance=function(t){return t*this._bufParams.getSimplifyFactor()},Tl.prototype.getRingCurve=function(t,e,n){if(this._distance=n,t.length<=2)return this.getLineCurve(t,n);if(0===n)return Tl.copyCoordinates(t);var r=this.getSegGen(n);return this.computeRingBufferCurve(t,e,r),r.getCoordinates()},Tl.prototype.computeOffsetCurve=function(t,e,n){var r=this.simplifyTolerance(this._distance);if(e){var i=Nl.simplify(t,-r),o=i.length-1;n.initSideSegments(i[o],i[o-1],Nh.LEFT),n.addFirstSegment();for(var s=o-2;s>=0;s--)n.addNextSegment(i[s],!0)}else{var a=Nl.simplify(t,r),u=a.length-1;n.initSideSegments(a[0],a[1],Nh.LEFT),n.addFirstSegment();for(var c=2;c<=u;c++)n.addNextSegment(a[c],!0)}n.addLastSegment()},Tl.prototype.getSegGen=function(t){return new Ol(this._precisionModel,this._bufParams,t)},Tl.prototype.interfaces_=function(){return[]},Tl.prototype.getClass=function(){return Tl},Tl.copyCoordinates=function(t){for(var e=new Array(t.length).fill(null),n=0;n<e.length;n++)e[n]=new bu(t[n]);return e};var Al=function(){this._subgraphs=null,this._seg=new gl,this._cga=new sc;var t=arguments[0];this._subgraphs=t},Dl={DepthSegment:{configurable:!0}};Al.prototype.findStabbedSegments=function(){if(1===arguments.length){for(var t=arguments[0],e=new bc,n=this._subgraphs.iterator();n.hasNext();){var r=n.next(),i=r.getEnvelope();t.y<i.getMinY()||t.y>i.getMaxY()||this.findStabbedSegments(t,r.getDirectedEdges(),e)}return e}if(3===arguments.length)if(Lu(arguments[2],wc)&&arguments[0]instanceof bu&&arguments[1]instanceof jh)for(var o=arguments[0],s=arguments[1],a=arguments[2],u=s.getEdge().getCoordinates(),c=0;c<u.length-1;c++){this._seg.p0=u[c],this._seg.p1=u[c+1],this._seg.p0.y>this._seg.p1.y&&this._seg.reverse();if(!(Math.max(this._seg.p0.x,this._seg.p1.x)<o.x)&&!(this._seg.isHorizontal()||o.y<this._seg.p0.y||o.y>this._seg.p1.y||sc.computeOrientation(this._seg.p0,this._seg.p1,o)===sc.RIGHT)){var h=s.getDepth(Nh.LEFT);this._seg.p0.equals(u[c])||(h=s.getDepth(Nh.RIGHT));var l=new Fl(this._seg,h);a.add(l)}}else if(Lu(arguments[2],wc)&&arguments[0]instanceof bu&&Lu(arguments[1],wc))for(var p=arguments[0],f=arguments[1],g=arguments[2],d=f.iterator();d.hasNext();){var y=d.next();y.isForward()&&this.findStabbedSegments(p,y,g)}},Al.prototype.getDepth=function(t){var e=this.findStabbedSegments(t);if(0===e.size())return 0;return $h.min(e)._leftDepth},Al.prototype.interfaces_=function(){return[]},Al.prototype.getClass=function(){return Al},Dl.DepthSegment.get=function(){return Fl},Object.defineProperties(Al,Dl);var Fl=function(){this._upwardSeg=null,this._leftDepth=null;var t=arguments[0],e=arguments[1];this._upwardSeg=new gl(t),this._leftDepth=e};Fl.prototype.compareTo=function(t){var e=t;if(this._upwardSeg.minX()>=e._upwardSeg.maxX())return 1;if(this._upwardSeg.maxX()<=e._upwardSeg.minX())return-1;var n=this._upwardSeg.orientationIndex(e._upwardSeg);return 0!==n?n:0!=(n=-1*e._upwardSeg.orientationIndex(this._upwardSeg))?n:this._upwardSeg.compareTo(e._upwardSeg)},Fl.prototype.compareX=function(t,e){var n=t.p0.compareTo(e.p0);return 0!==n?n:t.p1.compareTo(e.p1)},Fl.prototype.toString=function(){return this._upwardSeg.toString()},Fl.prototype.interfaces_=function(){return[xu]},Fl.prototype.getClass=function(){return Fl};var ql=function(t,e,n){this.p0=t||null,this.p1=e||null,this.p2=n||null};ql.prototype.area=function(){return ql.area(this.p0,this.p1,this.p2)},ql.prototype.signedArea=function(){return ql.signedArea(this.p0,this.p1,this.p2)},ql.prototype.interpolateZ=function(t){if(null===t)throw new _u(\"Supplied point is null.\");return ql.interpolateZ(t,this.p0,this.p1,this.p2)},ql.prototype.longestSideLength=function(){return ql.longestSideLength(this.p0,this.p1,this.p2)},ql.prototype.isAcute=function(){return ql.isAcute(this.p0,this.p1,this.p2)},ql.prototype.circumcentre=function(){return ql.circumcentre(this.p0,this.p1,this.p2)},ql.prototype.area3D=function(){return ql.area3D(this.p0,this.p1,this.p2)},ql.prototype.centroid=function(){return ql.centroid(this.p0,this.p1,this.p2)},ql.prototype.inCentre=function(){return ql.inCentre(this.p0,this.p1,this.p2)},ql.prototype.interfaces_=function(){return[]},ql.prototype.getClass=function(){return ql},ql.area=function(t,e,n){return Math.abs(((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2)},ql.signedArea=function(t,e,n){return((n.x-t.x)*(e.y-t.y)-(e.x-t.x)*(n.y-t.y))/2},ql.det=function(t,e,n,r){return t*r-e*n},ql.interpolateZ=function(t,e,n,r){var i=e.x,o=e.y,s=n.x-i,a=r.x-i,u=n.y-o,c=r.y-o,h=s*c-a*u,l=t.x-i,p=t.y-o,f=(c*l-a*p)/h,g=(-u*l+s*p)/h;return e.z+f*(n.z-e.z)+g*(r.z-e.z)},ql.longestSideLength=function(t,e,n){var r=t.distance(e),i=e.distance(n),o=n.distance(t),s=r;return i>s&&(s=i),o>s&&(s=o),s},ql.isAcute=function(t,e,n){return!!Ll.isAcute(t,e,n)&&(!!Ll.isAcute(e,n,t)&&!!Ll.isAcute(n,t,e))},ql.circumcentre=function(t,e,n){var r=n.x,i=n.y,o=t.x-r,s=t.y-i,a=e.x-r,u=e.y-i,c=2*ql.det(o,s,a,u),h=ql.det(s,o*o+s*s,u,a*a+u*u),l=ql.det(o,o*o+s*s,a,a*a+u*u);return new bu(r-h/c,i+l/c)},ql.perpendicularBisector=function(t,e){var n=e.x-t.x,r=e.y-t.y,i=new Uu(t.x+n/2,t.y+r/2,1),o=new Uu(t.x-r+n/2,t.y+n+r/2,1);return new Uu(i,o)},ql.angleBisector=function(t,e,n){var r=e.distance(t),i=r/(r+e.distance(n)),o=n.x-t.x,s=n.y-t.y;return new bu(t.x+i*o,t.y+i*s)},ql.area3D=function(t,e,n){var r=e.x-t.x,i=e.y-t.y,o=e.z-t.z,s=n.x-t.x,a=n.y-t.y,u=n.z-t.z,c=i*u-o*a,h=o*s-r*u,l=r*a-i*s,p=c*c+h*h+l*l,f=Math.sqrt(p)/2;return f},ql.centroid=function(t,e,n){var r=(t.x+e.x+n.x)/3,i=(t.y+e.y+n.y)/3;return new bu(r,i)},ql.inCentre=function(t,e,n){var r=e.distance(n),i=t.distance(n),o=t.distance(e),s=r+i+o,a=(r*t.x+i*e.x+o*n.x)/s,u=(r*t.y+i*e.y+o*n.y)/s;return new bu(a,u)};var Gl=function(){this._inputGeom=null,this._distance=null,this._curveBuilder=null,this._curveList=new bc;var t=arguments[0],e=arguments[1],n=arguments[2];this._inputGeom=t,this._distance=e,this._curveBuilder=n};Gl.prototype.addPoint=function(t){if(this._distance<=0)return null;var e=t.getCoordinates(),n=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(n,Su.EXTERIOR,Su.INTERIOR)},Gl.prototype.addPolygon=function(t){var e=this._distance,n=Nh.LEFT;this._distance<0&&(e=-this._distance,n=Nh.RIGHT);var r=t.getExteriorRing(),i=Cc.removeRepeatedPoints(r.getCoordinates());if(this._distance<0&&this.isErodedCompletely(r,this._distance))return null;if(this._distance<=0&&i.length<3)return null;this.addPolygonRing(i,e,n,Su.EXTERIOR,Su.INTERIOR);for(var o=0;o<t.getNumInteriorRing();o++){var s=t.getInteriorRingN(o),a=Cc.removeRepeatedPoints(s.getCoordinates());this._distance>0&&this.isErodedCompletely(s,-this._distance)||this.addPolygonRing(a,e,Nh.opposite(n),Su.INTERIOR,Su.EXTERIOR)}},Gl.prototype.isTriangleErodedCompletely=function(t,e){var n=new ql(t[0],t[1],t[2]),r=n.inCentre();return sc.distancePointLine(r,n.p0,n.p1)<Math.abs(e)},Gl.prototype.addLineString=function(t){if(this._distance<=0&&!this._curveBuilder.getBufferParameters().isSingleSided())return null;var e=Cc.removeRepeatedPoints(t.getCoordinates()),n=this._curveBuilder.getLineCurve(e,this._distance);this.addCurve(n,Su.EXTERIOR,Su.INTERIOR)},Gl.prototype.addCurve=function(t,e,n){if(null===t||t.length<2)return null;var r=new fl(t,new Rh(0,Su.BOUNDARY,e,n));this._curveList.add(r)},Gl.prototype.getCurves=function(){return this.add(this._inputGeom),this._curveList},Gl.prototype.addPolygonRing=function(t,e,n,r,i){if(0===e&&t.length<eh.MINIMUM_VALID_SIZE)return null;var o=r,s=i;t.length>=eh.MINIMUM_VALID_SIZE&&sc.isCCW(t)&&(o=i,s=r,n=Nh.opposite(n));var a=this._curveBuilder.getRingCurve(t,n,e);this.addCurve(a,o,s)},Gl.prototype.add=function(t){if(t.isEmpty())return null;t instanceof $c?this.addPolygon(t):t instanceof Jc?this.addLineString(t):t instanceof Kc?this.addPoint(t):t instanceof th?this.addCollection(t):t instanceof Xc?this.addCollection(t):t instanceof nh?this.addCollection(t):t instanceof jc&&this.addCollection(t)},Gl.prototype.isErodedCompletely=function(t,e){var n=t.getCoordinates();if(n.length<4)return e<0;if(4===n.length)return this.isTriangleErodedCompletely(n,e);var r=t.getEnvelopeInternal(),i=Math.min(r.getHeight(),r.getWidth());return e<0&&2*Math.abs(e)>i},Gl.prototype.addCollection=function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}},Gl.prototype.interfaces_=function(){return[]},Gl.prototype.getClass=function(){return Gl};var Bl=function(){};Bl.prototype.locate=function(t){},Bl.prototype.interfaces_=function(){return[]},Bl.prototype.getClass=function(){return Bl};var kl=function(){this._parent=null,this._atStart=null,this._max=null,this._index=null,this._subcollectionIterator=null;var t=arguments[0];this._parent=t,this._atStart=!0,this._index=0,this._max=t.getNumGeometries()};kl.prototype.next=function(){if(this._atStart)return this._atStart=!1,kl.isAtomic(this._parent)&&this._index++,this._parent;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return this._subcollectionIterator.next();this._subcollectionIterator=null}if(this._index>=this._max)throw new Pi;var t=this._parent.getGeometryN(this._index++);return t instanceof jc?(this._subcollectionIterator=new kl(t),this._subcollectionIterator.next()):t},kl.prototype.remove=function(){throw new Error(this.getClass().getName())},kl.prototype.hasNext=function(){if(this._atStart)return!0;if(null!==this._subcollectionIterator){if(this._subcollectionIterator.hasNext())return!0;this._subcollectionIterator=null}return!(this._index>=this._max)},kl.prototype.interfaces_=function(){return[Ec]},kl.prototype.getClass=function(){return kl},kl.isAtomic=function(t){return!(t instanceof jc)};var zl=function(){this._geom=null;var t=arguments[0];this._geom=t};zl.prototype.locate=function(t){return zl.locate(t,this._geom)},zl.prototype.interfaces_=function(){return[Bl]},zl.prototype.getClass=function(){return zl},zl.isPointInRing=function(t,e){return!!e.getEnvelopeInternal().intersects(t)&&sc.isPointInRing(t,e.getCoordinates())},zl.containsPointInPolygon=function(t,e){if(e.isEmpty())return!1;var n=e.getExteriorRing();if(!zl.isPointInRing(t,n))return!1;for(var r=0;r<e.getNumInteriorRing();r++){var i=e.getInteriorRingN(r);if(zl.isPointInRing(t,i))return!1}return!0},zl.containsPoint=function(t,e){if(e instanceof $c)return zl.containsPointInPolygon(t,e);if(e instanceof jc)for(var n=new kl(e);n.hasNext();){var r=n.next();if(r!==e&&zl.containsPoint(t,r))return!0}return!1},zl.locate=function(t,e){return e.isEmpty()?Su.EXTERIOR:zl.containsPoint(t,e)?Su.INTERIOR:Su.EXTERIOR};var jl=function(){this._edgeMap=new Gi,this._edgeList=null,this._ptInAreaLocation=[Su.NONE,Su.NONE]};jl.prototype.getNextCW=function(t){this.getEdges();var e=this._edgeList.indexOf(t),n=e-1;return 0===e&&(n=this._edgeList.size()-1),this._edgeList.get(n)},jl.prototype.propagateSideLabels=function(t){for(var e=Su.NONE,n=this.iterator();n.hasNext();){var r=n.next().getLabel();r.isArea(t)&&r.getLocation(t,Nh.LEFT)!==Su.NONE&&(e=r.getLocation(t,Nh.LEFT))}if(e===Su.NONE)return null;for(var i=e,o=this.iterator();o.hasNext();){var s=o.next(),a=s.getLabel();if(a.getLocation(t,Nh.ON)===Su.NONE&&a.setLocation(t,Nh.ON,i),a.isArea(t)){var u=a.getLocation(t,Nh.LEFT),c=a.getLocation(t,Nh.RIGHT);if(c!==Su.NONE){if(c!==i)throw new Mh(\"side location conflict\",s.getCoordinate());u===Su.NONE&&tc.shouldNeverReachHere(\"found single null side (at \"+s.getCoordinate()+\")\"),i=u}else tc.isTrue(a.getLocation(t,Nh.LEFT)===Su.NONE,\"found single null side\"),a.setLocation(t,Nh.RIGHT,i),a.setLocation(t,Nh.LEFT,i)}}},jl.prototype.getCoordinate=function(){var t=this.iterator();if(!t.hasNext())return null;return t.next().getCoordinate()},jl.prototype.print=function(t){Xu.out.println(\"EdgeEndStar:   \"+this.getCoordinate());for(var e=this.iterator();e.hasNext();){e.next().print(t)}},jl.prototype.isAreaLabelsConsistent=function(t){return this.computeEdgeEndLabels(t.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)},jl.prototype.checkAreaLabelsConsistent=function(t){var e=this.getEdges();if(e.size()<=0)return!0;var n=e.size()-1,r=e.get(n).getLabel().getLocation(t,Nh.LEFT);tc.isTrue(r!==Su.NONE,\"Found unlabelled area edge\");for(var i=r,o=this.iterator();o.hasNext();){var s=o.next().getLabel();tc.isTrue(s.isArea(t),\"Found non-area edge\");var a=s.getLocation(t,Nh.LEFT),u=s.getLocation(t,Nh.RIGHT);if(a===u)return!1;if(u!==i)return!1;i=a}return!0},jl.prototype.findIndex=function(t){this.iterator();for(var e=0;e<this._edgeList.size();e++){if(this._edgeList.get(e)===t)return e}return-1},jl.prototype.iterator=function(){return this.getEdges().iterator()},jl.prototype.getEdges=function(){return null===this._edgeList&&(this._edgeList=new bc(this._edgeMap.values())),this._edgeList},jl.prototype.getLocation=function(t,e,n){return this._ptInAreaLocation[t]===Su.NONE&&(this._ptInAreaLocation[t]=zl.locate(e,n[t].getGeometry())),this._ptInAreaLocation[t]},jl.prototype.toString=function(){var t=new Ru;t.append(\"EdgeEndStar:   \"+this.getCoordinate()),t.append(\"\\n\");for(var e=this.iterator();e.hasNext();){var n=e.next();t.append(n),t.append(\"\\n\")}return t.toString()},jl.prototype.computeEdgeEndLabels=function(t){for(var e=this.iterator();e.hasNext();){e.next().computeLabel(t)}},jl.prototype.computeLabelling=function(t){this.computeEdgeEndLabels(t[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);for(var e=[!1,!1],n=this.iterator();n.hasNext();)for(var r=n.next().getLabel(),i=0;i<2;i++)r.isLine(i)&&r.getLocation(i)===Su.BOUNDARY&&(e[i]=!0);for(var o=this.iterator();o.hasNext();)for(var s=o.next(),a=s.getLabel(),u=0;u<2;u++)if(a.isAnyNull(u)){var c=Su.NONE;if(e[u])c=Su.EXTERIOR;else{var h=s.getCoordinate();c=this.getLocation(u,h,t)}a.setAllLocationsIfNull(u,c)}},jl.prototype.getDegree=function(){return this._edgeMap.size()},jl.prototype.insertEdgeEnd=function(t,e){this._edgeMap.put(t,e),this._edgeList=null},jl.prototype.interfaces_=function(){return[]},jl.prototype.getClass=function(){return jl};var Xl=function(t){function e(){t.call(this),this._resultAreaEdgeList=null,this._label=null,this._SCANNING_FOR_INCOMING=1,this._LINKING_TO_OUTGOING=2}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.linkResultDirectedEdges=function(){this.getResultAreaEdges();for(var t=null,e=null,n=this._SCANNING_FOR_INCOMING,r=0;r<this._resultAreaEdgeList.size();r++){var i=this._resultAreaEdgeList.get(r),o=i.getSym();if(i.getLabel().isArea())switch(null===t&&i.isInResult()&&(t=i),n){case this._SCANNING_FOR_INCOMING:if(!o.isInResult())continue;e=o,n=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(!i.isInResult())continue;e.setNext(i),n=this._SCANNING_FOR_INCOMING}}if(n===this._LINKING_TO_OUTGOING){if(null===t)throw new Mh(\"no outgoing dirEdge found\",this.getCoordinate());tc.isTrue(t.isInResult(),\"unable to link last incoming dirEdge\"),e.setNext(t)}},e.prototype.insert=function(t){var e=t;this.insertEdgeEnd(e,e)},e.prototype.getRightmostEdge=function(){var t=this.getEdges(),e=t.size();if(e<1)return null;var n=t.get(0);if(1===e)return n;var r=t.get(e-1),i=n.getQuadrant(),o=r.getQuadrant();return Bh.isNorthern(i)&&Bh.isNorthern(o)?n:Bh.isNorthern(i)||Bh.isNorthern(o)?0!==n.getDy()?n:0!==r.getDy()?r:(tc.shouldNeverReachHere(\"found two horizontal edges incident on node\"),null):r},e.prototype.print=function(t){Xu.out.println(\"DirectedEdgeStar: \"+this.getCoordinate());for(var e=this.iterator();e.hasNext();){var n=e.next();t.print(\"out \"),n.print(t),t.println(),t.print(\"in \"),n.getSym().print(t),t.println()}},e.prototype.getResultAreaEdges=function(){if(null!==this._resultAreaEdgeList)return this._resultAreaEdgeList;this._resultAreaEdgeList=new bc;for(var t=this.iterator();t.hasNext();){var e=t.next();(e.isInResult()||e.getSym().isInResult())&&this._resultAreaEdgeList.add(e)}return this._resultAreaEdgeList},e.prototype.updateLabelling=function(t){for(var e=this.iterator();e.hasNext();){var n=e.next().getLabel();n.setAllLocationsIfNull(0,t.getLocation(0)),n.setAllLocationsIfNull(1,t.getLocation(1))}},e.prototype.linkAllDirectedEdges=function(){this.getEdges();for(var t=null,e=null,n=this._edgeList.size()-1;n>=0;n--){var r=this._edgeList.get(n),i=r.getSym();null===e&&(e=i),null!==t&&i.setNext(t),t=r}e.setNext(t)},e.prototype.computeDepths=function(){if(1===arguments.length){var t=arguments[0],e=this.findIndex(t),n=t.getDepth(Nh.LEFT),r=t.getDepth(Nh.RIGHT),i=this.computeDepths(e+1,this._edgeList.size(),n);if(this.computeDepths(0,e,i)!==r)throw new Mh(\"depth mismatch at \"+t.getCoordinate())}else if(3===arguments.length){for(var o=arguments[0],s=arguments[1],a=arguments[2],u=o;u<s;u++){var c=this._edgeList.get(u);c.setEdgeDepths(Nh.RIGHT,a),a=c.getDepth(Nh.LEFT)}return a}},e.prototype.mergeSymLabels=function(){for(var t=this.iterator();t.hasNext();){var e=t.next();e.getLabel().merge(e.getSym().getLabel())}},e.prototype.linkMinimalDirectedEdges=function(t){for(var e=null,n=null,r=this._SCANNING_FOR_INCOMING,i=this._resultAreaEdgeList.size()-1;i>=0;i--){var o=this._resultAreaEdgeList.get(i),s=o.getSym();switch(null===e&&o.getEdgeRing()===t&&(e=o),r){case this._SCANNING_FOR_INCOMING:if(s.getEdgeRing()!==t)continue;n=s,r=this._LINKING_TO_OUTGOING;break;case this._LINKING_TO_OUTGOING:if(o.getEdgeRing()!==t)continue;n.setNextMin(o),r=this._SCANNING_FOR_INCOMING}}r===this._LINKING_TO_OUTGOING&&(tc.isTrue(null!==e,\"found null for first outgoing dirEdge\"),tc.isTrue(e.getEdgeRing()===t,\"unable to link last incoming dirEdge\"),n.setNextMin(e))},e.prototype.getOutgoingDegree=function(){if(0===arguments.length){for(var t=0,e=this.iterator();e.hasNext();){e.next().isInResult()&&t++}return t}if(1===arguments.length){for(var n=arguments[0],r=0,i=this.iterator();i.hasNext();){i.next().getEdgeRing()===n&&r++}return r}},e.prototype.getLabel=function(){return this._label},e.prototype.findCoveredLineEdges=function(){for(var t=Su.NONE,e=this.iterator();e.hasNext();){var n=e.next(),r=n.getSym();if(!n.isLineEdge()){if(n.isInResult()){t=Su.INTERIOR;break}if(r.isInResult()){t=Su.EXTERIOR;break}}}if(t===Su.NONE)return null;for(var i=t,o=this.iterator();o.hasNext();){var s=o.next(),a=s.getSym();s.isLineEdge()?s.getEdge().setCovered(i===Su.INTERIOR):(s.isInResult()&&(i=Su.EXTERIOR),a.isInResult()&&(i=Su.INTERIOR))}},e.prototype.computeLabelling=function(e){t.prototype.computeLabelling.call(this,e),this._label=new Rh(Su.NONE);for(var n=this.iterator();n.hasNext();)for(var r=n.next().getEdge().getLabel(),i=0;i<2;i++){var o=r.getLocation(i);o!==Su.INTERIOR&&o!==Su.BOUNDARY||this._label.setLocation(i,Su.INTERIOR)}},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(jl),Ul=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.createNode=function(t){return new qh(t,new Xl)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Xh),Yl=function t(){this._pts=null,this._orientation=null;var e=arguments[0];this._pts=e,this._orientation=t.orientation(e)};Yl.prototype.compareTo=function(t){var e=t;return Yl.compareOriented(this._pts,this._orientation,e._pts,e._orientation)},Yl.prototype.interfaces_=function(){return[xu]},Yl.prototype.getClass=function(){return Yl},Yl.orientation=function(t){return 1===Cc.increasingDirection(t)},Yl.compareOriented=function(t,e,n,r){for(var i=e?1:-1,o=r?1:-1,s=e?t.length:-1,a=r?n.length:-1,u=e?0:t.length-1,c=r?0:n.length-1;;){var h=t[u].compareTo(n[c]);if(0!==h)return h;var l=(u+=i)===s,p=(c+=o)===a;if(l&&!p)return-1;if(!l&&p)return 1;if(l&&p)return 0}};var Vl=function(){this._edges=new bc,this._ocaMap=new Gi};Vl.prototype.print=function(t){t.print(\"MULTILINESTRING ( \");for(var e=0;e<this._edges.size();e++){var n=this._edges.get(e);e>0&&t.print(\",\"),t.print(\"(\");for(var r=n.getCoordinates(),i=0;i<r.length;i++)i>0&&t.print(\",\"),t.print(r[i].x+\" \"+r[i].y);t.println(\")\")}t.print(\")  \")},Vl.prototype.addAll=function(t){for(var e=t.iterator();e.hasNext();)this.add(e.next())},Vl.prototype.findEdgeIndex=function(t){for(var e=0;e<this._edges.size();e++)if(this._edges.get(e).equals(t))return e;return-1},Vl.prototype.iterator=function(){return this._edges.iterator()},Vl.prototype.getEdges=function(){return this._edges},Vl.prototype.get=function(t){return this._edges.get(t)},Vl.prototype.findEqualEdge=function(t){var e=new Yl(t.getCoordinates());return this._ocaMap.get(e)},Vl.prototype.add=function(t){this._edges.add(t);var e=new Yl(t.getCoordinates());this._ocaMap.put(e,t)},Vl.prototype.interfaces_=function(){return[]},Vl.prototype.getClass=function(){return Vl};var Hl=function(){};Hl.prototype.processIntersections=function(t,e,n,r){},Hl.prototype.isDone=function(){},Hl.prototype.interfaces_=function(){return[]},Hl.prototype.getClass=function(){return Hl};var Wl=function(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._hasInterior=!1,this._properIntersectionPoint=null,this._li=null,this._isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;var t=arguments[0];this._li=t};Wl.prototype.isTrivialIntersection=function(t,e,n,r){if(t===n&&1===this._li.getIntersectionNum()){if(Wl.isAdjacentSegments(e,r))return!0;if(t.isClosed()){var i=t.size()-1;if(0===e&&r===i||0===r&&e===i)return!0}}return!1},Wl.prototype.getProperIntersectionPoint=function(){return this._properIntersectionPoint},Wl.prototype.hasProperInteriorIntersection=function(){return this._hasProperInterior},Wl.prototype.getLineIntersector=function(){return this._li},Wl.prototype.hasProperIntersection=function(){return this._hasProper},Wl.prototype.processIntersections=function(t,e,n,r){if(t===n&&e===r)return null;this.numTests++;var i=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[r],a=n.getCoordinates()[r+1];this._li.computeIntersection(i,o,s,a),this._li.hasIntersection()&&(this.numIntersections++,this._li.isInteriorIntersection()&&(this.numInteriorIntersections++,this._hasInterior=!0),this.isTrivialIntersection(t,e,n,r)||(this._hasIntersection=!0,t.addIntersections(this._li,e,0),n.addIntersections(this._li,r,1),this._li.isProper()&&(this.numProperIntersections++,this._hasProper=!0,this._hasProperInterior=!0)))},Wl.prototype.hasIntersection=function(){return this._hasIntersection},Wl.prototype.isDone=function(){return!1},Wl.prototype.hasInteriorIntersection=function(){return this._hasInterior},Wl.prototype.interfaces_=function(){return[Hl]},Wl.prototype.getClass=function(){return Wl},Wl.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)};var Jl=function(){this.coord=null,this.segmentIndex=null,this.dist=null;var t=arguments[0],e=arguments[1],n=arguments[2];this.coord=new bu(t),this.segmentIndex=e,this.dist=n};Jl.prototype.getSegmentIndex=function(){return this.segmentIndex},Jl.prototype.getCoordinate=function(){return this.coord},Jl.prototype.print=function(t){t.print(this.coord),t.print(\" seg # = \"+this.segmentIndex),t.println(\" dist = \"+this.dist)},Jl.prototype.compareTo=function(t){var e=t;return this.compare(e.segmentIndex,e.dist)},Jl.prototype.isEndPoint=function(t){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===t},Jl.prototype.toString=function(){return this.coord+\" seg # = \"+this.segmentIndex+\" dist = \"+this.dist},Jl.prototype.getDistance=function(){return this.dist},Jl.prototype.compare=function(t,e){return this.segmentIndex<t?-1:this.segmentIndex>t?1:this.dist<e?-1:this.dist>e?1:0},Jl.prototype.interfaces_=function(){return[xu]},Jl.prototype.getClass=function(){return Jl};var Zl=function(){this._nodeMap=new Gi,this.edge=null;var t=arguments[0];this.edge=t};Zl.prototype.print=function(t){t.println(\"Intersections:\");for(var e=this.iterator();e.hasNext();){e.next().print(t)}},Zl.prototype.iterator=function(){return this._nodeMap.values().iterator()},Zl.prototype.addSplitEdges=function(t){this.addEndpoints();for(var e=this.iterator(),n=e.next();e.hasNext();){var r=e.next(),i=this.createSplitEdge(n,r);t.add(i),n=r}},Zl.prototype.addEndpoints=function(){var t=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[t],t,0)},Zl.prototype.createSplitEdge=function(t,e){var n=e.segmentIndex-t.segmentIndex+2,r=this.edge.pts[e.segmentIndex],i=e.dist>0||!e.coord.equals2D(r);i||n--;var o=new Array(n).fill(null),s=0;o[s++]=new bu(t.coord);for(var a=t.segmentIndex+1;a<=e.segmentIndex;a++)o[s++]=this.edge.pts[a];return i&&(o[s]=e.coord),new ep(o,new Rh(this.edge._label))},Zl.prototype.add=function(t,e,n){var r=new Jl(t,e,n),i=this._nodeMap.get(r);return null!==i?i:(this._nodeMap.put(r,r),r)},Zl.prototype.isIntersection=function(t){for(var e=this.iterator();e.hasNext();){if(e.next().coord.equals(t))return!0}return!1},Zl.prototype.interfaces_=function(){return[]},Zl.prototype.getClass=function(){return Zl};var Kl=function(){};Kl.prototype.getChainStartIndices=function(t){var e=0,n=new bc;n.add(new Tu(e));do{var r=this.findChainEnd(t,e);n.add(new Tu(r)),e=r}while(e<t.length-1);return Kl.toIntArray(n)},Kl.prototype.findChainEnd=function(t,e){for(var n=Bh.quadrant(t[e],t[e+1]),r=e+1;r<t.length;){if(Bh.quadrant(t[r-1],t[r])!==n)break;r++}return r-1},Kl.prototype.interfaces_=function(){return[]},Kl.prototype.getClass=function(){return Kl},Kl.toIntArray=function(t){for(var e=new Array(t.size()).fill(null),n=0;n<e.length;n++)e[n]=t.get(n).intValue();return e};var Ql=function(){this.e=null,this.pts=null,this.startIndex=null,this.env1=new Yu,this.env2=new Yu;var t=arguments[0];this.e=t,this.pts=t.getCoordinates();var e=new Kl;this.startIndex=e.getChainStartIndices(this.pts)};Ql.prototype.getCoordinates=function(){return this.pts},Ql.prototype.getMaxX=function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e>n?e:n},Ql.prototype.getMinX=function(t){var e=this.pts[this.startIndex[t]].x,n=this.pts[this.startIndex[t+1]].x;return e<n?e:n},Ql.prototype.computeIntersectsForChain=function(){if(4===arguments.length){var t=arguments[0],e=arguments[1],n=arguments[2],r=arguments[3];this.computeIntersectsForChain(this.startIndex[t],this.startIndex[t+1],e,e.startIndex[n],e.startIndex[n+1],r)}else if(6===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2],a=arguments[3],u=arguments[4],c=arguments[5],h=this.pts[i],l=this.pts[o],p=s.pts[a],f=s.pts[u];if(o-i==1&&u-a==1)return c.addIntersections(this.e,i,s.e,a),null;if(this.env1.init(h,l),this.env2.init(p,f),!this.env1.intersects(this.env2))return null;var g=Math.trunc((i+o)/2),d=Math.trunc((a+u)/2);i<g&&(a<d&&this.computeIntersectsForChain(i,g,s,a,d,c),d<u&&this.computeIntersectsForChain(i,g,s,d,u,c)),g<o&&(a<d&&this.computeIntersectsForChain(g,o,s,a,d,c),d<u&&this.computeIntersectsForChain(g,o,s,d,u,c))}},Ql.prototype.getStartIndexes=function(){return this.startIndex},Ql.prototype.computeIntersects=function(t,e){for(var n=0;n<this.startIndex.length-1;n++)for(var r=0;r<t.startIndex.length-1;r++)this.computeIntersectsForChain(n,t,r,e)},Ql.prototype.interfaces_=function(){return[]},Ql.prototype.getClass=function(){return Ql};var $l=function t(){this._depth=Array(2).fill().map(function(){return Array(3)});for(var e=0;e<2;e++)for(var n=0;n<3;n++)this._depth[e][n]=t.NULL_VALUE},tp={NULL_VALUE:{configurable:!0}};$l.prototype.getDepth=function(t,e){return this._depth[t][e]},$l.prototype.setDepth=function(t,e,n){this._depth[t][e]=n},$l.prototype.isNull=function(){if(0===arguments.length){for(var t=0;t<2;t++)for(var e=0;e<3;e++)if(this._depth[t][e]!==$l.NULL_VALUE)return!1;return!0}if(1===arguments.length){var n=arguments[0];return this._depth[n][1]===$l.NULL_VALUE}if(2===arguments.length){var r=arguments[0],i=arguments[1];return this._depth[r][i]===$l.NULL_VALUE}},$l.prototype.normalize=function(){for(var t=0;t<2;t++)if(!this.isNull(t)){var e=this._depth[t][1];this._depth[t][2]<e&&(e=this._depth[t][2]),e<0&&(e=0);for(var n=1;n<3;n++){var r=0;this._depth[t][n]>e&&(r=1),this._depth[t][n]=r}}},$l.prototype.getDelta=function(t){return this._depth[t][Nh.RIGHT]-this._depth[t][Nh.LEFT]},$l.prototype.getLocation=function(t,e){return this._depth[t][e]<=0?Su.EXTERIOR:Su.INTERIOR},$l.prototype.toString=function(){return\"A: \"+this._depth[0][1]+\",\"+this._depth[0][2]+\" B: \"+this._depth[1][1]+\",\"+this._depth[1][2]},$l.prototype.add=function(){if(1===arguments.length)for(var t=arguments[0],e=0;e<2;e++)for(var n=1;n<3;n++){var r=t.getLocation(e,n);r!==Su.EXTERIOR&&r!==Su.INTERIOR||(this.isNull(e,n)?this._depth[e][n]=$l.depthAtLocation(r):this._depth[e][n]+=$l.depthAtLocation(r))}else if(3===arguments.length){var i=arguments[0],o=arguments[1];arguments[2]===Su.INTERIOR&&this._depth[i][o]++}},$l.prototype.interfaces_=function(){return[]},$l.prototype.getClass=function(){return $l},$l.depthAtLocation=function(t){return t===Su.EXTERIOR?0:t===Su.INTERIOR?1:$l.NULL_VALUE},tp.NULL_VALUE.get=function(){return-1},Object.defineProperties($l,tp);var ep=function(t){function e(){if(t.call(this),this.pts=null,this._env=null,this.eiList=new Zl(this),this._name=null,this._mce=null,this._isIsolated=!0,this._depth=new $l,this._depthDelta=0,1===arguments.length){var n=arguments[0];e.call(this,n,null)}else if(2===arguments.length){var r=arguments[0],i=arguments[1];this.pts=r,this._label=i}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getDepth=function(){return this._depth},e.prototype.getCollapsedEdge=function(){var t=new Array(2).fill(null);t[0]=this.pts[0],t[1]=this.pts[1];return new e(t,Rh.toLineLabel(this._label))},e.prototype.isIsolated=function(){return this._isIsolated},e.prototype.getCoordinates=function(){return this.pts},e.prototype.setIsolated=function(t){this._isIsolated=t},e.prototype.setName=function(t){this._name=t},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;if(this.pts.length!==n.pts.length)return!1;for(var r=!0,i=!0,o=this.pts.length,s=0;s<this.pts.length;s++)if(this.pts[s].equals2D(n.pts[s])||(r=!1),this.pts[s].equals2D(n.pts[--o])||(i=!1),!r&&!i)return!1;return!0},e.prototype.getCoordinate=function(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){var t=arguments[0];return this.pts[t]}},e.prototype.print=function(t){t.print(\"edge \"+this._name+\": \"),t.print(\"LINESTRING (\");for(var e=0;e<this.pts.length;e++)e>0&&t.print(\",\"),t.print(this.pts[e].x+\" \"+this.pts[e].y);t.print(\")  \"+this._label+\" \"+this._depthDelta)},e.prototype.computeIM=function(t){e.updateIM(this._label,t)},e.prototype.isCollapsed=function(){return!!this._label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))},e.prototype.isClosed=function(){return this.pts[0].equals(this.pts[this.pts.length-1])},e.prototype.getMaximumSegmentIndex=function(){return this.pts.length-1},e.prototype.getDepthDelta=function(){return this._depthDelta},e.prototype.getNumPoints=function(){return this.pts.length},e.prototype.printReverse=function(t){t.print(\"edge \"+this._name+\": \");for(var e=this.pts.length-1;e>=0;e--)t.print(this.pts[e]+\" \");t.println(\"\")},e.prototype.getMonotoneChainEdge=function(){return null===this._mce&&(this._mce=new Ql(this)),this._mce},e.prototype.getEnvelope=function(){if(null===this._env){this._env=new Yu;for(var t=0;t<this.pts.length;t++)this._env.expandToInclude(this.pts[t])}return this._env},e.prototype.addIntersection=function(t,e,n,r){var i=new bu(t.getIntersection(r)),o=e,s=t.getEdgeDistance(n,r),a=o+1;if(a<this.pts.length){var u=this.pts[a];i.equals2D(u)&&(o=a,s=0)}this.eiList.add(i,o,s)},e.prototype.toString=function(){var t=new Ru;t.append(\"edge \"+this._name+\": \"),t.append(\"LINESTRING (\");for(var e=0;e<this.pts.length;e++)e>0&&t.append(\",\"),t.append(this.pts[e].x+\" \"+this.pts[e].y);return t.append(\")  \"+this._label+\" \"+this._depthDelta),t.toString()},e.prototype.isPointwiseEqual=function(t){if(this.pts.length!==t.pts.length)return!1;for(var e=0;e<this.pts.length;e++)if(!this.pts[e].equals2D(t.pts[e]))return!1;return!0},e.prototype.setDepthDelta=function(t){this._depthDelta=t},e.prototype.getEdgeIntersectionList=function(){return this.eiList},e.prototype.addIntersections=function(t,e,n){for(var r=0;r<t.getIntersectionNum();r++)this.addIntersection(t,e,n,r)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.updateIM=function(){if(2!==arguments.length)return t.prototype.updateIM.apply(this,arguments);var e=arguments[0],n=arguments[1];n.setAtLeastIfValid(e.getLocation(0,Nh.ON),e.getLocation(1,Nh.ON),1),e.isArea()&&(n.setAtLeastIfValid(e.getLocation(0,Nh.LEFT),e.getLocation(1,Nh.LEFT),2),n.setAtLeastIfValid(e.getLocation(0,Nh.RIGHT),e.getLocation(1,Nh.RIGHT),2))},e}(Fh),np=function(t){this._workingPrecisionModel=null,this._workingNoder=null,this._geomFact=null,this._graph=null,this._edgeList=new Vl,this._bufParams=t||null};np.prototype.setWorkingPrecisionModel=function(t){this._workingPrecisionModel=t},np.prototype.insertUniqueEdge=function(t){var e=this._edgeList.findEqualEdge(t);if(null!==e){var n=e.getLabel(),r=t.getLabel();e.isPointwiseEqual(t)||(r=new Rh(t.getLabel())).flip(),n.merge(r);var i=np.depthDelta(r),o=e.getDepthDelta()+i;e.setDepthDelta(o)}else this._edgeList.add(t),t.setDepthDelta(np.depthDelta(t.getLabel()))},np.prototype.buildSubgraphs=function(t,e){for(var n=new bc,r=t.iterator();r.hasNext();){var i=r.next(),o=i.getRightmostCoordinate(),s=new Al(n).getDepth(o);i.computeDepth(s),i.findResultEdges(),n.add(i),e.add(i.getDirectedEdges(),i.getNodes())}},np.prototype.createSubgraphs=function(t){for(var e=new bc,n=t.getNodes().iterator();n.hasNext();){var r=n.next();if(!r.isVisited()){var i=new Ph;i.create(r),e.add(i)}}return $h.sort(e,$h.reverseOrder()),e},np.prototype.createEmptyResultGeometry=function(){return this._geomFact.createPolygon()},np.prototype.getNoder=function(t){if(null!==this._workingNoder)return this._workingNoder;var e=new El,n=new rc;return n.setPrecisionModel(t),e.setSegmentIntersector(new Wl(n)),e},np.prototype.buffer=function(t,e){var n=this._workingPrecisionModel;null===n&&(n=t.getPrecisionModel()),this._geomFact=t.getFactory();var r=new Tl(n,this._bufParams),i=new Gl(t,e,r).getCurves();if(i.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(i,n),this._graph=new Uh(new Ul),this._graph.addEdges(this._edgeList.getEdges());var o=this.createSubgraphs(this._graph),s=new Yh(this._geomFact);this.buildSubgraphs(o,s);var a=s.getPolygons();if(a.size()<=0)return this.createEmptyResultGeometry();return this._geomFact.buildGeometry(a)},np.prototype.computeNodedEdges=function(t,e){var n=this.getNoder(e);n.computeNodes(t);for(var r=n.getNodedSubstrings().iterator();r.hasNext();){var i=r.next(),o=i.getCoordinates();if(2!==o.length||!o[0].equals2D(o[1])){var s=i.getData(),a=new ep(i.getCoordinates(),new Rh(s));this.insertUniqueEdge(a)}}},np.prototype.setNoder=function(t){this._workingNoder=t},np.prototype.interfaces_=function(){return[]},np.prototype.getClass=function(){return np},np.depthDelta=function(t){var e=t.getLocation(0,Nh.LEFT),n=t.getLocation(0,Nh.RIGHT);return e===Su.INTERIOR&&n===Su.EXTERIOR?1:e===Su.EXTERIOR&&n===Su.INTERIOR?-1:0},np.convertSegStrings=function(t){for(var e=new _h,n=new bc;t.hasNext();){var r=t.next(),i=e.createLineString(r.getCoordinates());n.add(i)}return e.buildGeometry(n)};var rp=function(){if(this._noder=null,this._scaleFactor=null,this._offsetX=null,this._offsetY=null,this._isScaled=!1,2===arguments.length){var t=arguments[0],e=arguments[1];this._noder=t,this._scaleFactor=e,this._offsetX=0,this._offsetY=0,this._isScaled=!this.isIntegerPrecision()}else if(4===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2],o=arguments[3];this._noder=n,this._scaleFactor=r,this._offsetX=i,this._offsetY=o,this._isScaled=!this.isIntegerPrecision()}};rp.prototype.rescale=function(){if(Lu(arguments[0],vc))for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.rescale(e.getCoordinates())}else if(arguments[0]instanceof Array){for(var n=arguments[0],r=0;r<n.length;r++)n[r].x=n[r].x/this._scaleFactor+this._offsetX,n[r].y=n[r].y/this._scaleFactor+this._offsetY;2===n.length&&n[0].equals2D(n[1])&&Xu.out.println(n)}},rp.prototype.scale=function(){if(Lu(arguments[0],vc)){for(var t=arguments[0],e=new bc,n=t.iterator();n.hasNext();){var r=n.next();e.add(new fl(this.scale(r.getCoordinates()),r.getData()))}return e}if(arguments[0]instanceof Array){for(var i=arguments[0],o=new Array(i.length).fill(null),s=0;s<i.length;s++)o[s]=new bu(Math.round((i[s].x-this._offsetX)*this._scaleFactor),Math.round((i[s].y-this._offsetY)*this._scaleFactor),i[s].z);return Cc.removeRepeatedPoints(o)}},rp.prototype.isIntegerPrecision=function(){return 1===this._scaleFactor},rp.prototype.getNodedSubstrings=function(){var t=this._noder.getNodedSubstrings();return this._isScaled&&this.rescale(t),t},rp.prototype.computeNodes=function(t){var e=t;this._isScaled&&(e=this.scale(t)),this._noder.computeNodes(e)},rp.prototype.interfaces_=function(){return[vl]},rp.prototype.getClass=function(){return rp};var ip=function(){this._li=new rc,this._segStrings=null;var t=arguments[0];this._segStrings=t},op={fact:{configurable:!0}};ip.prototype.checkEndPtVertexIntersections=function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();){var e=t.next().getCoordinates();this.checkEndPtVertexIntersections(e[0],this._segStrings),this.checkEndPtVertexIntersections(e[e.length-1],this._segStrings)}else if(2===arguments.length)for(var n=arguments[0],r=arguments[1].iterator();r.hasNext();)for(var i=r.next().getCoordinates(),o=1;o<i.length-1;o++)if(i[o].equals(n))throw new Qu(\"found endpt/interior pt intersection at index \"+o+\" :pt \"+n)},ip.prototype.checkInteriorIntersections=function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();)for(var e=t.next(),n=this._segStrings.iterator();n.hasNext();){var r=n.next();this.checkInteriorIntersections(e,r)}else if(2===arguments.length)for(var i=arguments[0],o=arguments[1],s=i.getCoordinates(),a=o.getCoordinates(),u=0;u<s.length-1;u++)for(var c=0;c<a.length-1;c++)this.checkInteriorIntersections(i,u,o,c);else if(4===arguments.length){var h=arguments[0],l=arguments[1],p=arguments[2],f=arguments[3];if(h===p&&l===f)return null;var g=h.getCoordinates()[l],d=h.getCoordinates()[l+1],y=p.getCoordinates()[f],_=p.getCoordinates()[f+1];if(this._li.computeIntersection(g,d,y,_),this._li.hasIntersection()&&(this._li.isProper()||this.hasInteriorIntersection(this._li,g,d)||this.hasInteriorIntersection(this._li,y,_)))throw new Qu(\"found non-noded intersection at \"+g+\"-\"+d+\" and \"+y+\"-\"+_)}},ip.prototype.checkValid=function(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()},ip.prototype.checkCollapses=function(){if(0===arguments.length)for(var t=this._segStrings.iterator();t.hasNext();){var e=t.next();this.checkCollapses(e)}else if(1===arguments.length)for(var n=arguments[0].getCoordinates(),r=0;r<n.length-2;r++)this.checkCollapse(n[r],n[r+1],n[r+2])},ip.prototype.hasInteriorIntersection=function(t,e,n){for(var r=0;r<t.getIntersectionNum();r++){var i=t.getIntersection(r);if(!i.equals(e)&&!i.equals(n))return!0}return!1},ip.prototype.checkCollapse=function(t,e,n){if(t.equals(n))throw new Qu(\"found non-noded collapse at \"+ip.fact.createLineString([t,e,n]))},ip.prototype.interfaces_=function(){return[]},ip.prototype.getClass=function(){return ip},op.fact.get=function(){return new _h},Object.defineProperties(ip,op);var sp=function(){this._li=null,this._pt=null,this._originalPt=null,this._ptScaled=null,this._p0Scaled=null,this._p1Scaled=null,this._scaleFactor=null,this._minx=null,this._maxx=null,this._miny=null,this._maxy=null,this._corner=new Array(4).fill(null),this._safeEnv=null;var t=arguments[0],e=arguments[1],n=arguments[2];if(this._originalPt=t,this._pt=t,this._scaleFactor=e,this._li=n,e<=0)throw new _u(\"Scale factor must be non-zero\");1!==e&&(this._pt=new bu(this.scale(t.x),this.scale(t.y)),this._p0Scaled=new bu,this._p1Scaled=new bu),this.initCorners(this._pt)},ap={SAFE_ENV_EXPANSION_FACTOR:{configurable:!0}};sp.prototype.intersectsScaled=function(t,e){var n=Math.min(t.x,e.x),r=Math.max(t.x,e.x),i=Math.min(t.y,e.y),o=Math.max(t.y,e.y),s=this._maxx<n||this._minx>r||this._maxy<i||this._miny>o;if(s)return!1;var a=this.intersectsToleranceSquare(t,e);return tc.isTrue(!(s&&a),\"Found bad envelope test\"),a},sp.prototype.initCorners=function(t){this._minx=t.x-.5,this._maxx=t.x+.5,this._miny=t.y-.5,this._maxy=t.y+.5,this._corner[0]=new bu(this._maxx,this._maxy),this._corner[1]=new bu(this._minx,this._maxy),this._corner[2]=new bu(this._minx,this._miny),this._corner[3]=new bu(this._maxx,this._miny)},sp.prototype.intersects=function(t,e){return 1===this._scaleFactor?this.intersectsScaled(t,e):(this.copyScaled(t,this._p0Scaled),this.copyScaled(e,this._p1Scaled),this.intersectsScaled(this._p0Scaled,this._p1Scaled))},sp.prototype.scale=function(t){return Math.round(t*this._scaleFactor)},sp.prototype.getCoordinate=function(){return this._originalPt},sp.prototype.copyScaled=function(t,e){e.x=this.scale(t.x),e.y=this.scale(t.y)},sp.prototype.getSafeEnvelope=function(){if(null===this._safeEnv){var t=sp.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new Yu(this._originalPt.x-t,this._originalPt.x+t,this._originalPt.y-t,this._originalPt.y+t)}return this._safeEnv},sp.prototype.intersectsPixelClosure=function(t,e){return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.hasIntersection()||(this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.hasIntersection())))},sp.prototype.intersectsToleranceSquare=function(t,e){var n=!1,r=!1;return this._li.computeIntersection(t,e,this._corner[0],this._corner[1]),!!this._li.isProper()||(this._li.computeIntersection(t,e,this._corner[1],this._corner[2]),!!this._li.isProper()||(this._li.hasIntersection()&&(n=!0),this._li.computeIntersection(t,e,this._corner[2],this._corner[3]),!!this._li.isProper()||(this._li.hasIntersection()&&(r=!0),this._li.computeIntersection(t,e,this._corner[3],this._corner[0]),!!this._li.isProper()||(!(!n||!r)||(!!t.equals(this._pt)||!!e.equals(this._pt))))))},sp.prototype.addSnappedNode=function(t,e){var n=t.getCoordinate(e),r=t.getCoordinate(e+1);return!!this.intersects(n,r)&&(t.addIntersection(this.getCoordinate(),e),!0)},sp.prototype.interfaces_=function(){return[]},sp.prototype.getClass=function(){return sp},ap.SAFE_ENV_EXPANSION_FACTOR.get=function(){return.75},Object.defineProperties(sp,ap);var up=function(){this.tempEnv1=new Yu,this.selectedSegment=new gl};up.prototype.select=function(){if(1===arguments.length);else if(2===arguments.length){var t=arguments[0],e=arguments[1];t.getLineSegment(e,this.selectedSegment),this.select(this.selectedSegment)}},up.prototype.interfaces_=function(){return[]},up.prototype.getClass=function(){return up};var cp=function(){this._index=null;var t=arguments[0];this._index=t},hp={HotPixelSnapAction:{configurable:!0}};cp.prototype.snap=function(){if(1===arguments.length){var t=arguments[0];return this.snap(t,null,-1)}if(3===arguments.length){var e=arguments[0],n=arguments[1],r=arguments[2],i=e.getSafeEnvelope(),o=new lp(e,n,r);return this._index.query(i,{interfaces_:function(){return[Jh]},visitItem:function(t){t.select(i,o)}}),o.isNodeAdded()}},cp.prototype.interfaces_=function(){return[]},cp.prototype.getClass=function(){return cp},hp.HotPixelSnapAction.get=function(){return lp},Object.defineProperties(cp,hp);var lp=function(t){function e(){t.call(this),this._hotPixel=null,this._parentEdge=null,this._hotPixelVertexIndex=null,this._isNodeAdded=!1;var e=arguments[0],n=arguments[1],r=arguments[2];this._hotPixel=e,this._parentEdge=n,this._hotPixelVertexIndex=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isNodeAdded=function(){return this._isNodeAdded},e.prototype.select=function(){if(2!==arguments.length)return t.prototype.select.apply(this,arguments);var e=arguments[0],n=arguments[1],r=e.getContext();if(null!==this._parentEdge&&r===this._parentEdge&&n===this._hotPixelVertexIndex)return null;this._isNodeAdded=this._hotPixel.addSnappedNode(r,n)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(up),pp=function(){this._li=null,this._interiorIntersections=null;var t=arguments[0];this._li=t,this._interiorIntersections=new bc};pp.prototype.processIntersections=function(t,e,n,r){if(t===n&&e===r)return null;var i=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[r],a=n.getCoordinates()[r+1];if(this._li.computeIntersection(i,o,s,a),this._li.hasIntersection()&&this._li.isInteriorIntersection()){for(var u=0;u<this._li.getIntersectionNum();u++)this._interiorIntersections.add(this._li.getIntersection(u));t.addIntersections(this._li,e,0),n.addIntersections(this._li,r,1)}},pp.prototype.isDone=function(){return!1},pp.prototype.getInteriorIntersections=function(){return this._interiorIntersections},pp.prototype.interfaces_=function(){return[Hl]},pp.prototype.getClass=function(){return pp};var fp=function(){this._pm=null,this._li=null,this._scaleFactor=null,this._noder=null,this._pointSnapper=null,this._nodedSegStrings=null;var t=arguments[0];this._pm=t,this._li=new rc,this._li.setPrecisionModel(t),this._scaleFactor=t.getScale()};fp.prototype.checkCorrectness=function(t){var e=fl.getNodedSubstrings(t),n=new ip(e);try{n.checkValid()}catch(t){if(!(t instanceof zu))throw t;t.printStackTrace()}},fp.prototype.getNodedSubstrings=function(){return fl.getNodedSubstrings(this._nodedSegStrings)},fp.prototype.snapRound=function(t,e){var n=this.findInteriorIntersections(t,e);this.computeIntersectionSnaps(n),this.computeVertexSnaps(t)},fp.prototype.findInteriorIntersections=function(t,e){var n=new pp(e);return this._noder.setSegmentIntersector(n),this._noder.computeNodes(t),n.getInteriorIntersections()},fp.prototype.computeVertexSnaps=function(){if(Lu(arguments[0],vc))for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.computeVertexSnaps(e)}else if(arguments[0]instanceof fl)for(var n=arguments[0],r=n.getCoordinates(),i=0;i<r.length;i++){var o=new sp(r[i],this._scaleFactor,this._li);this._pointSnapper.snap(o,n,i)&&n.addIntersection(r[i],i)}},fp.prototype.computeNodes=function(t){this._nodedSegStrings=t,this._noder=new El,this._pointSnapper=new cp(this._noder.getIndex()),this.snapRound(t,this._li)},fp.prototype.computeIntersectionSnaps=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),r=new sp(n,this._scaleFactor,this._li);this._pointSnapper.snap(r)}},fp.prototype.interfaces_=function(){return[vl]},fp.prototype.getClass=function(){return fp};var gp=function(){if(this._argGeom=null,this._distance=null,this._bufParams=new bl,this._resultGeometry=null,this._saveException=null,1===arguments.length){var t=arguments[0];this._argGeom=t}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this._argGeom=e,this._bufParams=n}},dp={CAP_ROUND:{configurable:!0},CAP_BUTT:{configurable:!0},CAP_FLAT:{configurable:!0},CAP_SQUARE:{configurable:!0},MAX_PRECISION_DIGITS:{configurable:!0}};gp.prototype.bufferFixedPrecision=function(t){var e=new rp(new fp(new fh(1)),t.getScale()),n=new np(this._bufParams);n.setWorkingPrecisionModel(t),n.setNoder(e),this._resultGeometry=n.buffer(this._argGeom,this._distance)},gp.prototype.bufferReducedPrecision=function(){var t=this;if(0===arguments.length){for(var e=gp.MAX_PRECISION_DIGITS;e>=0;e--){try{t.bufferReducedPrecision(e)}catch(e){if(!(e instanceof Mh))throw e;t._saveException=e}if(null!==t._resultGeometry)return null}throw this._saveException}if(1===arguments.length){var n=arguments[0],r=gp.precisionScaleFactor(this._argGeom,this._distance,n),i=new fh(r);this.bufferFixedPrecision(i)}},gp.prototype.computeGeometry=function(){if(this.bufferOriginalPrecision(),null!==this._resultGeometry)return null;var t=this._argGeom.getFactory().getPrecisionModel();t.getType()===fh.FIXED?this.bufferFixedPrecision(t):this.bufferReducedPrecision()},gp.prototype.setQuadrantSegments=function(t){this._bufParams.setQuadrantSegments(t)},gp.prototype.bufferOriginalPrecision=function(){try{var t=new np(this._bufParams);this._resultGeometry=t.buffer(this._argGeom,this._distance)}catch(t){if(!(t instanceof Qu))throw t;this._saveException=t}},gp.prototype.getResultGeometry=function(t){return this._distance=t,this.computeGeometry(),this._resultGeometry},gp.prototype.setEndCapStyle=function(t){this._bufParams.setEndCapStyle(t)},gp.prototype.interfaces_=function(){return[]},gp.prototype.getClass=function(){return gp},gp.bufferOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return new gp(t).getResultGeometry(e)}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof cc&&\"number\"==typeof arguments[1]){var n=arguments[0],r=arguments[1],i=arguments[2],o=new gp(n);o.setQuadrantSegments(i);return o.getResultGeometry(r)}if(arguments[2]instanceof bl&&arguments[0]instanceof cc&&\"number\"==typeof arguments[1]){var s=arguments[0],a=arguments[1],u=arguments[2];return new gp(s,u).getResultGeometry(a)}}else if(4===arguments.length){var c=arguments[0],h=arguments[1],l=arguments[2],p=arguments[3],f=new gp(c);f.setQuadrantSegments(l),f.setEndCapStyle(p);return f.getResultGeometry(h)}},gp.precisionScaleFactor=function(t,e,n){var r=t.getEnvelopeInternal(),i=Pu.max(Math.abs(r.getMaxX()),Math.abs(r.getMaxY()),Math.abs(r.getMinX()),Math.abs(r.getMinY()))+2*(e>0?e:0),o=n-Math.trunc(Math.log(i)/Math.log(10)+1);return Math.pow(10,o)},dp.CAP_ROUND.get=function(){return bl.CAP_ROUND},dp.CAP_BUTT.get=function(){return bl.CAP_FLAT},dp.CAP_FLAT.get=function(){return bl.CAP_FLAT},dp.CAP_SQUARE.get=function(){return bl.CAP_SQUARE},dp.MAX_PRECISION_DIGITS.get=function(){return 12},Object.defineProperties(gp,dp);var yp=function(){this._pt=[new bu,new bu],this._distance=mu.NaN,this._isNull=!0};yp.prototype.getCoordinates=function(){return this._pt},yp.prototype.getCoordinate=function(t){return this._pt[t]},yp.prototype.setMinimum=function(){if(1===arguments.length){var t=arguments[0];this.setMinimum(t._pt[0],t._pt[1])}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var r=e.distance(n);r<this._distance&&this.initialize(e,n,r)}},yp.prototype.initialize=function(){if(0===arguments.length)this._isNull=!0;else if(2===arguments.length){var t=arguments[0],e=arguments[1];this._pt[0].setCoordinate(t),this._pt[1].setCoordinate(e),this._distance=t.distance(e),this._isNull=!1}else if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];this._pt[0].setCoordinate(n),this._pt[1].setCoordinate(r),this._distance=i,this._isNull=!1}},yp.prototype.getDistance=function(){return this._distance},yp.prototype.setMaximum=function(){if(1===arguments.length){var t=arguments[0];this.setMaximum(t._pt[0],t._pt[1])}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var r=e.distance(n);r>this._distance&&this.initialize(e,n,r)}},yp.prototype.interfaces_=function(){return[]},yp.prototype.getClass=function(){return yp};var _p=function(){};_p.prototype.interfaces_=function(){return[]},_p.prototype.getClass=function(){return _p},_p.computeDistance=function(){if(arguments[2]instanceof yp&&arguments[0]instanceof Jc&&arguments[1]instanceof bu)for(var t=arguments[0],e=arguments[1],n=arguments[2],r=t.getCoordinates(),i=new gl,o=0;o<r.length-1;o++){i.setCoordinates(r[o],r[o+1]);var s=i.closestPoint(e);n.setMinimum(s,e)}else if(arguments[2]instanceof yp&&arguments[0]instanceof $c&&arguments[1]instanceof bu){var a=arguments[0],u=arguments[1],c=arguments[2];_p.computeDistance(a.getExteriorRing(),u,c);for(var h=0;h<a.getNumInteriorRing();h++)_p.computeDistance(a.getInteriorRingN(h),u,c)}else if(arguments[2]instanceof yp&&arguments[0]instanceof cc&&arguments[1]instanceof bu){var l=arguments[0],p=arguments[1],f=arguments[2];if(l instanceof Jc)_p.computeDistance(l,p,f);else if(l instanceof $c)_p.computeDistance(l,p,f);else if(l instanceof jc)for(var g=l,d=0;d<g.getNumGeometries();d++){var y=g.getGeometryN(d);_p.computeDistance(y,p,f)}else f.setMinimum(l.getCoordinate(),p)}else if(arguments[2]instanceof yp&&arguments[0]instanceof gl&&arguments[1]instanceof bu){var _=arguments[0],m=arguments[1],v=arguments[2],x=_.closestPoint(m);v.setMinimum(x,m)}};var mp=function(t){this._maxPtDist=new yp,this._inputGeom=t||null},vp={MaxPointDistanceFilter:{configurable:!0},MaxMidpointDistanceFilter:{configurable:!0}};mp.prototype.computeMaxMidpointDistance=function(t){var e=new Ep(this._inputGeom);t.apply(e),this._maxPtDist.setMaximum(e.getMaxPointDistance())},mp.prototype.computeMaxVertexDistance=function(t){var e=new xp(this._inputGeom);t.apply(e),this._maxPtDist.setMaximum(e.getMaxPointDistance())},mp.prototype.findDistance=function(t){return this.computeMaxVertexDistance(t),this.computeMaxMidpointDistance(t),this._maxPtDist.getDistance()},mp.prototype.getDistancePoints=function(){return this._maxPtDist},mp.prototype.interfaces_=function(){return[]},mp.prototype.getClass=function(){return mp},vp.MaxPointDistanceFilter.get=function(){return xp},vp.MaxMidpointDistanceFilter.get=function(){return Ep},Object.defineProperties(mp,vp);var xp=function(t){this._maxPtDist=new yp,this._minPtDist=new yp,this._geom=t||null};xp.prototype.filter=function(t){this._minPtDist.initialize(),_p.computeDistance(this._geom,t,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist)},xp.prototype.getMaxPointDistance=function(){return this._maxPtDist},xp.prototype.interfaces_=function(){return[pc]},xp.prototype.getClass=function(){return xp};var Ep=function(t){this._maxPtDist=new yp,this._minPtDist=new yp,this._geom=t||null};Ep.prototype.filter=function(t,e){if(0===e)return null;var n=t.getCoordinate(e-1),r=t.getCoordinate(e),i=new bu((n.x+r.x)/2,(n.y+r.y)/2);this._minPtDist.initialize(),_p.computeDistance(this._geom,i,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist)},Ep.prototype.isDone=function(){return!1},Ep.prototype.isGeometryChanged=function(){return!1},Ep.prototype.getMaxPointDistance=function(){return this._maxPtDist},Ep.prototype.interfaces_=function(){return[zc]},Ep.prototype.getClass=function(){return Ep};var wp=function(t){this._comps=t||null};wp.prototype.filter=function(t){t instanceof $c&&this._comps.add(t)},wp.prototype.interfaces_=function(){return[kc]},wp.prototype.getClass=function(){return wp},wp.getPolygons=function(){if(1===arguments.length){var t=arguments[0];return wp.getPolygons(t,new bc)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e instanceof $c?n.add(e):e instanceof jc&&e.apply(new wp(n)),n}};var bp=function(){if(this._lines=null,this._isForcedToLineString=!1,1===arguments.length){var t=arguments[0];this._lines=t}else if(2===arguments.length){var e=arguments[0],n=arguments[1];this._lines=e,this._isForcedToLineString=n}};bp.prototype.filter=function(t){if(this._isForcedToLineString&&t instanceof eh){var e=t.getFactory().createLineString(t.getCoordinateSequence());return this._lines.add(e),null}t instanceof Jc&&this._lines.add(t)},bp.prototype.setForceToLineString=function(t){this._isForcedToLineString=t},bp.prototype.interfaces_=function(){return[uc]},bp.prototype.getClass=function(){return bp},bp.getGeometry=function(){if(1===arguments.length){var t=arguments[0];return t.getFactory().buildGeometry(bp.getLines(t))}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e.getFactory().buildGeometry(bp.getLines(e,n))}},bp.getLines=function(){if(1===arguments.length){var t=arguments[0];return bp.getLines(t,!1)}if(2===arguments.length){if(Lu(arguments[0],vc)&&Lu(arguments[1],vc)){for(var e=arguments[0],n=arguments[1],r=e.iterator();r.hasNext();){var i=r.next();bp.getLines(i,n)}return n}if(arguments[0]instanceof cc&&\"boolean\"==typeof arguments[1]){var o=arguments[0],s=arguments[1],a=new bc;return o.apply(new bp(a,s)),a}if(arguments[0]instanceof cc&&Lu(arguments[1],vc)){var u=arguments[0],c=arguments[1];return u instanceof Jc?c.add(u):u.apply(new bp(c)),c}}else if(3===arguments.length){if(\"boolean\"==typeof arguments[2]&&Lu(arguments[0],vc)&&Lu(arguments[1],vc)){for(var h=arguments[0],l=arguments[1],p=arguments[2],f=h.iterator();f.hasNext();){var g=f.next();bp.getLines(g,l,p)}return l}if(\"boolean\"==typeof arguments[2]&&arguments[0]instanceof cc&&Lu(arguments[1],vc)){var d=arguments[0],y=arguments[1],_=arguments[2];return d.apply(new bp(y,_)),y}}};var Ip=function(){if(this._boundaryRule=fc.OGC_SFS_BOUNDARY_RULE,this._isIn=null,this._numBoundaries=null,0===arguments.length);else if(1===arguments.length){var t=arguments[0];if(null===t)throw new _u(\"Rule must be non-null\");this._boundaryRule=t}};Ip.prototype.locateInternal=function(){if(arguments[0]instanceof bu&&arguments[1]instanceof $c){var t=arguments[0],e=arguments[1];if(e.isEmpty())return Su.EXTERIOR;var n=e.getExteriorRing(),r=this.locateInPolygonRing(t,n);if(r===Su.EXTERIOR)return Su.EXTERIOR;if(r===Su.BOUNDARY)return Su.BOUNDARY;for(var i=0;i<e.getNumInteriorRing();i++){var o=e.getInteriorRingN(i),s=this.locateInPolygonRing(t,o);if(s===Su.INTERIOR)return Su.EXTERIOR;if(s===Su.BOUNDARY)return Su.BOUNDARY}return Su.INTERIOR}if(arguments[0]instanceof bu&&arguments[1]instanceof Jc){var a=arguments[0],u=arguments[1];if(!u.getEnvelopeInternal().intersects(a))return Su.EXTERIOR;var c=u.getCoordinates();return u.isClosed()||!a.equals(c[0])&&!a.equals(c[c.length-1])?sc.isOnLine(a,c)?Su.INTERIOR:Su.EXTERIOR:Su.BOUNDARY}if(arguments[0]instanceof bu&&arguments[1]instanceof Kc){var h=arguments[0];return arguments[1].getCoordinate().equals2D(h)?Su.INTERIOR:Su.EXTERIOR}},Ip.prototype.locateInPolygonRing=function(t,e){return e.getEnvelopeInternal().intersects(t)?sc.locatePointInRing(t,e.getCoordinates()):Su.EXTERIOR},Ip.prototype.intersects=function(t,e){return this.locate(t,e)!==Su.EXTERIOR},Ip.prototype.updateLocationInfo=function(t){t===Su.INTERIOR&&(this._isIn=!0),t===Su.BOUNDARY&&this._numBoundaries++},Ip.prototype.computeLocation=function(t,e){if(e instanceof Kc&&this.updateLocationInfo(this.locateInternal(t,e)),e instanceof Jc)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof $c)this.updateLocationInfo(this.locateInternal(t,e));else if(e instanceof Xc)for(var n=e,r=0;r<n.getNumGeometries();r++){var i=n.getGeometryN(r);this.updateLocationInfo(this.locateInternal(t,i))}else if(e instanceof nh)for(var o=e,s=0;s<o.getNumGeometries();s++){var a=o.getGeometryN(s);this.updateLocationInfo(this.locateInternal(t,a))}else if(e instanceof jc)for(var u=new kl(e);u.hasNext();){var c=u.next();c!==e&&this.computeLocation(t,c)}},Ip.prototype.locate=function(t,e){return e.isEmpty()?Su.EXTERIOR:e instanceof Jc?this.locateInternal(t,e):e instanceof $c?this.locateInternal(t,e):(this._isIn=!1,this._numBoundaries=0,this.computeLocation(t,e),this._boundaryRule.isInBoundary(this._numBoundaries)?Su.BOUNDARY:this._numBoundaries>0||this._isIn?Su.INTERIOR:Su.EXTERIOR)},Ip.prototype.interfaces_=function(){return[]},Ip.prototype.getClass=function(){return Ip};var Np=function t(){if(this._component=null,this._segIndex=null,this._pt=null,2===arguments.length){var e=arguments[0],n=arguments[1];t.call(this,e,t.INSIDE_AREA,n)}else if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];this._component=r,this._segIndex=i,this._pt=o}},Cp={INSIDE_AREA:{configurable:!0}};Np.prototype.isInsideArea=function(){return this._segIndex===Np.INSIDE_AREA},Np.prototype.getCoordinate=function(){return this._pt},Np.prototype.getGeometryComponent=function(){return this._component},Np.prototype.getSegmentIndex=function(){return this._segIndex},Np.prototype.interfaces_=function(){return[]},Np.prototype.getClass=function(){return Np},Cp.INSIDE_AREA.get=function(){return-1},Object.defineProperties(Np,Cp);var Sp=function(t){this._pts=t||null};Sp.prototype.filter=function(t){t instanceof Kc&&this._pts.add(t)},Sp.prototype.interfaces_=function(){return[kc]},Sp.prototype.getClass=function(){return Sp},Sp.getPoints=function(){if(1===arguments.length){var t=arguments[0];return t instanceof Kc?$h.singletonList(t):Sp.getPoints(t,new bc)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e instanceof Kc?n.add(e):e instanceof jc&&e.apply(new Sp(n)),n}};var Mp=function(){this._locations=null;var t=arguments[0];this._locations=t};Mp.prototype.filter=function(t){(t instanceof Kc||t instanceof Jc||t instanceof $c)&&this._locations.add(new Np(t,0,t.getCoordinate()))},Mp.prototype.interfaces_=function(){return[kc]},Mp.prototype.getClass=function(){return Mp},Mp.getLocations=function(t){var e=new bc;return t.apply(new Mp(e)),e};var Lp=function(){if(this._geom=null,this._terminateDistance=0,this._ptLocator=new Ip,this._minDistanceLocation=null,this._minDistance=mu.MAX_VALUE,2===arguments.length){var t=arguments[0],e=arguments[1];this._geom=[t,e],this._terminateDistance=0}else if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];this._geom=new Array(2).fill(null),this._geom[0]=n,this._geom[1]=r,this._terminateDistance=i}};Lp.prototype.computeContainmentDistance=function(){if(0===arguments.length){var t=new Array(2).fill(null);if(this.computeContainmentDistance(0,t),this._minDistance<=this._terminateDistance)return null;this.computeContainmentDistance(1,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],r=1-e,i=wp.getPolygons(this._geom[e]);if(i.size()>0){var o=Mp.getLocations(this._geom[r]);if(this.computeContainmentDistance(o,i,n),this._minDistance<=this._terminateDistance)return this._minDistanceLocation[r]=n[0],this._minDistanceLocation[e]=n[1],null}}else if(3===arguments.length)if(arguments[2]instanceof Array&&Lu(arguments[0],wc)&&Lu(arguments[1],wc)){for(var s=arguments[0],a=arguments[1],u=arguments[2],c=0;c<s.size();c++)for(var h=s.get(c),l=0;l<a.size();l++)if(this.computeContainmentDistance(h,a.get(l),u),this._minDistance<=this._terminateDistance)return null}else if(arguments[2]instanceof Array&&arguments[0]instanceof Np&&arguments[1]instanceof $c){var p=arguments[0],f=arguments[1],g=arguments[2],d=p.getCoordinate();if(Su.EXTERIOR!==this._ptLocator.locate(d,f))return this._minDistance=0,g[0]=p,g[1]=new Np(f,d),null}},Lp.prototype.computeMinDistanceLinesPoints=function(t,e,n){for(var r=0;r<t.size();r++)for(var i=t.get(r),o=0;o<e.size();o++){var s=e.get(o);if(this.computeMinDistance(i,s,n),this._minDistance<=this._terminateDistance)return null}},Lp.prototype.computeFacetDistance=function(){var t=new Array(2).fill(null),e=bp.getLines(this._geom[0]),n=bp.getLines(this._geom[1]),r=Sp.getPoints(this._geom[0]),i=Sp.getPoints(this._geom[1]);return this.computeMinDistanceLines(e,n,t),this.updateMinDistance(t,!1),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(e,i,t),this.updateMinDistance(t,!1),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistanceLinesPoints(n,r,t),this.updateMinDistance(t,!0),this._minDistance<=this._terminateDistance?null:(t[0]=null,t[1]=null,this.computeMinDistancePoints(r,i,t),void this.updateMinDistance(t,!1))))},Lp.prototype.nearestLocations=function(){return this.computeMinDistance(),this._minDistanceLocation},Lp.prototype.updateMinDistance=function(t,e){if(null===t[0])return null;e?(this._minDistanceLocation[0]=t[1],this._minDistanceLocation[1]=t[0]):(this._minDistanceLocation[0]=t[0],this._minDistanceLocation[1]=t[1])},Lp.prototype.nearestPoints=function(){this.computeMinDistance();return[this._minDistanceLocation[0].getCoordinate(),this._minDistanceLocation[1].getCoordinate()]},Lp.prototype.computeMinDistance=function(){if(0===arguments.length){if(null!==this._minDistanceLocation)return null;if(this._minDistanceLocation=new Array(2).fill(null),this.computeContainmentDistance(),this._minDistance<=this._terminateDistance)return null;this.computeFacetDistance()}else if(3===arguments.length)if(arguments[2]instanceof Array&&arguments[0]instanceof Jc&&arguments[1]instanceof Kc){var t=arguments[0],e=arguments[1],n=arguments[2];if(t.getEnvelopeInternal().distance(e.getEnvelopeInternal())>this._minDistance)return null;for(var r=t.getCoordinates(),i=e.getCoordinate(),o=0;o<r.length-1;o++){var s=sc.distancePointLine(i,r[o],r[o+1]);if(s<this._minDistance){this._minDistance=s;var a=new gl(r[o],r[o+1]).closestPoint(i);n[0]=new Np(t,o,a),n[1]=new Np(e,0,i)}if(this._minDistance<=this._terminateDistance)return null}}else if(arguments[2]instanceof Array&&arguments[0]instanceof Jc&&arguments[1]instanceof Jc){var u=arguments[0],c=arguments[1],h=arguments[2];if(u.getEnvelopeInternal().distance(c.getEnvelopeInternal())>this._minDistance)return null;for(var l=u.getCoordinates(),p=c.getCoordinates(),f=0;f<l.length-1;f++)for(var g=0;g<p.length-1;g++){var d=sc.distanceLineLine(l[f],l[f+1],p[g],p[g+1]);if(d<this._minDistance){this._minDistance=d;var y=new gl(l[f],l[f+1]),_=new gl(p[g],p[g+1]),m=y.closestPoints(_);h[0]=new Np(u,f,m[0]),h[1]=new Np(c,g,m[1])}if(this._minDistance<=this._terminateDistance)return null}}},Lp.prototype.computeMinDistancePoints=function(t,e,n){for(var r=0;r<t.size();r++)for(var i=t.get(r),o=0;o<e.size();o++){var s=e.get(o),a=i.getCoordinate().distance(s.getCoordinate());if(a<this._minDistance&&(this._minDistance=a,n[0]=new Np(i,0,i.getCoordinate()),n[1]=new Np(s,0,s.getCoordinate())),this._minDistance<=this._terminateDistance)return null}},Lp.prototype.distance=function(){if(null===this._geom[0]||null===this._geom[1])throw new _u(\"null geometries are not supported\");return this._geom[0].isEmpty()||this._geom[1].isEmpty()?0:(this.computeMinDistance(),this._minDistance)},Lp.prototype.computeMinDistanceLines=function(t,e,n){for(var r=0;r<t.size();r++)for(var i=t.get(r),o=0;o<e.size();o++){var s=e.get(o);if(this.computeMinDistance(i,s,n),this._minDistance<=this._terminateDistance)return null}},Lp.prototype.interfaces_=function(){return[]},Lp.prototype.getClass=function(){return Lp},Lp.distance=function(t,e){return new Lp(t,e).distance()},Lp.isWithinDistance=function(t,e,n){return new Lp(t,e,n).distance()<=n},Lp.nearestPoints=function(t,e){return new Lp(t,e).nearestPoints()};var Pp=function(){this._pt=[new bu,new bu],this._distance=mu.NaN,this._isNull=!0};Pp.prototype.getCoordinates=function(){return this._pt},Pp.prototype.getCoordinate=function(t){return this._pt[t]},Pp.prototype.setMinimum=function(){if(1===arguments.length){var t=arguments[0];this.setMinimum(t._pt[0],t._pt[1])}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var r=e.distance(n);r<this._distance&&this.initialize(e,n,r)}},Pp.prototype.initialize=function(){if(0===arguments.length)this._isNull=!0;else if(2===arguments.length){var t=arguments[0],e=arguments[1];this._pt[0].setCoordinate(t),this._pt[1].setCoordinate(e),this._distance=t.distance(e),this._isNull=!1}else if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2];this._pt[0].setCoordinate(n),this._pt[1].setCoordinate(r),this._distance=i,this._isNull=!1}},Pp.prototype.toString=function(){return Ku.toLineString(this._pt[0],this._pt[1])},Pp.prototype.getDistance=function(){return this._distance},Pp.prototype.setMaximum=function(){if(1===arguments.length){var t=arguments[0];this.setMaximum(t._pt[0],t._pt[1])}else if(2===arguments.length){var e=arguments[0],n=arguments[1];if(this._isNull)return this.initialize(e,n),null;var r=e.distance(n);r>this._distance&&this.initialize(e,n,r)}},Pp.prototype.interfaces_=function(){return[]},Pp.prototype.getClass=function(){return Pp};var Op=function(){};Op.prototype.interfaces_=function(){return[]},Op.prototype.getClass=function(){return Op},Op.computeDistance=function(){if(arguments[2]instanceof Pp&&arguments[0]instanceof Jc&&arguments[1]instanceof bu)for(var t=arguments[0],e=arguments[1],n=arguments[2],r=new gl,i=t.getCoordinates(),o=0;o<i.length-1;o++){r.setCoordinates(i[o],i[o+1]);var s=r.closestPoint(e);n.setMinimum(s,e)}else if(arguments[2]instanceof Pp&&arguments[0]instanceof $c&&arguments[1]instanceof bu){var a=arguments[0],u=arguments[1],c=arguments[2];Op.computeDistance(a.getExteriorRing(),u,c);for(var h=0;h<a.getNumInteriorRing();h++)Op.computeDistance(a.getInteriorRingN(h),u,c)}else if(arguments[2]instanceof Pp&&arguments[0]instanceof cc&&arguments[1]instanceof bu){var l=arguments[0],p=arguments[1],f=arguments[2];if(l instanceof Jc)Op.computeDistance(l,p,f);else if(l instanceof $c)Op.computeDistance(l,p,f);else if(l instanceof jc)for(var g=l,d=0;d<g.getNumGeometries();d++){var y=g.getGeometryN(d);Op.computeDistance(y,p,f)}else f.setMinimum(l.getCoordinate(),p)}else if(arguments[2]instanceof Pp&&arguments[0]instanceof gl&&arguments[1]instanceof bu){var _=arguments[0],m=arguments[1],v=arguments[2],x=_.closestPoint(m);v.setMinimum(x,m)}};var Rp=function(){this._g0=null,this._g1=null,this._ptDist=new Pp,this._densifyFrac=0;var t=arguments[0],e=arguments[1];this._g0=t,this._g1=e},Tp={MaxPointDistanceFilter:{configurable:!0},MaxDensifiedByFractionDistanceFilter:{configurable:!0}};Rp.prototype.getCoordinates=function(){return this._ptDist.getCoordinates()},Rp.prototype.setDensifyFraction=function(t){if(t>1||t<=0)throw new _u(\"Fraction is not in range (0.0 - 1.0]\");this._densifyFrac=t},Rp.prototype.compute=function(t,e){this.computeOrientedDistance(t,e,this._ptDist),this.computeOrientedDistance(e,t,this._ptDist)},Rp.prototype.distance=function(){return this.compute(this._g0,this._g1),this._ptDist.getDistance()},Rp.prototype.computeOrientedDistance=function(t,e,n){var r=new Ap(e);if(t.apply(r),n.setMaximum(r.getMaxPointDistance()),this._densifyFrac>0){var i=new Dp(e,this._densifyFrac);t.apply(i),n.setMaximum(i.getMaxPointDistance())}},Rp.prototype.orientedDistance=function(){return this.computeOrientedDistance(this._g0,this._g1,this._ptDist),this._ptDist.getDistance()},Rp.prototype.interfaces_=function(){return[]},Rp.prototype.getClass=function(){return Rp},Rp.distance=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return new Rp(t,e).distance()}if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2],o=new Rp(n,r);return o.setDensifyFraction(i),o.distance()}},Tp.MaxPointDistanceFilter.get=function(){return Ap},Tp.MaxDensifiedByFractionDistanceFilter.get=function(){return Dp},Object.defineProperties(Rp,Tp);var Ap=function(){this._maxPtDist=new Pp,this._minPtDist=new Pp,this._euclideanDist=new Op,this._geom=null;var t=arguments[0];this._geom=t};Ap.prototype.filter=function(t){this._minPtDist.initialize(),Op.computeDistance(this._geom,t,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist)},Ap.prototype.getMaxPointDistance=function(){return this._maxPtDist},Ap.prototype.interfaces_=function(){return[pc]},Ap.prototype.getClass=function(){return Ap};var Dp=function(){this._maxPtDist=new Pp,this._minPtDist=new Pp,this._geom=null,this._numSubSegs=0;var t=arguments[0],e=arguments[1];this._geom=t,this._numSubSegs=Math.trunc(Math.round(1/e))};Dp.prototype.filter=function(t,e){if(0===e)return null;for(var n=t.getCoordinate(e-1),r=t.getCoordinate(e),i=(r.x-n.x)/this._numSubSegs,o=(r.y-n.y)/this._numSubSegs,s=0;s<this._numSubSegs;s++){var a=n.x+s*i,u=n.y+s*o,c=new bu(a,u);this._minPtDist.initialize(),Op.computeDistance(this._geom,c,this._minPtDist),this._maxPtDist.setMaximum(this._minPtDist)}},Dp.prototype.isDone=function(){return!1},Dp.prototype.isGeometryChanged=function(){return!1},Dp.prototype.getMaxPointDistance=function(){return this._maxPtDist},Dp.prototype.interfaces_=function(){return[zc]},Dp.prototype.getClass=function(){return Dp};var Fp=function(t,e,n){this._minValidDistance=null,this._maxValidDistance=null,this._minDistanceFound=null,this._maxDistanceFound=null,this._isValid=!0,this._errMsg=null,this._errorLocation=null,this._errorIndicator=null,this._input=t||null,this._bufDistance=e||null,this._result=n||null},qp={VERBOSE:{configurable:!0},MAX_DISTANCE_DIFF_FRAC:{configurable:!0}};Fp.prototype.checkMaximumDistance=function(t,e,n){var r=new Rp(e,t);if(r.setDensifyFraction(.25),this._maxDistanceFound=r.orientedDistance(),this._maxDistanceFound>n){this._isValid=!1;var i=r.getCoordinates();this._errorLocation=i[1],this._errorIndicator=t.getFactory().createLineString(i),this._errMsg=\"Distance between buffer curve and input is too large (\"+this._maxDistanceFound+\" at \"+Ku.toLineString(i[0],i[1])+\")\"}},Fp.prototype.isValid=function(){var t=Math.abs(this._bufDistance),e=Fp.MAX_DISTANCE_DIFF_FRAC*t;return this._minValidDistance=t-e,this._maxValidDistance=t+e,!(!this._input.isEmpty()&&!this._result.isEmpty())||(this._bufDistance>0?this.checkPositiveValid():this.checkNegativeValid(),Fp.VERBOSE&&Xu.out.println(\"Min Dist= \"+this._minDistanceFound+\"  err= \"+(1-this._minDistanceFound/this._bufDistance)+\"  Max Dist= \"+this._maxDistanceFound+\"  err= \"+(this._maxDistanceFound/this._bufDistance-1)),this._isValid)},Fp.prototype.checkNegativeValid=function(){if(!(this._input instanceof $c||this._input instanceof nh||this._input instanceof jc))return null;var t=this.getPolygonLines(this._input);if(this.checkMinimumDistance(t,this._result,this._minValidDistance),!this._isValid)return null;this.checkMaximumDistance(t,this._result,this._maxValidDistance)},Fp.prototype.getErrorIndicator=function(){return this._errorIndicator},Fp.prototype.checkMinimumDistance=function(t,e,n){var r=new Lp(t,e,n);if(this._minDistanceFound=r.distance(),this._minDistanceFound<n){this._isValid=!1;var i=r.nearestPoints();this._errorLocation=r.nearestPoints()[1],this._errorIndicator=t.getFactory().createLineString(i),this._errMsg=\"Distance between buffer curve and input is too small (\"+this._minDistanceFound+\" at \"+Ku.toLineString(i[0],i[1])+\" )\"}},Fp.prototype.checkPositiveValid=function(){var t=this._result.getBoundary();if(this.checkMinimumDistance(this._input,t,this._minValidDistance),!this._isValid)return null;this.checkMaximumDistance(this._input,t,this._maxValidDistance)},Fp.prototype.getErrorLocation=function(){return this._errorLocation},Fp.prototype.getPolygonLines=function(t){for(var e=new bc,n=new bp(e),r=wp.getPolygons(t).iterator();r.hasNext();){r.next().apply(n)}return t.getFactory().buildGeometry(e)},Fp.prototype.getErrorMessage=function(){return this._errMsg},Fp.prototype.interfaces_=function(){return[]},Fp.prototype.getClass=function(){return Fp},qp.VERBOSE.get=function(){return!1},qp.MAX_DISTANCE_DIFF_FRAC.get=function(){return.012},Object.defineProperties(Fp,qp);var Gp=function(t,e,n){this._isValid=!0,this._errorMsg=null,this._errorLocation=null,this._errorIndicator=null,this._input=t||null,this._distance=e||null,this._result=n||null},Bp={VERBOSE:{configurable:!0},MAX_ENV_DIFF_FRAC:{configurable:!0}};Gp.prototype.isValid=function(){return this.checkPolygonal(),this._isValid?(this.checkExpectedEmpty(),this._isValid?(this.checkEnvelope(),this._isValid?(this.checkArea(),this._isValid?(this.checkDistance(),this._isValid):this._isValid):this._isValid):this._isValid):this._isValid},Gp.prototype.checkEnvelope=function(){if(this._distance<0)return null;var t=this._distance*Gp.MAX_ENV_DIFF_FRAC;0===t&&(t=.001);var e=new Yu(this._input.getEnvelopeInternal());e.expandBy(this._distance);var n=new Yu(this._result.getEnvelopeInternal());n.expandBy(t),n.contains(e)||(this._isValid=!1,this._errorMsg=\"Buffer envelope is incorrect\",this._errorIndicator=this._input.getFactory().toGeometry(n)),this.report(\"Envelope\")},Gp.prototype.checkDistance=function(){var t=new Fp(this._input,this._distance,this._result);t.isValid()||(this._isValid=!1,this._errorMsg=t.getErrorMessage(),this._errorLocation=t.getErrorLocation(),this._errorIndicator=t.getErrorIndicator()),this.report(\"Distance\")},Gp.prototype.checkArea=function(){var t=this._input.getArea(),e=this._result.getArea();this._distance>0&&t>e&&(this._isValid=!1,this._errorMsg=\"Area of positive buffer is smaller than input\",this._errorIndicator=this._result),this._distance<0&&t<e&&(this._isValid=!1,this._errorMsg=\"Area of negative buffer is larger than input\",this._errorIndicator=this._result),this.report(\"Area\")},Gp.prototype.checkPolygonal=function(){this._result instanceof $c||this._result instanceof nh||(this._isValid=!1),this._errorMsg=\"Result is not polygonal\",this._errorIndicator=this._result,this.report(\"Polygonal\")},Gp.prototype.getErrorIndicator=function(){return this._errorIndicator},Gp.prototype.getErrorLocation=function(){return this._errorLocation},Gp.prototype.checkExpectedEmpty=function(){return this._input.getDimension()>=2?null:this._distance>0?null:(this._result.isEmpty()||(this._isValid=!1,this._errorMsg=\"Result is non-empty\",this._errorIndicator=this._result),void this.report(\"ExpectedEmpty\"))},Gp.prototype.report=function(t){if(!Gp.VERBOSE)return null;Xu.out.println(\"Check \"+t+\": \"+(this._isValid?\"passed\":\"FAILED\"))},Gp.prototype.getErrorMessage=function(){return this._errorMsg},Gp.prototype.interfaces_=function(){return[]},Gp.prototype.getClass=function(){return Gp},Gp.isValidMsg=function(t,e,n){var r=new Gp(t,e,n);return r.isValid()?null:r.getErrorMessage()},Gp.isValid=function(t,e,n){return!!new Gp(t,e,n).isValid()},Bp.VERBOSE.get=function(){return!1},Bp.MAX_ENV_DIFF_FRAC.get=function(){return.012},Object.defineProperties(Gp,Bp);var kp=function(){this._pts=null,this._data=null;var t=arguments[0],e=arguments[1];this._pts=t,this._data=e};kp.prototype.getCoordinates=function(){return this._pts},kp.prototype.size=function(){return this._pts.length},kp.prototype.getCoordinate=function(t){return this._pts[t]},kp.prototype.isClosed=function(){return this._pts[0].equals(this._pts[this._pts.length-1])},kp.prototype.getSegmentOctant=function(t){return t===this._pts.length-1?-1:hl.octant(this.getCoordinate(t),this.getCoordinate(t+1))},kp.prototype.setData=function(t){this._data=t},kp.prototype.getData=function(){return this._data},kp.prototype.toString=function(){return Ku.toLineString(new uh(this._pts))},kp.prototype.interfaces_=function(){return[ll]},kp.prototype.getClass=function(){return kp};var zp=function(){this._findAllIntersections=!1,this._isCheckEndSegmentsOnly=!1,this._li=null,this._interiorIntersection=null,this._intSegments=null,this._intersections=new bc,this._intersectionCount=0,this._keepIntersections=!0;var t=arguments[0];this._li=t,this._interiorIntersection=null};zp.prototype.getInteriorIntersection=function(){return this._interiorIntersection},zp.prototype.setCheckEndSegmentsOnly=function(t){this._isCheckEndSegmentsOnly=t},zp.prototype.getIntersectionSegments=function(){return this._intSegments},zp.prototype.count=function(){return this._intersectionCount},zp.prototype.getIntersections=function(){return this._intersections},zp.prototype.setFindAllIntersections=function(t){this._findAllIntersections=t},zp.prototype.setKeepIntersections=function(t){this._keepIntersections=t},zp.prototype.processIntersections=function(t,e,n,r){if(!this._findAllIntersections&&this.hasIntersection())return null;if(t===n&&e===r)return null;if(this._isCheckEndSegmentsOnly){if(!(this.isEndSegment(t,e)||this.isEndSegment(n,r)))return null}var i=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[r],a=n.getCoordinates()[r+1];this._li.computeIntersection(i,o,s,a),this._li.hasIntersection()&&this._li.isInteriorIntersection()&&(this._intSegments=new Array(4).fill(null),this._intSegments[0]=i,this._intSegments[1]=o,this._intSegments[2]=s,this._intSegments[3]=a,this._interiorIntersection=this._li.getIntersection(0),this._keepIntersections&&this._intersections.add(this._interiorIntersection),this._intersectionCount++)},zp.prototype.isEndSegment=function(t,e){return 0===e||e>=t.size()-2},zp.prototype.hasIntersection=function(){return null!==this._interiorIntersection},zp.prototype.isDone=function(){return!this._findAllIntersections&&null!==this._interiorIntersection},zp.prototype.interfaces_=function(){return[Hl]},zp.prototype.getClass=function(){return zp},zp.createAllIntersectionsFinder=function(t){var e=new zp(t);return e.setFindAllIntersections(!0),e},zp.createAnyIntersectionFinder=function(t){return new zp(t)},zp.createIntersectionCounter=function(t){var e=new zp(t);return e.setFindAllIntersections(!0),e.setKeepIntersections(!1),e};var jp=function(){this._li=new rc,this._segStrings=null,this._findAllIntersections=!1,this._segInt=null,this._isValid=!0;var t=arguments[0];this._segStrings=t};jp.prototype.execute=function(){if(null!==this._segInt)return null;this.checkInteriorIntersections()},jp.prototype.getIntersections=function(){return this._segInt.getIntersections()},jp.prototype.isValid=function(){return this.execute(),this._isValid},jp.prototype.setFindAllIntersections=function(t){this._findAllIntersections=t},jp.prototype.checkInteriorIntersections=function(){this._isValid=!0,this._segInt=new zp(this._li),this._segInt.setFindAllIntersections(this._findAllIntersections);var t=new El;if(t.setSegmentIntersector(this._segInt),t.computeNodes(this._segStrings),this._segInt.hasIntersection())return this._isValid=!1,null},jp.prototype.checkValid=function(){if(this.execute(),!this._isValid)throw new Mh(this.getErrorMessage(),this._segInt.getInteriorIntersection())},jp.prototype.getErrorMessage=function(){if(this._isValid)return\"no intersections found\";var t=this._segInt.getIntersectionSegments();return\"found non-noded intersection between \"+Ku.toLineString(t[0],t[1])+\" and \"+Ku.toLineString(t[2],t[3])},jp.prototype.interfaces_=function(){return[]},jp.prototype.getClass=function(){return jp},jp.computeIntersections=function(t){var e=new jp(t);return e.setFindAllIntersections(!0),e.isValid(),e.getIntersections()};var Xp=function t(){this._nv=null;var e=arguments[0];this._nv=new jp(t.toSegmentStrings(e))};Xp.prototype.checkValid=function(){this._nv.checkValid()},Xp.prototype.interfaces_=function(){return[]},Xp.prototype.getClass=function(){return Xp},Xp.toSegmentStrings=function(t){for(var e=new bc,n=t.iterator();n.hasNext();){var r=n.next();e.add(new kp(r.getCoordinates(),r))}return e},Xp.checkValid=function(t){new Xp(t).checkValid()};var Up=function(t){this._mapOp=t};Up.prototype.map=function(t){for(var e=new bc,n=0;n<t.getNumGeometries();n++){var r=this._mapOp.map(t.getGeometryN(n));r.isEmpty()||e.add(r)}return t.getFactory().createGeometryCollection(_h.toGeometryArray(e))},Up.prototype.interfaces_=function(){return[]},Up.prototype.getClass=function(){return Up},Up.map=function(t,e){return new Up(e).map(t)};var Yp=function(){this._op=null,this._geometryFactory=null,this._ptLocator=null,this._lineEdgesList=new bc,this._resultLineList=new bc;var t=arguments[0],e=arguments[1],n=arguments[2];this._op=t,this._geometryFactory=e,this._ptLocator=n};Yp.prototype.collectLines=function(t){for(var e=this._op.getGraph().getEdgeEnds().iterator();e.hasNext();){var n=e.next();this.collectLineEdge(n,t,this._lineEdgesList),this.collectBoundaryTouchEdge(n,t,this._lineEdgesList)}},Yp.prototype.labelIsolatedLine=function(t,e){var n=this._ptLocator.locate(t.getCoordinate(),this._op.getArgGeometry(e));t.getLabel().setLocation(e,n)},Yp.prototype.build=function(t){return this.findCoveredLineEdges(),this.collectLines(t),this.buildLines(t),this._resultLineList},Yp.prototype.collectLineEdge=function(t,e,n){var r=t.getLabel(),i=t.getEdge();t.isLineEdge()&&(t.isVisited()||!Cf.isResultOfOp(r,e)||i.isCovered()||(n.add(i),t.setVisitedEdge(!0)))},Yp.prototype.findCoveredLineEdges=function(){for(var t=this._op.getGraph().getNodes().iterator();t.hasNext();){t.next().getEdges().findCoveredLineEdges()}for(var e=this._op.getGraph().getEdgeEnds().iterator();e.hasNext();){var n=e.next(),r=n.getEdge();if(n.isLineEdge()&&!r.isCoveredSet()){var i=this._op.isCoveredByA(n.getCoordinate());r.setCovered(i)}}},Yp.prototype.labelIsolatedLines=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next(),r=n.getLabel();n.isIsolated()&&(r.isNull(0)?this.labelIsolatedLine(n,0):this.labelIsolatedLine(n,1))}},Yp.prototype.buildLines=function(t){for(var e=this._lineEdgesList.iterator();e.hasNext();){var n=e.next(),r=this._geometryFactory.createLineString(n.getCoordinates());this._resultLineList.add(r),n.setInResult(!0)}},Yp.prototype.collectBoundaryTouchEdge=function(t,e,n){var r=t.getLabel();return t.isLineEdge()?null:t.isVisited()?null:t.isInteriorAreaEdge()?null:t.getEdge().isInResult()?null:(tc.isTrue(!(t.isInResult()||t.getSym().isInResult())||!t.getEdge().isInResult()),void(Cf.isResultOfOp(r,e)&&e===Cf.INTERSECTION&&(n.add(t.getEdge()),t.setVisitedEdge(!0))))},Yp.prototype.interfaces_=function(){return[]},Yp.prototype.getClass=function(){return Yp};var Vp=function(){this._op=null,this._geometryFactory=null,this._resultPointList=new bc;var t=arguments[0],e=arguments[1];this._op=t,this._geometryFactory=e};Vp.prototype.filterCoveredNodeToPoint=function(t){var e=t.getCoordinate();if(!this._op.isCoveredByLA(e)){var n=this._geometryFactory.createPoint(e);this._resultPointList.add(n)}},Vp.prototype.extractNonCoveredResultNodes=function(t){for(var e=this._op.getGraph().getNodes().iterator();e.hasNext();){var n=e.next();if(!n.isInResult()&&(!n.isIncidentEdgeInResult()&&(0===n.getEdges().getDegree()||t===Cf.INTERSECTION))){var r=n.getLabel();Cf.isResultOfOp(r,t)&&this.filterCoveredNodeToPoint(n)}}},Vp.prototype.build=function(t){return this.extractNonCoveredResultNodes(t),this._resultPointList},Vp.prototype.interfaces_=function(){return[]},Vp.prototype.getClass=function(){return Vp};var Hp=function(){this._inputGeom=null,this._factory=null,this._pruneEmptyGeometry=!0,this._preserveGeometryCollectionType=!0,this._preserveCollections=!1,this._preserveType=!1};Hp.prototype.transformPoint=function(t,e){return this._factory.createPoint(this.transformCoordinates(t.getCoordinateSequence(),t))},Hp.prototype.transformPolygon=function(t,e){var n=!0,r=this.transformLinearRing(t.getExteriorRing(),t);null!==r&&r instanceof eh&&!r.isEmpty()||(n=!1);for(var i=new bc,o=0;o<t.getNumInteriorRing();o++){var s=this.transformLinearRing(t.getInteriorRingN(o),t);null===s||s.isEmpty()||(s instanceof eh||(n=!1),i.add(s))}if(n)return this._factory.createPolygon(r,i.toArray([]));var a=new bc;return null!==r&&a.add(r),a.addAll(i),this._factory.buildGeometry(a)},Hp.prototype.createCoordinateSequence=function(t){return this._factory.getCoordinateSequenceFactory().create(t)},Hp.prototype.getInputGeometry=function(){return this._inputGeom},Hp.prototype.transformMultiLineString=function(t,e){for(var n=new bc,r=0;r<t.getNumGeometries();r++){var i=this.transformLineString(t.getGeometryN(r),t);null!==i&&(i.isEmpty()||n.add(i))}return this._factory.buildGeometry(n)},Hp.prototype.transformCoordinates=function(t,e){return this.copy(t)},Hp.prototype.transformLineString=function(t,e){return this._factory.createLineString(this.transformCoordinates(t.getCoordinateSequence(),t))},Hp.prototype.transformMultiPoint=function(t,e){for(var n=new bc,r=0;r<t.getNumGeometries();r++){var i=this.transformPoint(t.getGeometryN(r),t);null!==i&&(i.isEmpty()||n.add(i))}return this._factory.buildGeometry(n)},Hp.prototype.transformMultiPolygon=function(t,e){for(var n=new bc,r=0;r<t.getNumGeometries();r++){var i=this.transformPolygon(t.getGeometryN(r),t);null!==i&&(i.isEmpty()||n.add(i))}return this._factory.buildGeometry(n)},Hp.prototype.copy=function(t){return t.copy()},Hp.prototype.transformGeometryCollection=function(t,e){for(var n=new bc,r=0;r<t.getNumGeometries();r++){var i=this.transform(t.getGeometryN(r));null!==i&&(this._pruneEmptyGeometry&&i.isEmpty()||n.add(i))}return this._preserveGeometryCollectionType?this._factory.createGeometryCollection(_h.toGeometryArray(n)):this._factory.buildGeometry(n)},Hp.prototype.transform=function(t){if(this._inputGeom=t,this._factory=t.getFactory(),t instanceof Kc)return this.transformPoint(t,null);if(t instanceof th)return this.transformMultiPoint(t,null);if(t instanceof eh)return this.transformLinearRing(t,null);if(t instanceof Jc)return this.transformLineString(t,null);if(t instanceof Xc)return this.transformMultiLineString(t,null);if(t instanceof $c)return this.transformPolygon(t,null);if(t instanceof nh)return this.transformMultiPolygon(t,null);if(t instanceof jc)return this.transformGeometryCollection(t,null);throw new _u(\"Unknown Geometry subtype: \"+t.getClass().getName())},Hp.prototype.transformLinearRing=function(t,e){var n=this.transformCoordinates(t.getCoordinateSequence(),t);if(null===n)return this._factory.createLinearRing(null);var r=n.size();return r>0&&r<4&&!this._preserveType?this._factory.createLineString(n):this._factory.createLinearRing(n)},Hp.prototype.interfaces_=function(){return[]},Hp.prototype.getClass=function(){return Hp};var Wp=function t(){if(this._snapTolerance=0,this._srcPts=null,this._seg=new gl,this._allowSnappingToSourceVertices=!1,this._isClosed=!1,arguments[0]instanceof Jc&&\"number\"==typeof arguments[1]){var e=arguments[0],n=arguments[1];t.call(this,e.getCoordinates(),n)}else if(arguments[0]instanceof Array&&\"number\"==typeof arguments[1]){var r=arguments[0],i=arguments[1];this._srcPts=r,this._isClosed=t.isClosed(r),this._snapTolerance=i}};Wp.prototype.snapVertices=function(t,e){for(var n=this._isClosed?t.size()-1:t.size(),r=0;r<n;r++){var i=t.get(r),o=this.findSnapForVertex(i,e);null!==o&&(t.set(r,new bu(o)),0===r&&this._isClosed&&t.set(t.size()-1,new bu(o)))}},Wp.prototype.findSnapForVertex=function(t,e){for(var n=0;n<e.length;n++){if(t.equals2D(e[n]))return null;if(t.distance(e[n])<this._snapTolerance)return e[n]}return null},Wp.prototype.snapTo=function(t){var e=new Nc(this._srcPts);this.snapVertices(e,t),this.snapSegments(e,t);return e.toCoordinateArray()},Wp.prototype.snapSegments=function(t,e){if(0===e.length)return null;var n=e.length;e[0].equals2D(e[e.length-1])&&(n=e.length-1);for(var r=0;r<n;r++){var i=e[r],o=this.findSegmentIndexToSnap(i,t);o>=0&&t.add(o+1,new bu(i),!1)}},Wp.prototype.findSegmentIndexToSnap=function(t,e){for(var n=mu.MAX_VALUE,r=-1,i=0;i<e.size()-1;i++){if(this._seg.p0=e.get(i),this._seg.p1=e.get(i+1),this._seg.p0.equals2D(t)||this._seg.p1.equals2D(t)){if(this._allowSnappingToSourceVertices)continue;return-1}var o=this._seg.distance(t);o<this._snapTolerance&&o<n&&(n=o,r=i)}return r},Wp.prototype.setAllowSnappingToSourceVertices=function(t){this._allowSnappingToSourceVertices=t},Wp.prototype.interfaces_=function(){return[]},Wp.prototype.getClass=function(){return Wp},Wp.isClosed=function(t){return!(t.length<=1)&&t[0].equals2D(t[t.length-1])};var Jp=function(t){this._srcGeom=t||null},Zp={SNAP_PRECISION_FACTOR:{configurable:!0}};Jp.prototype.snapTo=function(t,e){var n=this.extractTargetCoordinates(t);return new Kp(e,n).transform(this._srcGeom)},Jp.prototype.snapToSelf=function(t,e){var n=this.extractTargetCoordinates(this._srcGeom),r=new Kp(t,n,!0).transform(this._srcGeom),i=r;return e&&Lu(i,Qc)&&(i=r.buffer(0)),i},Jp.prototype.computeSnapTolerance=function(t){return this.computeMinimumSegmentLength(t)/10},Jp.prototype.extractTargetCoordinates=function(t){for(var e=new ki,n=t.getCoordinates(),r=0;r<n.length;r++)e.add(n[r]);return e.toArray(new Array(0).fill(null))},Jp.prototype.computeMinimumSegmentLength=function(t){for(var e=mu.MAX_VALUE,n=0;n<t.length-1;n++){var r=t[n].distance(t[n+1]);r<e&&(e=r)}return e},Jp.prototype.interfaces_=function(){return[]},Jp.prototype.getClass=function(){return Jp},Jp.snap=function(t,e,n){var r=new Array(2).fill(null),i=new Jp(t);r[0]=i.snapTo(e,n);var o=new Jp(e);return r[1]=o.snapTo(r[0],n),r},Jp.computeOverlaySnapTolerance=function(){if(1===arguments.length){var t=arguments[0],e=Jp.computeSizeBasedSnapTolerance(t),n=t.getPrecisionModel();if(n.getType()===fh.FIXED){var r=1/n.getScale()*2/1.415;r>e&&(e=r)}return e}if(2===arguments.length){var i=arguments[0],o=arguments[1];return Math.min(Jp.computeOverlaySnapTolerance(i),Jp.computeOverlaySnapTolerance(o))}},Jp.computeSizeBasedSnapTolerance=function(t){var e=t.getEnvelopeInternal();return Math.min(e.getHeight(),e.getWidth())*Jp.SNAP_PRECISION_FACTOR},Jp.snapToSelf=function(t,e,n){return new Jp(t).snapToSelf(e,n)},Zp.SNAP_PRECISION_FACTOR.get=function(){return 1e-9},Object.defineProperties(Jp,Zp);var Kp=function(t){function e(e,n,r){t.call(this),this._snapTolerance=e||null,this._snapPts=n||null,this._isSelfSnap=void 0!==r&&r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.snapLine=function(t,e){var n=new Wp(t,this._snapTolerance);return n.setAllowSnappingToSourceVertices(this._isSelfSnap),n.snapTo(e)},e.prototype.transformCoordinates=function(t,e){var n=t.toCoordinateArray(),r=this.snapLine(n,this._snapPts);return this._factory.getCoordinateSequenceFactory().create(r)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(Hp),Qp=function(){this._isFirst=!0,this._commonMantissaBitsCount=53,this._commonBits=0,this._commonSignExp=null};Qp.prototype.getCommon=function(){return mu.longBitsToDouble(this._commonBits)},Qp.prototype.add=function(t){var e=mu.doubleToLongBits(t);if(this._isFirst)return this._commonBits=e,this._commonSignExp=Qp.signExpBits(this._commonBits),this._isFirst=!1,null;if(Qp.signExpBits(e)!==this._commonSignExp)return this._commonBits=0,null;this._commonMantissaBitsCount=Qp.numCommonMostSigMantissaBits(this._commonBits,e),this._commonBits=Qp.zeroLowerBits(this._commonBits,64-(12+this._commonMantissaBitsCount))},Qp.prototype.toString=function(){if(1===arguments.length){var t=arguments[0],e=mu.longBitsToDouble(t),n=\"0000000000000000000000000000000000000000000000000000000000000000\"+mu.toBinaryString(t),r=n.substring(n.length-64);return r.substring(0,1)+\"  \"+r.substring(1,12)+\"(exp) \"+r.substring(12)+\" [ \"+e+\" ]\"}},Qp.prototype.interfaces_=function(){return[]},Qp.prototype.getClass=function(){return Qp},Qp.getBit=function(t,e){return 0!=(t&1<<e)?1:0},Qp.signExpBits=function(t){return t>>52},Qp.zeroLowerBits=function(t,e){return t&~((1<<e)-1)},Qp.numCommonMostSigMantissaBits=function(t,e){for(var n=0,r=52;r>=0;r--){if(Qp.getBit(t,r)!==Qp.getBit(e,r))return n;n++}return 52};var $p=function(){this._commonCoord=null,this._ccFilter=new ef},tf={CommonCoordinateFilter:{configurable:!0},Translater:{configurable:!0}};$p.prototype.addCommonBits=function(t){var e=new nf(this._commonCoord);t.apply(e),t.geometryChanged()},$p.prototype.removeCommonBits=function(t){if(0===this._commonCoord.x&&0===this._commonCoord.y)return t;var e=new bu(this._commonCoord);e.x=-e.x,e.y=-e.y;var n=new nf(e);return t.apply(n),t.geometryChanged(),t},$p.prototype.getCommonCoordinate=function(){return this._commonCoord},$p.prototype.add=function(t){t.apply(this._ccFilter),this._commonCoord=this._ccFilter.getCommonCoordinate()},$p.prototype.interfaces_=function(){return[]},$p.prototype.getClass=function(){return $p},tf.CommonCoordinateFilter.get=function(){return ef},tf.Translater.get=function(){return nf},Object.defineProperties($p,tf);var ef=function(){this._commonBitsX=new Qp,this._commonBitsY=new Qp};ef.prototype.filter=function(t){this._commonBitsX.add(t.x),this._commonBitsY.add(t.y)},ef.prototype.getCommonCoordinate=function(){return new bu(this._commonBitsX.getCommon(),this._commonBitsY.getCommon())},ef.prototype.interfaces_=function(){return[pc]},ef.prototype.getClass=function(){return ef};var nf=function(){this.trans=null;var t=arguments[0];this.trans=t};nf.prototype.filter=function(t,e){var n=t.getOrdinate(e,0)+this.trans.x,r=t.getOrdinate(e,1)+this.trans.y;t.setOrdinate(e,0,n),t.setOrdinate(e,1,r)},nf.prototype.isDone=function(){return!1},nf.prototype.isGeometryChanged=function(){return!0},nf.prototype.interfaces_=function(){return[zc]},nf.prototype.getClass=function(){return nf};var rf=function(t,e){this._geom=new Array(2).fill(null),this._snapTolerance=null,this._cbr=null,this._geom[0]=t,this._geom[1]=e,this.computeSnapTolerance()};rf.prototype.selfSnap=function(t){return new Jp(t).snapTo(t,this._snapTolerance)},rf.prototype.removeCommonBits=function(t){this._cbr=new $p,this._cbr.add(t[0]),this._cbr.add(t[1]);var e=new Array(2).fill(null);return e[0]=this._cbr.removeCommonBits(t[0].copy()),e[1]=this._cbr.removeCommonBits(t[1].copy()),e},rf.prototype.prepareResult=function(t){return this._cbr.addCommonBits(t),t},rf.prototype.getResultGeometry=function(t){var e=this.snap(this._geom),n=Cf.overlayOp(e[0],e[1],t);return this.prepareResult(n)},rf.prototype.checkValid=function(t){t.isValid()||Xu.out.println(\"Snapped geometry is invalid\")},rf.prototype.computeSnapTolerance=function(){this._snapTolerance=Jp.computeOverlaySnapTolerance(this._geom[0],this._geom[1])},rf.prototype.snap=function(t){var e=this.removeCommonBits(t);return Jp.snap(e[0],e[1],this._snapTolerance)},rf.prototype.interfaces_=function(){return[]},rf.prototype.getClass=function(){return rf},rf.overlayOp=function(t,e,n){return new rf(t,e).getResultGeometry(n)},rf.union=function(t,e){return rf.overlayOp(t,e,Cf.UNION)},rf.intersection=function(t,e){return rf.overlayOp(t,e,Cf.INTERSECTION)},rf.symDifference=function(t,e){return rf.overlayOp(t,e,Cf.SYMDIFFERENCE)},rf.difference=function(t,e){return rf.overlayOp(t,e,Cf.DIFFERENCE)};var of=function(t,e){this._geom=new Array(2).fill(null),this._geom[0]=t,this._geom[1]=e};of.prototype.getResultGeometry=function(t){var e=null,n=!1,r=null;try{e=Cf.overlayOp(this._geom[0],this._geom[1],t);n=!0}catch(t){if(!(t instanceof Qu))throw t;r=t}if(!n)try{e=rf.overlayOp(this._geom[0],this._geom[1],t)}catch(t){throw t instanceof Qu?r:t}return e},of.prototype.interfaces_=function(){return[]},of.prototype.getClass=function(){return of},of.overlayOp=function(t,e,n){return new of(t,e).getResultGeometry(n)},of.union=function(t,e){return of.overlayOp(t,e,Cf.UNION)},of.intersection=function(t,e){return of.overlayOp(t,e,Cf.INTERSECTION)},of.symDifference=function(t,e){return of.overlayOp(t,e,Cf.SYMDIFFERENCE)},of.difference=function(t,e){return of.overlayOp(t,e,Cf.DIFFERENCE)};var sf=function(){this.mce=null,this.chainIndex=null;var t=arguments[0],e=arguments[1];this.mce=t,this.chainIndex=e};sf.prototype.computeIntersections=function(t,e){this.mce.computeIntersectsForChain(this.chainIndex,t.mce,t.chainIndex,e)},sf.prototype.interfaces_=function(){return[]},sf.prototype.getClass=function(){return sf};var af=function t(){if(this._label=null,this._xValue=null,this._eventType=null,this._insertEvent=null,this._deleteEventIndex=null,this._obj=null,2===arguments.length){var e=arguments[0],n=arguments[1];this._eventType=t.DELETE,this._xValue=e,this._insertEvent=n}else if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];this._eventType=t.INSERT,this._label=r,this._xValue=i,this._obj=o}},uf={INSERT:{configurable:!0},DELETE:{configurable:!0}};af.prototype.isDelete=function(){return this._eventType===af.DELETE},af.prototype.setDeleteEventIndex=function(t){this._deleteEventIndex=t},af.prototype.getObject=function(){return this._obj},af.prototype.compareTo=function(t){var e=t;return this._xValue<e._xValue?-1:this._xValue>e._xValue?1:this._eventType<e._eventType?-1:this._eventType>e._eventType?1:0},af.prototype.getInsertEvent=function(){return this._insertEvent},af.prototype.isInsert=function(){return this._eventType===af.INSERT},af.prototype.isSameLabel=function(t){return null!==this._label&&this._label===t._label},af.prototype.getDeleteEventIndex=function(){return this._deleteEventIndex},af.prototype.interfaces_=function(){return[xu]},af.prototype.getClass=function(){return af},uf.INSERT.get=function(){return 1},uf.DELETE.get=function(){return 2},Object.defineProperties(af,uf);var cf=function(){};cf.prototype.interfaces_=function(){return[]},cf.prototype.getClass=function(){return cf};var hf=function(){this._hasIntersection=!1,this._hasProper=!1,this._hasProperInterior=!1,this._properIntersectionPoint=null,this._li=null,this._includeProper=null,this._recordIsolated=null,this._isSelfIntersection=null,this._numIntersections=0,this.numTests=0,this._bdyNodes=null,this._isDone=!1,this._isDoneWhenProperInt=!1;var t=arguments[0],e=arguments[1],n=arguments[2];this._li=t,this._includeProper=e,this._recordIsolated=n};hf.prototype.isTrivialIntersection=function(t,e,n,r){if(t===n&&1===this._li.getIntersectionNum()){if(hf.isAdjacentSegments(e,r))return!0;if(t.isClosed()){var i=t.getNumPoints()-1;if(0===e&&r===i||0===r&&e===i)return!0}}return!1},hf.prototype.getProperIntersectionPoint=function(){return this._properIntersectionPoint},hf.prototype.setIsDoneIfProperInt=function(t){this._isDoneWhenProperInt=t},hf.prototype.hasProperInteriorIntersection=function(){return this._hasProperInterior},hf.prototype.isBoundaryPointInternal=function(t,e){for(var n=e.iterator();n.hasNext();){var r=n.next().getCoordinate();if(t.isIntersection(r))return!0}return!1},hf.prototype.hasProperIntersection=function(){return this._hasProper},hf.prototype.hasIntersection=function(){return this._hasIntersection},hf.prototype.isDone=function(){return this._isDone},hf.prototype.isBoundaryPoint=function(t,e){return null!==e&&(!!this.isBoundaryPointInternal(t,e[0])||!!this.isBoundaryPointInternal(t,e[1]))},hf.prototype.setBoundaryNodes=function(t,e){this._bdyNodes=new Array(2).fill(null),this._bdyNodes[0]=t,this._bdyNodes[1]=e},hf.prototype.addIntersections=function(t,e,n,r){if(t===n&&e===r)return null;this.numTests++;var i=t.getCoordinates()[e],o=t.getCoordinates()[e+1],s=n.getCoordinates()[r],a=n.getCoordinates()[r+1];this._li.computeIntersection(i,o,s,a),this._li.hasIntersection()&&(this._recordIsolated&&(t.setIsolated(!1),n.setIsolated(!1)),this._numIntersections++,this.isTrivialIntersection(t,e,n,r)||(this._hasIntersection=!0,!this._includeProper&&this._li.isProper()||(t.addIntersections(this._li,e,0),n.addIntersections(this._li,r,1)),this._li.isProper()&&(this._properIntersectionPoint=this._li.getIntersection(0).copy(),this._hasProper=!0,this._isDoneWhenProperInt&&(this._isDone=!0),this.isBoundaryPoint(this._li,this._bdyNodes)||(this._hasProperInterior=!0))))},hf.prototype.interfaces_=function(){return[]},hf.prototype.getClass=function(){return hf},hf.isAdjacentSegments=function(t,e){return 1===Math.abs(t-e)};var lf=function(t){function e(){t.call(this),this.events=new bc,this.nOverlaps=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.prepareEvents=function(){$h.sort(this.events);for(var t=0;t<this.events.size();t++){var e=this.events.get(t);e.isDelete()&&e.getInsertEvent().setDeleteEventIndex(t)}},e.prototype.computeIntersections=function(){if(1===arguments.length){var t=arguments[0];this.nOverlaps=0,this.prepareEvents();for(var e=0;e<this.events.size();e++){var n=this.events.get(e);if(n.isInsert()&&this.processOverlaps(e,n.getDeleteEventIndex(),n,t),t.isDone())break}}else if(3===arguments.length)if(arguments[2]instanceof hf&&Lu(arguments[0],wc)&&Lu(arguments[1],wc)){var r=arguments[0],i=arguments[1],o=arguments[2];this.addEdges(r,r),this.addEdges(i,i),this.computeIntersections(o)}else if(\"boolean\"==typeof arguments[2]&&Lu(arguments[0],wc)&&arguments[1]instanceof hf){var s=arguments[0],a=arguments[1];arguments[2]?this.addEdges(s,null):this.addEdges(s),this.computeIntersections(a)}},e.prototype.addEdge=function(t,e){for(var n=t.getMonotoneChainEdge(),r=n.getStartIndexes(),i=0;i<r.length-1;i++){var o=new sf(n,i),s=new af(e,n.getMinX(i),o);this.events.add(s),this.events.add(new af(n.getMaxX(i),s))}},e.prototype.processOverlaps=function(t,e,n,r){for(var i=n.getObject(),o=t;o<e;o++){var s=this.events.get(o);if(s.isInsert()){var a=s.getObject();n.isSameLabel(s)||(i.computeIntersections(a,r),this.nOverlaps++)}}},e.prototype.addEdges=function(){if(1===arguments.length)for(var t=arguments[0].iterator();t.hasNext();){var e=t.next();this.addEdge(e,e)}else if(2===arguments.length)for(var n=arguments[0],r=arguments[1],i=n.iterator();i.hasNext();){var o=i.next();this.addEdge(o,r)}},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(cf),pf=function(){this._min=mu.POSITIVE_INFINITY,this._max=mu.NEGATIVE_INFINITY},ff={NodeComparator:{configurable:!0}};pf.prototype.getMin=function(){return this._min},pf.prototype.intersects=function(t,e){return!(this._min>e||this._max<t)},pf.prototype.getMax=function(){return this._max},pf.prototype.toString=function(){return Ku.toLineString(new bu(this._min,0),new bu(this._max,0))},pf.prototype.interfaces_=function(){return[]},pf.prototype.getClass=function(){return pf},ff.NodeComparator.get=function(){return gf},Object.defineProperties(pf,ff);var gf=function(){};gf.prototype.compare=function(t,e){var n=t,r=e,i=(n._min+n._max)/2,o=(r._min+r._max)/2;return i<o?-1:i>o?1:0},gf.prototype.interfaces_=function(){return[wu]},gf.prototype.getClass=function(){return gf};var df=function(t){function e(){t.call(this),this._item=null;var e=arguments[0],n=arguments[1],r=arguments[2];this._min=e,this._max=n,this._item=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.query=function(t,e,n){if(!this.intersects(t,e))return null;n.visitItem(this._item)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(pf),yf=function(t){function e(){t.call(this),this._node1=null,this._node2=null;var e=arguments[0],n=arguments[1];this._node1=e,this._node2=n,this.buildExtent(this._node1,this._node2)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.buildExtent=function(t,e){this._min=Math.min(t._min,e._min),this._max=Math.max(t._max,e._max)},e.prototype.query=function(t,e,n){if(!this.intersects(t,e))return null;null!==this._node1&&this._node1.query(t,e,n),null!==this._node2&&this._node2.query(t,e,n)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(pf),_f=function(){this._leaves=new bc,this._root=null,this._level=0};_f.prototype.buildTree=function(){$h.sort(this._leaves,new pf.NodeComparator);for(var t=this._leaves,e=null,n=new bc;;){if(this.buildLevel(t,n),1===n.size())return n.get(0);e=t,t=n,n=e}},_f.prototype.insert=function(t,e,n){if(null!==this._root)throw new Error(\"Index cannot be added to once it has been queried\");this._leaves.add(new df(t,e,n))},_f.prototype.query=function(t,e,n){this.init(),this._root.query(t,e,n)},_f.prototype.buildRoot=function(){if(null!==this._root)return null;this._root=this.buildTree()},_f.prototype.printNode=function(t){Xu.out.println(Ku.toLineString(new bu(t._min,this._level),new bu(t._max,this._level)))},_f.prototype.init=function(){if(null!==this._root)return null;this.buildRoot()},_f.prototype.buildLevel=function(t,e){this._level++,e.clear();for(var n=0;n<t.size();n+=2){var r=t.get(n);if(null===(n+1<t.size()?t.get(n):null))e.add(r);else{var i=new yf(t.get(n),t.get(n+1));e.add(i)}}},_f.prototype.interfaces_=function(){return[]},_f.prototype.getClass=function(){return _f};var mf=function(){this._items=new bc};mf.prototype.visitItem=function(t){this._items.add(t)},mf.prototype.getItems=function(){return this._items},mf.prototype.interfaces_=function(){return[Jh]},mf.prototype.getClass=function(){return mf};var vf=function(){this._index=null;var t=arguments[0];if(!Lu(t,Qc))throw new _u(\"Argument must be Polygonal\");this._index=new wf(t)},xf={SegmentVisitor:{configurable:!0},IntervalIndexedGeometry:{configurable:!0}};vf.prototype.locate=function(t){var e=new oc(t),n=new Ef(e);return this._index.query(t.y,t.y,n),e.getLocation()},vf.prototype.interfaces_=function(){return[Bl]},vf.prototype.getClass=function(){return vf},xf.SegmentVisitor.get=function(){return Ef},xf.IntervalIndexedGeometry.get=function(){return wf},Object.defineProperties(vf,xf);var Ef=function(){this._counter=null;var t=arguments[0];this._counter=t};Ef.prototype.visitItem=function(t){var e=t;this._counter.countSegment(e.getCoordinate(0),e.getCoordinate(1))},Ef.prototype.interfaces_=function(){return[Jh]},Ef.prototype.getClass=function(){return Ef};var wf=function(){this._index=new _f;var t=arguments[0];this.init(t)};wf.prototype.init=function(t){for(var e=bp.getLines(t).iterator();e.hasNext();){var n=e.next().getCoordinates();this.addLine(n)}},wf.prototype.addLine=function(t){for(var e=1;e<t.length;e++){var n=new gl(t[e-1],t[e]),r=Math.min(n.p0.y,n.p1.y),i=Math.max(n.p0.y,n.p1.y);this._index.insert(r,i,n)}},wf.prototype.query=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new mf;return this._index.query(t,e,n),n.getItems()}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];this._index.query(r,i,o)}},wf.prototype.interfaces_=function(){return[]},wf.prototype.getClass=function(){return wf};var bf=function(t){function e(){if(t.call(this),this._parentGeom=null,this._lineEdgeMap=new ph,this._boundaryNodeRule=null,this._useBoundaryDeterminationRule=!0,this._argIndex=null,this._boundaryNodes=null,this._hasTooFewPoints=!1,this._invalidPoint=null,this._areaPtLocator=null,this._ptLocator=new Ip,2===arguments.length){var e=arguments[0],n=arguments[1],r=fc.OGC_SFS_BOUNDARY_RULE;this._argIndex=e,this._parentGeom=n,this._boundaryNodeRule=r,null!==n&&this.add(n)}else if(3===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2];this._argIndex=i,this._parentGeom=o,this._boundaryNodeRule=s,null!==o&&this.add(o)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.insertBoundaryPoint=function(t,n){var r=this._nodes.addNode(n).getLabel(),i=1;Su.NONE;r.getLocation(t,Nh.ON)===Su.BOUNDARY&&i++;var o=e.determineBoundary(this._boundaryNodeRule,i);r.setLocation(t,o)},e.prototype.computeSelfNodes=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.computeSelfNodes(t,e,!1)}if(3===arguments.length){var n=arguments[0],r=arguments[1],i=arguments[2],o=new hf(n,!0,!1);o.setIsDoneIfProperInt(i);var s=this.createEdgeSetIntersector(),a=this._parentGeom instanceof eh||this._parentGeom instanceof $c||this._parentGeom instanceof nh,u=r||!a;return s.computeIntersections(this._edges,o,u),this.addSelfIntersectionNodes(this._argIndex),o}},e.prototype.computeSplitEdges=function(t){for(var e=this._edges.iterator();e.hasNext();){e.next().eiList.addSplitEdges(t)}},e.prototype.computeEdgeIntersections=function(t,e,n){var r=new hf(e,n,!0);r.setBoundaryNodes(this.getBoundaryNodes(),t.getBoundaryNodes());return this.createEdgeSetIntersector().computeIntersections(this._edges,t._edges,r),r},e.prototype.getGeometry=function(){return this._parentGeom},e.prototype.getBoundaryNodeRule=function(){return this._boundaryNodeRule},e.prototype.hasTooFewPoints=function(){return this._hasTooFewPoints},e.prototype.addPoint=function(){if(arguments[0]instanceof Kc){var t=arguments[0].getCoordinate();this.insertPoint(this._argIndex,t,Su.INTERIOR)}else if(arguments[0]instanceof bu){var e=arguments[0];this.insertPoint(this._argIndex,e,Su.INTERIOR)}},e.prototype.addPolygon=function(t){this.addPolygonRing(t.getExteriorRing(),Su.EXTERIOR,Su.INTERIOR);for(var e=0;e<t.getNumInteriorRing();e++){var n=t.getInteriorRingN(e);this.addPolygonRing(n,Su.INTERIOR,Su.EXTERIOR)}},e.prototype.addEdge=function(t){this.insertEdge(t);var e=t.getCoordinates();this.insertPoint(this._argIndex,e[0],Su.BOUNDARY),this.insertPoint(this._argIndex,e[e.length-1],Su.BOUNDARY)},e.prototype.addLineString=function(t){var e=Cc.removeRepeatedPoints(t.getCoordinates());if(e.length<2)return this._hasTooFewPoints=!0,this._invalidPoint=e[0],null;var n=new ep(e,new Rh(this._argIndex,Su.INTERIOR));this._lineEdgeMap.put(t,n),this.insertEdge(n),tc.isTrue(e.length>=2,\"found LineString with single point\"),this.insertBoundaryPoint(this._argIndex,e[0]),this.insertBoundaryPoint(this._argIndex,e[e.length-1])},e.prototype.getInvalidPoint=function(){return this._invalidPoint},e.prototype.getBoundaryPoints=function(){for(var t=this.getBoundaryNodes(),e=new Array(t.size()).fill(null),n=0,r=t.iterator();r.hasNext();){var i=r.next();e[n++]=i.getCoordinate().copy()}return e},e.prototype.getBoundaryNodes=function(){return null===this._boundaryNodes&&(this._boundaryNodes=this._nodes.getBoundaryNodes(this._argIndex)),this._boundaryNodes},e.prototype.addSelfIntersectionNode=function(t,e,n){if(this.isBoundaryNode(t,e))return null;n===Su.BOUNDARY&&this._useBoundaryDeterminationRule?this.insertBoundaryPoint(t,e):this.insertPoint(t,e,n)},e.prototype.addPolygonRing=function(t,e,n){if(t.isEmpty())return null;var r=Cc.removeRepeatedPoints(t.getCoordinates());if(r.length<4)return this._hasTooFewPoints=!0,this._invalidPoint=r[0],null;var i=e,o=n;sc.isCCW(r)&&(i=n,o=e);var s=new ep(r,new Rh(this._argIndex,Su.BOUNDARY,i,o));this._lineEdgeMap.put(t,s),this.insertEdge(s),this.insertPoint(this._argIndex,r[0],Su.BOUNDARY)},e.prototype.insertPoint=function(t,e,n){var r=this._nodes.addNode(e),i=r.getLabel();null===i?r._label=new Rh(t,n):i.setLocation(t,n)},e.prototype.createEdgeSetIntersector=function(){return new lf},e.prototype.addSelfIntersectionNodes=function(t){for(var e=this._edges.iterator();e.hasNext();)for(var n=e.next(),r=n.getLabel().getLocation(t),i=n.eiList.iterator();i.hasNext();){var o=i.next();this.addSelfIntersectionNode(t,o.coord,r)}},e.prototype.add=function(){if(1!==arguments.length)return t.prototype.add.apply(this,arguments);var e=arguments[0];if(e.isEmpty())return null;if(e instanceof nh&&(this._useBoundaryDeterminationRule=!1),e instanceof $c)this.addPolygon(e);else if(e instanceof Jc)this.addLineString(e);else if(e instanceof Kc)this.addPoint(e);else if(e instanceof th)this.addCollection(e);else if(e instanceof Xc)this.addCollection(e);else if(e instanceof nh)this.addCollection(e);else{if(!(e instanceof jc))throw new Error(e.getClass().getName());this.addCollection(e)}},e.prototype.addCollection=function(t){for(var e=0;e<t.getNumGeometries();e++){var n=t.getGeometryN(e);this.add(n)}},e.prototype.locate=function(t){return Lu(this._parentGeom,Qc)&&this._parentGeom.getNumGeometries()>50?(null===this._areaPtLocator&&(this._areaPtLocator=new vf(this._parentGeom)),this._areaPtLocator.locate(t)):this._ptLocator.locate(t,this._parentGeom)},e.prototype.findEdge=function(){if(1===arguments.length){var e=arguments[0];return this._lineEdgeMap.get(e)}return t.prototype.findEdge.apply(this,arguments)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e.determineBoundary=function(t,e){return t.isInBoundary(e)?Su.BOUNDARY:Su.INTERIOR},e}(Uh),If=function(){if(this._li=new rc,this._resultPrecisionModel=null,this._arg=null,1===arguments.length){var t=arguments[0];this.setComputationPrecision(t.getPrecisionModel()),this._arg=new Array(1).fill(null),this._arg[0]=new bf(0,t)}else if(2===arguments.length){var e=arguments[0],n=arguments[1],r=fc.OGC_SFS_BOUNDARY_RULE;e.getPrecisionModel().compareTo(n.getPrecisionModel())>=0?this.setComputationPrecision(e.getPrecisionModel()):this.setComputationPrecision(n.getPrecisionModel()),this._arg=new Array(2).fill(null),this._arg[0]=new bf(0,e,r),this._arg[1]=new bf(1,n,r)}else if(3===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2];i.getPrecisionModel().compareTo(o.getPrecisionModel())>=0?this.setComputationPrecision(i.getPrecisionModel()):this.setComputationPrecision(o.getPrecisionModel()),this._arg=new Array(2).fill(null),this._arg[0]=new bf(0,i,s),this._arg[1]=new bf(1,o,s)}};If.prototype.getArgGeometry=function(t){return this._arg[t].getGeometry()},If.prototype.setComputationPrecision=function(t){this._resultPrecisionModel=t,this._li.setPrecisionModel(this._resultPrecisionModel)},If.prototype.interfaces_=function(){return[]},If.prototype.getClass=function(){return If};var Nf=function(){};Nf.prototype.interfaces_=function(){return[]},Nf.prototype.getClass=function(){return Nf},Nf.map=function(){if(arguments[0]instanceof cc&&Lu(arguments[1],Nf.MapOp)){for(var t=arguments[0],e=arguments[1],n=new bc,r=0;r<t.getNumGeometries();r++){var i=e.map(t.getGeometryN(r));null!==i&&n.add(i)}return t.getFactory().buildGeometry(n)}if(Lu(arguments[0],vc)&&Lu(arguments[1],Nf.MapOp)){for(var o=arguments[0],s=arguments[1],a=new bc,u=o.iterator();u.hasNext();){var c=u.next(),h=s.map(c);null!==h&&a.add(h)}return a}},Nf.MapOp=function(){};var Cf=function(t){function e(){var e=arguments[0],n=arguments[1];t.call(this,e,n),this._ptLocator=new Ip,this._geomFact=null,this._resultGeom=null,this._graph=null,this._edgeList=new Vl,this._resultPolyList=new bc,this._resultLineList=new bc,this._resultPointList=new bc,this._graph=new Uh(new Ul),this._geomFact=e.getFactory()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.insertUniqueEdge=function(t){var e=this._edgeList.findEqualEdge(t);if(null!==e){var n=e.getLabel(),r=t.getLabel();e.isPointwiseEqual(t)||(r=new Rh(t.getLabel())).flip();var i=e.getDepth();i.isNull()&&i.add(n),i.add(r),n.merge(r)}else this._edgeList.add(t)},e.prototype.getGraph=function(){return this._graph},e.prototype.cancelDuplicateResultEdges=function(){for(var t=this._graph.getEdgeEnds().iterator();t.hasNext();){var e=t.next(),n=e.getSym();e.isInResult()&&n.isInResult()&&(e.setInResult(!1),n.setInResult(!1))}},e.prototype.isCoveredByLA=function(t){return!!this.isCovered(t,this._resultLineList)||!!this.isCovered(t,this._resultPolyList)},e.prototype.computeGeometry=function(t,n,r,i){var o=new bc;return o.addAll(t),o.addAll(n),o.addAll(r),o.isEmpty()?e.createEmptyResult(i,this._arg[0].getGeometry(),this._arg[1].getGeometry(),this._geomFact):this._geomFact.buildGeometry(o)},e.prototype.mergeSymLabels=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){t.next().getEdges().mergeSymLabels()}},e.prototype.isCovered=function(t,e){for(var n=e.iterator();n.hasNext();){var r=n.next();if(this._ptLocator.locate(t,r)!==Su.EXTERIOR)return!0}return!1},e.prototype.replaceCollapsedEdges=function(){for(var t=new bc,e=this._edgeList.iterator();e.hasNext();){var n=e.next();n.isCollapsed()&&(e.remove(),t.add(n.getCollapsedEdge()))}this._edgeList.addAll(t)},e.prototype.updateNodeLabelling=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){var e=t.next(),n=e.getEdges().getLabel();e.getLabel().merge(n)}},e.prototype.getResultGeometry=function(t){return this.computeOverlay(t),this._resultGeom},e.prototype.insertUniqueEdges=function(t){for(var e=t.iterator();e.hasNext();){var n=e.next();this.insertUniqueEdge(n)}},e.prototype.computeOverlay=function(t){this.copyPoints(0),this.copyPoints(1),this._arg[0].computeSelfNodes(this._li,!1),this._arg[1].computeSelfNodes(this._li,!1),this._arg[0].computeEdgeIntersections(this._arg[1],this._li,!0);var e=new bc;this._arg[0].computeSplitEdges(e),this._arg[1].computeSplitEdges(e),this.insertUniqueEdges(e),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),Xp.checkValid(this._edgeList.getEdges()),this._graph.addEdges(this._edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(t),this.cancelDuplicateResultEdges();var n=new Yh(this._geomFact);n.add(this._graph),this._resultPolyList=n.getPolygons();var r=new Yp(this,this._geomFact,this._ptLocator);this._resultLineList=r.build(t);var i=new Vp(this,this._geomFact,this._ptLocator);this._resultPointList=i.build(t),this._resultGeom=this.computeGeometry(this._resultPointList,this._resultLineList,this._resultPolyList,t)},e.prototype.labelIncompleteNode=function(t,e){var n=this._ptLocator.locate(t.getCoordinate(),this._arg[e].getGeometry());t.getLabel().setLocation(e,n)},e.prototype.copyPoints=function(t){for(var e=this._arg[t].getNodeIterator();e.hasNext();){var n=e.next();this._graph.addNode(n.getCoordinate()).setLabel(t,n.getLabel().getLocation(t))}},e.prototype.findResultAreaEdges=function(t){for(var n=this._graph.getEdgeEnds().iterator();n.hasNext();){var r=n.next(),i=r.getLabel();i.isArea()&&!r.isInteriorAreaEdge()&&e.isResultOfOp(i.getLocation(0,Nh.RIGHT),i.getLocation(1,Nh.RIGHT),t)&&r.setInResult(!0)}},e.prototype.computeLabelsFromDepths=function(){for(var t=this._edgeList.iterator();t.hasNext();){var e=t.next(),n=e.getLabel(),r=e.getDepth();if(!r.isNull()){r.normalize();for(var i=0;i<2;i++)n.isNull(i)||!n.isArea()||r.isNull(i)||(0===r.getDelta(i)?n.toLine(i):(tc.isTrue(!r.isNull(i,Nh.LEFT),\"depth of LEFT side has not been initialized\"),n.setLocation(i,Nh.LEFT,r.getLocation(i,Nh.LEFT)),tc.isTrue(!r.isNull(i,Nh.RIGHT),\"depth of RIGHT side has not been initialized\"),n.setLocation(i,Nh.RIGHT,r.getLocation(i,Nh.RIGHT))))}}},e.prototype.computeLabelling=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){t.next().getEdges().computeLabelling(this._arg)}this.mergeSymLabels(),this.updateNodeLabelling()},e.prototype.labelIncompleteNodes=function(){for(var t=this._graph.getNodes().iterator();t.hasNext();){var e=t.next(),n=e.getLabel();e.isIsolated()&&(n.isNull(0)?this.labelIncompleteNode(e,0):this.labelIncompleteNode(e,1)),e.getEdges().updateLabelling(n)}},e.prototype.isCoveredByA=function(t){return!!this.isCovered(t,this._resultPolyList)},e.prototype.interfaces_=function(){return[]},e.prototype.getClass=function(){return e},e}(If);Cf.overlayOp=function(t,e,n){return new Cf(t,e).getResultGeometry(n)},Cf.intersection=function(t,e){if(t.isEmpty()||e.isEmpty())return Cf.createEmptyResult(Cf.INTERSECTION,t,e,t.getFactory());if(t.isGeometryCollection()){var n=e;return Up.map(t,{interfaces_:function(){return[Nf.MapOp]},map:function(t){return t.intersection(n)}})}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),of.overlayOp(t,e,Cf.INTERSECTION)},Cf.symDifference=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return Cf.createEmptyResult(Cf.SYMDIFFERENCE,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),of.overlayOp(t,e,Cf.SYMDIFFERENCE)},Cf.resultDimension=function(t,e,n){var r=e.getDimension(),i=n.getDimension(),o=-1;switch(t){case Cf.INTERSECTION:o=Math.min(r,i);break;case Cf.UNION:o=Math.max(r,i);break;case Cf.DIFFERENCE:o=r;break;case Cf.SYMDIFFERENCE:o=Math.max(r,i)}return o},Cf.createEmptyResult=function(t,e,n,r){var i=null;switch(Cf.resultDimension(t,e,n)){case-1:i=r.createGeometryCollection(new Array(0).fill(null));break;case 0:i=r.createPoint();break;case 1:i=r.createLineString();break;case 2:i=r.createPolygon()}return i},Cf.difference=function(t,e){return t.isEmpty()?Cf.createEmptyResult(Cf.DIFFERENCE,t,e,t.getFactory()):e.isEmpty()?t.copy():(t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),of.overlayOp(t,e,Cf.DIFFERENCE))},Cf.isResultOfOp=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=t.getLocation(0),r=t.getLocation(1);return Cf.isResultOfOp(n,r,e)}if(3===arguments.length){var i=arguments[0],o=arguments[1],s=arguments[2];switch(i===Su.BOUNDARY&&(i=Su.INTERIOR),o===Su.BOUNDARY&&(o=Su.INTERIOR),s){case Cf.INTERSECTION:return i===Su.INTERIOR&&o===Su.INTERIOR;case Cf.UNION:return i===Su.INTERIOR||o===Su.INTERIOR;case Cf.DIFFERENCE:return i===Su.INTERIOR&&o!==Su.INTERIOR;case Cf.SYMDIFFERENCE:return i===Su.INTERIOR&&o!==Su.INTERIOR||i!==Su.INTERIOR&&o===Su.INTERIOR}return!1}},Cf.INTERSECTION=1,Cf.UNION=2,Cf.DIFFERENCE=3,Cf.SYMDIFFERENCE=4;var Sf=function(){this._g=null,this._boundaryDistanceTolerance=null,this._linework=null,this._ptLocator=new Ip,this._seg=new gl;var t=arguments[0],e=arguments[1];this._g=t,this._boundaryDistanceTolerance=e,this._linework=this.extractLinework(t)};Sf.prototype.isWithinToleranceOfBoundary=function(t){for(var e=0;e<this._linework.getNumGeometries();e++)for(var n=this._linework.getGeometryN(e).getCoordinateSequence(),r=0;r<n.size()-1;r++){n.getCoordinate(r,this._seg.p0),n.getCoordinate(r+1,this._seg.p1);if(this._seg.distance(t)<=this._boundaryDistanceTolerance)return!0}return!1},Sf.prototype.getLocation=function(t){return this.isWithinToleranceOfBoundary(t)?Su.BOUNDARY:this._ptLocator.locate(t,this._g)},Sf.prototype.extractLinework=function(t){var e=new Mf;t.apply(e);var n=e.getLinework(),r=_h.toLineStringArray(n);return t.getFactory().createMultiLineString(r)},Sf.prototype.interfaces_=function(){return[]},Sf.prototype.getClass=function(){return Sf};var Mf=function(){this._linework=null,this._linework=new bc};Mf.prototype.getLinework=function(){return this._linework},Mf.prototype.filter=function(t){if(t instanceof $c){var e=t;this._linework.add(e.getExteriorRing());for(var n=0;n<e.getNumInteriorRing();n++)this._linework.add(e.getInteriorRingN(n))}},Mf.prototype.interfaces_=function(){return[kc]},Mf.prototype.getClass=function(){return Mf};var Lf=function(){this._g=null,this._doLeft=!0,this._doRight=!0;var t=arguments[0];this._g=t};Lf.prototype.extractPoints=function(t,e,n){for(var r=t.getCoordinates(),i=0;i<r.length-1;i++)this.computeOffsetPoints(r[i],r[i+1],e,n)},Lf.prototype.setSidesToGenerate=function(t,e){this._doLeft=t,this._doRight=e},Lf.prototype.getPoints=function(t){for(var e=new bc,n=bp.getLines(this._g).iterator();n.hasNext();){var r=n.next();this.extractPoints(r,t,e)}return e},Lf.prototype.computeOffsetPoints=function(t,e,n,r){var i=e.x-t.x,o=e.y-t.y,s=Math.sqrt(i*i+o*o),a=n*i/s,u=n*o/s,c=(e.x+t.x)/2,h=(e.y+t.y)/2;if(this._doLeft){var l=new bu(c-u,h+a);r.add(l)}if(this._doRight){var p=new bu(c+u,h-a);r.add(p)}},Lf.prototype.interfaces_=function(){return[]},Lf.prototype.getClass=function(){return Lf};var Pf=function t(){this._geom=null,this._locFinder=null,this._location=new Array(3).fill(null),this._invalidLocation=null,this._boundaryDistanceTolerance=t.TOLERANCE,this._testCoords=new bc;var e=arguments[0],n=arguments[1],r=arguments[2];this._boundaryDistanceTolerance=t.computeBoundaryDistanceTolerance(e,n),this._geom=[e,n,r],this._locFinder=[new Sf(this._geom[0],this._boundaryDistanceTolerance),new Sf(this._geom[1],this._boundaryDistanceTolerance),new Sf(this._geom[2],this._boundaryDistanceTolerance)]},Of={TOLERANCE:{configurable:!0}};Pf.prototype.reportResult=function(t,e,n){Xu.out.println(\"Overlay result invalid - A:\"+Su.toLocationSymbol(e[0])+\" B:\"+Su.toLocationSymbol(e[1])+\" expected:\"+(n?\"i\":\"e\")+\" actual:\"+Su.toLocationSymbol(e[2]))},Pf.prototype.isValid=function(t){this.addTestPts(this._geom[0]),this.addTestPts(this._geom[1]);var e=this.checkValid(t);return e},Pf.prototype.checkValid=function(){if(1===arguments.length){for(var t=arguments[0],e=0;e<this._testCoords.size();e++){var n=this._testCoords.get(e);if(!this.checkValid(t,n))return this._invalidLocation=n,!1}return!0}if(2===arguments.length){var r=arguments[0],i=arguments[1];return this._location[0]=this._locFinder[0].getLocation(i),this._location[1]=this._locFinder[1].getLocation(i),this._location[2]=this._locFinder[2].getLocation(i),!!Pf.hasLocation(this._location,Su.BOUNDARY)||this.isValidResult(r,this._location)}},Pf.prototype.addTestPts=function(t){var e=new Lf(t);this._testCoords.addAll(e.getPoints(5*this._boundaryDistanceTolerance))},Pf.prototype.isValidResult=function(t,e){var n=Cf.isResultOfOp(e[0],e[1],t),r=!(n^e[2]===Su.INTERIOR);return r||this.reportResult(t,e,n),r},Pf.prototype.getInvalidLocation=function(){return this._invalidLocation},Pf.prototype.interfaces_=function(){return[]},Pf.prototype.getClass=function(){return Pf},Pf.hasLocation=function(t,e){for(var n=0;n<3;n++)if(t[n]===e)return!0;return!1},Pf.computeBoundaryDistanceTolerance=function(t,e){return Math.min(Jp.computeSizeBasedSnapTolerance(t),Jp.computeSizeBasedSnapTolerance(e))},Pf.isValid=function(t,e,n,r){return new Pf(t,e,r).isValid(n)},Of.TOLERANCE.get=function(){return 1e-6},Object.defineProperties(Pf,Of);var Rf=function t(e){this._geomFactory=null,this._skipEmpty=!1,this._inputGeoms=null,this._geomFactory=t.extractFactory(e),this._inputGeoms=e};Rf.prototype.extractElements=function(t,e){if(null===t)return null;for(var n=0;n<t.getNumGeometries();n++){var r=t.getGeometryN(n);this._skipEmpty&&r.isEmpty()||e.add(r)}},Rf.prototype.combine=function(){for(var t=new bc,e=this._inputGeoms.iterator();e.hasNext();){var n=e.next();this.extractElements(n,t)}return 0===t.size()?null!==this._geomFactory?this._geomFactory.createGeometryCollection(null):null:this._geomFactory.buildGeometry(t)},Rf.prototype.interfaces_=function(){return[]},Rf.prototype.getClass=function(){return Rf},Rf.combine=function(){if(1===arguments.length){var t=arguments[0];return new Rf(t).combine()}if(2===arguments.length){var e=arguments[0],n=arguments[1];return new Rf(Rf.createList(e,n)).combine()}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2];return new Rf(Rf.createList(r,i,o)).combine()}},Rf.extractFactory=function(t){return t.isEmpty()?null:t.iterator().next().getFactory()},Rf.createList=function(){if(2===arguments.length){var t=arguments[0],e=arguments[1],n=new bc;return n.add(t),n.add(e),n}if(3===arguments.length){var r=arguments[0],i=arguments[1],o=arguments[2],s=new bc;return s.add(r),s.add(i),s.add(o),s}};var Tf=function(){this._inputPolys=null,this._geomFactory=null;var t=arguments[0];this._inputPolys=t,null===this._inputPolys&&(this._inputPolys=new bc)},Af={STRTREE_NODE_CAPACITY:{configurable:!0}};Tf.prototype.reduceToGeometries=function(t){for(var e=new bc,n=t.iterator();n.hasNext();){var r=n.next(),i=null;Lu(r,wc)?i=this.unionTree(r):r instanceof cc&&(i=r),e.add(i)}return e},Tf.prototype.extractByEnvelope=function(t,e,n){for(var r=new bc,i=0;i<e.getNumGeometries();i++){var o=e.getGeometryN(i);o.getEnvelopeInternal().intersects(t)?r.add(o):n.add(o)}return this._geomFactory.buildGeometry(r)},Tf.prototype.unionOptimized=function(t,e){var n=t.getEnvelopeInternal(),r=e.getEnvelopeInternal();if(!n.intersects(r)){return Rf.combine(t,e)}if(t.getNumGeometries()<=1&&e.getNumGeometries()<=1)return this.unionActual(t,e);var i=n.intersection(r);return this.unionUsingEnvelopeIntersection(t,e,i)},Tf.prototype.union=function(){if(null===this._inputPolys)throw new Error(\"union() method cannot be called twice\");if(this._inputPolys.isEmpty())return null;this._geomFactory=this._inputPolys.iterator().next().getFactory();for(var t=new ol(Tf.STRTREE_NODE_CAPACITY),e=this._inputPolys.iterator();e.hasNext();){var n=e.next();t.insert(n.getEnvelopeInternal(),n)}this._inputPolys=null;var r=t.itemsTree();return this.unionTree(r)},Tf.prototype.binaryUnion=function(){if(1===arguments.length){var t=arguments[0];return this.binaryUnion(t,0,t.size())}if(3===arguments.length){var e=arguments[0],n=arguments[1],r=arguments[2];if(r-n<=1){var i=Tf.getGeometry(e,n);return this.unionSafe(i,null)}if(r-n==2)return this.unionSafe(Tf.getGeometry(e,n),Tf.getGeometry(e,n+1));var o=Math.trunc((r+n)/2),s=this.binaryUnion(e,n,o),a=this.binaryUnion(e,o,r);return this.unionSafe(s,a)}},Tf.prototype.repeatedUnion=function(t){for(var e=null,n=t.iterator();n.hasNext();){var r=n.next();e=null===e?r.copy():e.union(r)}return e},Tf.prototype.unionSafe=function(t,e){return null===t&&null===e?null:null===t?e.copy():null===e?t.copy():this.unionOptimized(t,e)},Tf.prototype.unionActual=function(t,e){return Tf.restrictToPolygons(t.union(e))},Tf.prototype.unionTree=function(t){var e=this.reduceToGeometries(t);return this.binaryUnion(e)},Tf.prototype.unionUsingEnvelopeIntersection=function(t,e,n){var r=new bc,i=this.extractByEnvelope(n,t,r),o=this.extractByEnvelope(n,e,r),s=this.unionActual(i,o);r.add(s);return Rf.combine(r)},Tf.prototype.bufferUnion=function(){if(1===arguments.length){var t=arguments[0];return t.get(0).getFactory().buildGeometry(t).buffer(0)}if(2===arguments.length){var e=arguments[0],n=arguments[1];return e.getFactory().createGeometryCollection([e,n]).buffer(0)}},Tf.prototype.interfaces_=function(){return[]},Tf.prototype.getClass=function(){return Tf},Tf.restrictToPolygons=function(t){if(Lu(t,Qc))return t;var e=wp.getPolygons(t);return 1===e.size()?e.get(0):t.getFactory().createMultiPolygon(_h.toPolygonArray(e))},Tf.getGeometry=function(t,e){return e>=t.size()?null:t.get(e)},Tf.union=function(t){return new Tf(t).union()},Af.STRTREE_NODE_CAPACITY.get=function(){return 4},Object.defineProperties(Tf,Af);var Df=function(){};Df.prototype.interfaces_=function(){return[]},Df.prototype.getClass=function(){return Df},Df.union=function(t,e){if(t.isEmpty()||e.isEmpty()){if(t.isEmpty()&&e.isEmpty())return Cf.createEmptyResult(Cf.UNION,t,e,t.getFactory());if(t.isEmpty())return e.copy();if(e.isEmpty())return t.copy()}return t.checkNotGeometryCollection(t),t.checkNotGeometryCollection(e),of.overlayOp(t,e,Cf.UNION)};var Ff=function(){return new Yi};Yi.prototype={constructor:Yi,reset:function(){this.s=this.t=0},add:function(t){Vi(qf,t,this.t),Vi(this,qf.s,this.s),this.s?this.t+=qf.t:this.s=qf.t},valueOf:function(){return this.s}};var qf=new Yi,Gf=1e-6,Bf=Math.PI,kf=Bf/2,zf=Bf/4,jf=2*Bf,Xf=180/Bf,Uf=Bf/180,Yf=Math.abs,Vf=Math.atan,Hf=Math.atan2,Wf=Math.cos,Jf=Math.exp,Zf=Math.log,Kf=Math.sin,Qf=Math.sqrt,$f=Math.tan,tg={Feature:function(t,e){Ji(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)Ji(n[r].geometry,e)}},eg={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){Zi(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Zi(n[r],e,0)},Polygon:function(t,e){Ki(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Ki(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)Ji(n[r],e)}},ng=function(t,e){t&&tg.hasOwnProperty(t.type)?tg[t.type](t,e):Ji(t,e)},rg=(Ff(),Ff(),Ff(),function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n});oo.invert=oo;var ig=function(t){function e(e){return e=t(e[0]*Uf,e[1]*Uf),e[0]*=Xf,e[1]*=Xf,e}return t=so(t[0]*Uf,t[1]*Uf,t.length>2?t[2]*Uf:0),e.invert=function(e){return e=t.invert(e[0]*Uf,e[1]*Uf),e[0]*=Xf,e[1]*=Xf,e},e},og=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Wi,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},sg=function(t,e,n,r,i,o){var s,a=t[0],u=t[1],c=0,h=1,l=e[0]-a,p=e[1]-u;if(s=n-a,l||!(s>0)){if(s/=l,l<0){if(s<c)return;s<h&&(h=s)}else if(l>0){if(s>h)return;s>c&&(c=s)}if(s=i-a,l||!(s<0)){if(s/=l,l<0){if(s>h)return;s>c&&(c=s)}else if(l>0){if(s<c)return;s<h&&(h=s)}if(s=r-u,p||!(s>0)){if(s/=p,p<0){if(s<c)return;s<h&&(h=s)}else if(p>0){if(s>h)return;s>c&&(c=s)}if(s=o-u,p||!(s<0)){if(s/=p,p<0){if(s>h)return;s>c&&(c=s)}else if(p>0){if(s<c)return;s<h&&(h=s)}return c>0&&(t[0]=a+c*l,t[1]=u+c*p),h<1&&(e[0]=a+h*l,e[1]=u+h*p),!0}}}}},ag=function(t,e){return Yf(t[0]-e[0])<Gf&&Yf(t[1]-e[1])<Gf},ug=function(t,e,n,r,i){var o,s,a=[],u=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],s=t[e];if(ag(r,s)){for(i.lineStart(),o=0;o<e;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(n=new lo(r,t,null,!0)),u.push(n.o=new lo(r,null,n,!1)),a.push(n=new lo(s,t,null,!1)),u.push(n.o=new lo(s,null,n,!0))}}),a.length){for(u.sort(e),po(a),po(u),o=0,s=u.length;o<s;++o)u[o].e=n=!n;for(var c,h,l=a[0];;){for(var p=l,f=!0;p.v;)if((p=p.n)===l)return;c=p.z,i.lineStart();do{if(p.v=p.o.v=!0,p.e){if(f)for(o=0,s=c.length;o<s;++o)i.point((h=c[o])[0],h[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(f)for(c=p.p.z,o=c.length-1;o>=0;--o)i.point((h=c[o])[0],h[1]);else r(p.x,p.p.x,-1,i);p=p.p}c=(p=p.o).z,f=!f}while(!p.v);i.lineEnd()}}},cg=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},hg=(function(t){1===t.length&&(t=function(t){return function(e,n){return cg(t(e),n)}}(t))}(cg),function(t){for(var e,n,r,i=t.length,o=-1,s=0;++o<i;)s+=t[o].length;for(n=new Array(s);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--s]=r[e];return n}),lg=1e9,pg=-lg,fg=Ff(),gg=(Ff(),function(t){return t}),dg=(Ff(),Ff(),1/0),yg=dg,_g=-dg,mg=_g,vg={point:function(t,e){t<dg&&(dg=t),t>_g&&(_g=t),e<yg&&(yg=e),e>mg&&(mg=e)},lineStart:Wi,lineEnd:Wi,polygonStart:Wi,polygonEnd:Wi,result:function(){var t=[[dg,yg],[_g,mg]];return _g=mg=-(yg=dg=1/0),t}},xg=(Ff(),function(t,e,n,r){return function(i,o){function s(e,n){var r=i(e,n);t(e=r[0],n=r[1])&&o.point(e,n)}function a(t,e){var n=i(t,e);y.point(n[0],n[1])}function u(){E.point=a,y.lineStart()}function c(){E.point=s,y.lineEnd()}function h(t,e){d.push([t,e]);var n=i(t,e);v.point(n[0],n[1])}function l(){v.lineStart(),d=[]}function p(){h(d[0][0],d[0][1]),v.lineEnd();var t,e,n,r,i=v.clean(),s=m.result(),a=s.length;if(d.pop(),f.push(d),d=null,a)if(1&i){if(n=s[0],(e=n.length-1)>0){for(x||(o.polygonStart(),x=!0),o.lineStart(),t=0;t<e;++t)o.point((r=n[t])[0],r[1]);o.lineEnd()}}else a>1&&2&i&&s.push(s.pop().concat(s.shift())),g.push(s.filter(go))}var f,g,d,y=e(o),_=i.invert(r[0],r[1]),m=og(),v=e(m),x=!1,E={point:s,lineStart:u,lineEnd:c,polygonStart:function(){E.point=h,E.lineStart=l,E.lineEnd=p,g=[],f=[]},polygonEnd:function(){E.point=s,E.lineStart=u,E.lineEnd=c,g=hg(g);var t=function(t,e){var n=e[0],r=e[1],i=[Kf(n),-Wf(n),0],o=0,s=0;fg.reset();for(var a=0,u=t.length;a<u;++a)if(h=(c=t[a]).length)for(var c,h,l=c[h-1],p=l[0],f=l[1]/2+zf,g=Kf(f),d=Wf(f),y=0;y<h;++y,p=m,g=x,d=E,l=_){var _=c[y],m=_[0],v=_[1]/2+zf,x=Kf(v),E=Wf(v),w=m-p,b=w>=0?1:-1,I=b*w,N=I>Bf,C=g*x;if(fg.add(Hf(C*b*Kf(I),d*E+C*Wf(I))),o+=N?w+b*jf:w,N^p>=n^m>=n){var S=eo($i(l),$i(_));io(S);var M=eo(i,S);io(M);var L=(N^w>=0?-1:1)*Hi(M[2]);(r>L||r===L&&(S[0]||S[1]))&&(s+=N^w>=0?1:-1)}}return(o<-Gf||o<Gf&&fg<-Gf)^1&s}(f,_);g.length?(x||(o.polygonStart(),x=!0),ug(g,yo,t,n,o)):t&&(x||(o.polygonStart(),x=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),x&&(o.polygonEnd(),x=!1),g=f=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};return E}}),Eg=xg(function(){return!0},function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,s){var a=o>0?Bf:-Bf,u=Yf(o-n);Yf(u-Bf)<Gf?(t.point(n,r=(r+s)/2>0?kf:-kf),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),e=0):i!==a&&u>=Bf&&(Yf(n-i)<Gf&&(n-=i*Gf),Yf(o-a)<Gf&&(o-=a*Gf),r=function(t,e,n,r){var i,o,s=Kf(t-n);return Yf(s)>Gf?Vf((Kf(e)*(o=Wf(r))*Kf(n)-Kf(r)*(i=Wf(e))*Kf(t))/(i*o*s)):(e+r)/2}(n,r,o,s),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),e=0),t.point(n=o,r=s),i=a},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}},function(t,e,n,r){var i;if(null==t)i=n*kf,r.point(-Bf,i),r.point(0,i),r.point(Bf,i),r.point(Bf,0),r.point(Bf,-i),r.point(0,-i),r.point(-Bf,-i),r.point(-Bf,0),r.point(-Bf,i);else if(Yf(t[0]-e[0])>Gf){var o=t[0]<e[0]?Bf:-Bf;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])},[-Bf,-kf]),wg=function(t,e){function n(t,e){return Wf(t)*Wf(e)>o}function r(t,e,n){var r=[1,0,0],i=eo($i(t),$i(e)),s=to(i,i),a=i[0],u=s-a*a;if(!u)return!n&&t;var c=o*s/u,h=-o*a/u,l=eo(r,i),p=ro(r,c);no(p,ro(i,h));var f=l,g=to(p,f),d=to(f,f),y=g*g-d*(to(p,p)-1);if(!(y<0)){var _=Qf(y),m=ro(f,(-g-_)/d);if(no(m,p),m=Qi(m),!n)return m;var v,x=t[0],E=e[0],w=t[1],b=e[1];E<x&&(v=x,x=E,E=v);var I=E-x,N=Yf(I-Bf)<Gf;if(!N&&b<w&&(v=w,w=b,b=v),N||I<Gf?N?w+b>0^m[1]<(Yf(m[0]-x)<Gf?w:b):w<=m[1]&&m[1]<=b:I>Bf^(x<=m[0]&&m[0]<=E)){var C=ro(f,(-g+_)/d);return no(C,p),[m,Qi(C)]}}}function i(e,n){var r=s?t:Bf-t,i=0;return e<-r?i|=1:e>r&&(i|=2),n<-r?i|=4:n>r&&(i|=8),i}var o=Wf(t),s=o>0,a=Yf(o)>Gf;return xg(n,function(t){var e,o,u,c,h;return{lineStart:function(){c=u=!1,h=1},point:function(l,p){var f,g=[l,p],d=n(l,p),y=s?d?0:i(l,p):d?i(l+(l<0?Bf:-Bf),p):0;if(!e&&(c=u=d)&&t.lineStart(),d!==u&&(!(f=r(e,g))||ag(e,f)||ag(g,f))&&(g[0]+=Gf,g[1]+=Gf,d=n(g[0],g[1])),d!==u)h=0,d?(t.lineStart(),f=r(g,e),t.point(f[0],f[1])):(f=r(e,g),t.point(f[0],f[1]),t.lineEnd()),e=f;else if(a&&e&&s^d){var _;y&o||!(_=r(g,e,!0))||(h=0,s?(t.lineStart(),t.point(_[0][0],_[0][1]),t.point(_[1][0],_[1][1]),t.lineEnd()):(t.point(_[1][0],_[1][1]),t.lineEnd(),t.lineStart(),t.point(_[0][0],_[0][1])))}!d||e&&ag(e,g)||t.point(g[0],g[1]),e=g,u=d,o=y},lineEnd:function(){u&&t.lineEnd(),e=null},clean:function(){return h|(c&&u)<<1}}},function(n,r,i,o){!function(t,e,n,r,i,o){if(n){var s=Wf(e),a=Kf(e),u=r*n;null==i?(i=e+r*jf,o=e-u/2):(i=ho(s,i),o=ho(s,o),(r>0?i<o:i>o)&&(i+=r*jf));for(var c,h=i;r>0?h>o:h<o;h-=u)c=Qi([s,-a*Wf(h),-a*Kf(h)]),t.point(c[0],c[1])}}(o,t,e,i,n,r)},s?[0,-t]:[-Bf,t-Bf])};mo.prototype={constructor:mo,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var bg=16,Ig=Wf(30*Uf),Ng=function(t,e){return+e?function(t,e){function n(r,i,o,s,a,u,c,h,l,p,f,g,d,y){var _=c-r,m=h-i,v=_*_+m*m;if(v>4*e&&d--){var x=s+p,E=a+f,w=u+g,b=Qf(x*x+E*E+w*w),I=Hi(w/=b),N=Yf(Yf(w)-1)<Gf||Yf(o-l)<Gf?(o+l)/2:Hf(E,x),C=t(N,I),S=C[0],M=C[1],L=S-r,P=M-i,O=m*L-_*P;(O*O/v>e||Yf((_*L+m*P)/v-.5)>.3||s*p+a*f+u*g<Ig)&&(n(r,i,o,s,a,u,S,M,N,x/=b,E/=b,w,d,y),y.point(S,M),n(S,M,N,x,E,w,c,h,l,p,f,g,d,y))}}return function(e){function r(n,r){n=t(n,r),e.point(n[0],n[1])}function i(){_=NaN,w.point=o,e.lineStart()}function o(r,i){var o=$i([r,i]),s=t(r,i);n(_,m,y,v,x,E,_=s[0],m=s[1],y=r,v=o[0],x=o[1],E=o[2],bg,e),e.point(_,m)}function s(){w.point=r,e.lineEnd()}function a(){i(),w.point=u,w.lineEnd=c}function u(t,e){o(h=t,e),l=_,p=m,f=v,g=x,d=E,w.point=o}function c(){n(_,m,y,v,x,E,l,p,h,f,g,d,bg,e),w.lineEnd=s,s()}var h,l,p,f,g,d,y,_,m,v,x,E,w={point:r,lineStart:i,lineEnd:s,polygonStart:function(){e.polygonStart(),w.lineStart=a},polygonEnd:function(){e.polygonEnd(),w.lineStart=i}};return w}}(t,e):function(t){return _o({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)},Cg=_o({point:function(t,e){this.stream.point(t*Uf,e*Uf)}});Eo.invert=function(t,e){return[t,2*Vf(Jf(e))-kf]},wo.invert=function(t,e){return[-e,2*Vf(Jf(t))-kf]};var Sg=function(){var t=function(t){function e(){var e=Bf*a(),s=o(ig(o.rotate()).invert([0,0]));return c(null==h?[[s[0]-e,s[1]-e],[s[0]+e,s[1]+e]]:t===Eo?[[Math.max(s[0]-e,h),n],[Math.min(s[0]+e,r),i]]:[[h,Math.max(s[1]-e,n)],[r,Math.min(s[1]+e,i)]])}var n,r,i,o=xo(t),s=o.center,a=o.scale,u=o.translate,c=o.clipExtent,h=null;return o.scale=function(t){return arguments.length?(a(t),e()):a()},o.translate=function(t){return arguments.length?(u(t),e()):u()},o.center=function(t){return arguments.length?(s(t),e()):s()},o.clipExtent=function(t){return arguments.length?(null==t?h=n=r=i=null:(h=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),e()):null==h?null:[[h,n],[r,i]]},e()}(wo),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):(t=e(),[t[1],-t[0]])},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):(t=n(),[t[0],t[1],t[2]-90])},n([0,0,90]).scale(159.155)};t.projection=Cs,t.random=gu,t.clusters=du,t.helpers=ko,t.invariant=jo,t.meta=zo,t.isolines=function(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.zProperty||\"elevation\",i=n.commonProperties||{},o=n.breaksProperties||[];if(W(t,\"Point\",\"Input must contain Points\"),!e)throw new Error(\"breaks is required\");if(!Array.isArray(e))throw new Error(\"breaks must be an Array\");if(!I(i))throw new Error(\"commonProperties must be an Object\");if(!Array.isArray(o))throw new Error(\"breaksProperties must be an Array\");var s=rt(t,{zProperty:r,flip:!0});return c(function(t,e,n){var r=j(n),i=r[2]-r[0],o=r[3]-r[1],s=r[0],a=r[1],u=e[0].length-1,c=e.length-1,h=i/u,l=o/c,p=function(t){t[0]=t[0]*h+s,t[1]=t[1]*l+a};return t.forEach(function(t){S(t,p)}),t}(function(t,e,n,r,i){for(var o=[],s=1;s<e.length;s++){var a=+e[s],u=Object.assign({},r,i[s]);u[n]=a;var c=h(Q(t,a),u);o.push(c)}return o}(s,e,r,i,o),s,t))},t.convex=Lt,t.pointsWithinPolygon=Rt,t.concave=function(t,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");if(!t)throw new Error(\"points is required\");var r=n.maxEdge||1/0;if(!b(r))throw new Error(\"maxEdge is invalid\");var i=Tt(function(t){var e=[],n={};return O(t,function(t){if(t.geometry){var r=t.geometry.coordinates.join(\"-\");n.hasOwnProperty(r)||(e.push(t),n[r]=!0)}}),c(e)}(t));if(i.features=i.features.filter(function(t){var e=t.geometry.coordinates[0][0],i=t.geometry.coordinates[0][1],o=t.geometry.coordinates[0][2],s=qt(e,i,n),a=qt(i,o,n),u=qt(e,o,n);return s<=r&&a<=r&&u<=r}),i.features.length<1)return null;var o=$t(i,n);return 1===o.coordinates.length&&(o.coordinates=o.coordinates[0],o.type=\"Polygon\"),e(o)},t.collect=function(t,e,n,r){var i=Vo(6),o=e.features.map(function(t){return{minX:t.geometry.coordinates[0],minY:t.geometry.coordinates[1],maxX:t.geometry.coordinates[0],maxY:t.geometry.coordinates[1],property:t.properties[n]}});return i.load(o),t.features.forEach(function(t){t.properties||(t.properties={});var e=j(t),n=[];i.search({minX:e[0],minY:e[1],maxX:e[2],maxY:e[3]}).forEach(function(e){Pt([e.minX,e.minY],t)&&n.push(e.property)}),t.properties[r]=n}),t},t.flip=function(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.mutate;if(!t)throw new Error(\"geojson is required\");return!1!==n&&void 0!==n||(t=Gt(t)),S(t,function(t){var e=t[0],n=t[1];t[0]=n,t[1]=e}),t},t.simplify=function(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=void 0!==e.tolerance?e.tolerance:1,r=e.highQuality||!1,i=e.mutate||!1;if(!t)throw new Error(\"geojson is required\");if(n&&n<0)throw new Error(\"invalid tolerance\");return!0!==i&&(t=Gt(t)),A(t,function(t){!function(t,e,n){var r=t.type;if(\"Point\"===r||\"MultiPoint\"===r)return t;te(t,!0);var i=t.coordinates;switch(r){case\"LineString\":t.coordinates=se(i,e,n);break;case\"MultiLineString\":t.coordinates=i.map(function(t){return se(t,e,n)});break;case\"Polygon\":t.coordinates=ae(i,e,n);break;case\"MultiPolygon\":t.coordinates=i.map(function(t){return ae(t,e,n)})}}(t,n,r)}),t},t.bezierSpline=ue,t.tag=function(t,e,n,r){return t=Gt(t),e=Gt(e),O(t,function(t){t.properties||(t.properties={}),O(e,function(e){void 0===t.properties[r]&&Pt(t,e)&&(t.properties[r]=e.properties[n])})}),t},t.sample=function(t,e){if(!t)throw new Error(\"featurecollection is required\");if(null===e||void 0===e)throw new Error(\"num is required\");if(\"number\"!=typeof e)throw new Error(\"num must be a number\");return c(function(t,e){for(var n,r,i=t.slice(0),o=t.length,s=o-e;o-- >s;)r=Math.floor((o+1)*Math.random()),n=i[r],i[r]=i[o],i[o]=n;return i.slice(s)}(t.features,e))},t.envelope=he,t.square=le,t.circle=fe,t.midpoint=function(t,e){return pe(t,qt(t,e)/2,ge(t,e))},t.center=de,t.centerOfMass=_e,t.centroid=ye,t.combine=function(t){function n(t,e,n){n?r[e].coordinates=r[e].coordinates.concat(t.geometry.coordinates):r[e].coordinates.push(t.geometry.coordinates),r[e].properties.push(t.properties)}var r={MultiPoint:{coordinates:[],properties:[]},MultiLineString:{coordinates:[],properties:[]},MultiPolygon:{coordinates:[],properties:[]}},i=Object.keys(r).reduce(function(t,e){return t[e.replace(\"Multi\",\"\")]=e,t},{});return O(t,function(t){t.geometry&&(r[t.geometry.type]?n(t,t.geometry.type,!0):i[t.geometry.type]&&n(t,i[t.geometry.type],!1))}),c(Object.keys(r).filter(function(t){return r[t].coordinates.length}).sort().map(function(t){return e({type:t,coordinates:r[t].coordinates},{collectedProperties:r[t].properties})}))},t.distance=qt,t.explode=me,t.bbox=j,t.tesselate=function(t){if(!t.geometry||\"Polygon\"!==t.geometry.type&&\"MultiPolygon\"!==t.geometry.type)throw new Error(\"input must be a Polygon or MultiPolygon\");var e={type:\"FeatureCollection\",features:[]};return\"Polygon\"===t.geometry.type?e.features=De(t.geometry.coordinates):t.geometry.coordinates.forEach(function(t){e.features=e.features.concat(De(t))}),e},t.bboxPolygon=ce,t.booleanPointInPolygon=Pt,t.nearestPoint=Fe,t.nearestPointOnLine=on,t.nearestPointToLine=function(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.units,i=n.properties||{};if(!t)throw new Error(\"points is required\");if(!(t=function(t){var e=[];switch(t.geometry?t.geometry.type:t.type){case\"GeometryCollection\":return A(t,function(t){\"Point\"===t.type&&e.push({type:\"Feature\",properties:{},geometry:t})}),{type:\"FeatureCollection\",features:e};case\"FeatureCollection\":return t.features=t.features.filter(function(t){return\"Point\"===t.geometry.type}),t;default:throw new Error(\"points must be a Point Collection\")}}(t)).features.length)throw new Error(\"points must contain features\");if(!e)throw new Error(\"line is required\");if(\"LineString\"!==K(e))throw new Error(\"line must be a LineString\");var o=1/0,s=null;return O(t,function(t){var n=gn(t,e,{units:r});n<o&&(o=n,s=t)}),s&&(s.properties=Object.assign({dist:o},s.properties,i)),s},t.planepoint=function(t,e){var n=X(t),r=J(e).coordinates[0];if(r.length<4)throw new Error(\"OuterRing of a Polygon must have 4 or more Positions.\");var i=e.properties||{},o=i.a,s=i.b,a=i.c,u=n[0],c=n[1],h=r[0][0],l=r[0][1],p=void 0!==o?o:r[0][2],f=r[1][0],g=r[1][1],d=void 0!==s?s:r[1][2],y=r[2][0],_=r[2][1],m=void 0!==a?a:r[2][2];return(m*(u-h)*(c-g)+p*(u-f)*(c-_)+d*(u-y)*(c-l)-d*(u-h)*(c-_)-m*(u-f)*(c-l)-p*(u-y)*(c-g))/((u-h)*(c-g)+(u-f)*(c-_)+(u-y)*(c-l)-(u-h)*(c-_)-(u-f)*(c-l)-(u-y)*(c-g))},t.tin=Tt,t.bearing=ge,t.destination=pe,t.kinks=function(t){var e,n,i={type:\"FeatureCollection\",features:[]};if(\"LineString\"===(n=\"Feature\"===t.type?t.geometry:t).type)e=[n.coordinates];else if(\"MultiLineString\"===n.type)e=n.coordinates;else if(\"MultiPolygon\"===n.type)e=[].concat.apply([],n.coordinates);else{if(\"Polygon\"!==n.type)throw new Error(\"Input must be a LineString, MultiLineString, Polygon, or MultiPolygon Feature or Geometry\");e=n.coordinates}return e.forEach(function(t){e.forEach(function(e){for(var n=0;n<t.length-1;n++)for(var o=n;o<e.length-1;o++){if(t===e){if(1===Math.abs(n-o))continue;if(0===n&&o===t.length-2&&t[n][0]===t[t.length-1][0]&&t[n][1]===t[t.length-1][1])continue}var s=function(t,e,n,r,i,o,s,a){var u,c,h,l,p,f={x:null,y:null,onLine1:!1,onLine2:!1};return 0==(u=(a-o)*(n-t)-(s-i)*(r-e))?null!==f.x&&null!==f.y&&f:(c=e-o,h=t-i,l=(s-i)*c-(a-o)*h,p=(n-t)*c-(r-e)*h,c=l/u,h=p/u,f.x=t+c*(n-t),f.y=e+c*(r-e),c>=0&&c<=1&&(f.onLine1=!0),h>=0&&h<=1&&(f.onLine2=!0),!(!f.onLine1||!f.onLine2)&&[f.x,f.y])}(t[n][0],t[n][1],t[n+1][0],t[n+1][1],e[o][0],e[o][1],e[o+1][0],e[o+1][1]);s&&i.features.push(r([s[0],s[1]]))}})}),i},t.pointOnFeature=yn,t.area=mn,t.along=function(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var i;if(\"Feature\"===t.type)i=t.geometry.coordinates;else{if(\"LineString\"!==t.type)throw new Error(\"input must be a LineString Feature or Geometry\");i=t.coordinates}if(!b(e))throw new Error(\"distance must be a number\");for(var o=0,s=0;s<i.length&&!(e>=o&&s===i.length-1);s++){if(o>=e){var a=e-o;if(a){var u=ge(i[s],i[s-1])-180;return pe(i[s],a,u,n)}return r(i[s])}o+=qt(i[s],i[s+1],n)}return r(i[i.length-1])},t.length=bn,t.lineSlice=function(t,e,n){var r=U(n);if(\"LineString\"!==K(n))throw new Error(\"line must be a LineString\");for(var i,o=on(n,t),s=on(n,e),u=[(i=o.properties.index<=s.properties.index?[o,s]:[s,o])[0].geometry.coordinates],c=i[0].properties.index+1;c<i[1].properties.index+1;c++)u.push(r[c]);return u.push(i[1].geometry.coordinates),a(u,n.properties)},t.lineSliceAlong=In,t.pointGrid=Ln,t.truncate=Pn,t.flatten=function(t){if(!t)throw new Error(\"geojson is required\");var e=[];return F(t,function(t){e.push(t)}),c(e)},t.lineIntersect=nn,t.lineChunk=function(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.units,i=n.reverse;if(!t)throw new Error(\"geojson is required\");if(e<=0)throw new Error(\"segmentLength must be greater than 0\");var o=[];return F(t,function(t){i&&(t.geometry.coordinates=t.geometry.coordinates.reverse()),function(t,e,n,r){var i=bn(t,{units:n});if(i<=e)return r(t);var o=i/e;Number.isInteger(o)||(o=Math.floor(o)+1);for(var s=0;s<o;s++){var a=In(t,e*s,e*(s+1),{units:n});r(a,s)}}(t,e,r,function(t){o.push(t)})}),c(o)},t.unkinkPolygon=function(t){var e=[];return F(t,function(t){\"Polygon\"===t.geometry.type&&O(Ls(t),function(n){e.push(o(n.geometry.coordinates,t.properties))})}),c(e)},t.greatCircle=function(t,e,n){if(\"object\"!=typeof(n=n||{}))throw new Error(\"options is invalid\");var r=n.properties,i=n.npoints,o=n.offset;return t=X(t),e=X(e),r=r||{},i=i||100,o=o||10,new qs({x:t[0],y:t[1]},{x:e[0],y:e[1]},r).Arc(i,{offset:o}).json()},t.lineSegment=en,t.lineSplit=function(t,e){if(!t)throw new Error(\"line is required\");if(!e)throw new Error(\"splitter is required\");var n=K(t),r=K(e);if(\"LineString\"!==n)throw new Error(\"line must be LineString\");if(\"FeatureCollection\"===r)throw new Error(\"splitter cannot be a FeatureCollection\");if(\"GeometryCollection\"===r)throw new Error(\"splitter cannot be a GeometryCollection\");var i=Pn(e,{precision:7});switch(r){case\"Point\":return Dn(t,i);case\"MultiPoint\":return An(t,i);case\"LineString\":case\"MultiLineString\":case\"Polygon\":case\"MultiPolygon\":return An(t,nn(t,i))}},t.lineArc=Gn,t.polygonToLine=kn,t.lineToPolygon=jn,t.bboxClip=function(t,e){var n=function(t){return t.geometry?t.geometry.type:t.type}(t),r=U(t),i=t.properties;switch(n){case\"LineString\":case\"MultiLineString\":var s=[];return\"LineString\"===n&&(r=[r]),r.forEach(function(t){Gs(t,e,s)}),1===s.length?a(s[0],i):h(s,i);case\"Polygon\":return o(Wn(r,e),i);case\"MultiPolygon\":return p(r.map(function(t){return Wn(t,e)}),i);default:throw new Error(\"geometry \"+n+\" not supported\")}},t.lineOverlap=$n,t.sector=function(t,e,n,r,i){if(i=i||{},!I(i))throw new Error(\"options is invalid\");if(!t)throw new Error(\"center is required\");if(void 0===n||null===n)throw new Error(\"bearing1 is required\");if(void 0===r||null===r)throw new Error(\"bearing2 is required\");if(!e)throw new Error(\"radius is required\");if(\"object\"!=typeof i)throw new Error(\"options must be an object\");if(er(n)===er(r))return fe(t,e,i);var s=U(t),a=[[s]];return S(Gn(t,e,n,r,i),function(t){a[0].push(t)}),a[0].push(s),o(a)},t.rhumbBearing=sn,t.rhumbDistance=un,t.rhumbDestination=nr,t.polygonTangents=function(t,e){var n,i,o,s=U(t),a=U(e);switch(K(e)){case\"Polygon\":n=a[0][0],i=a[0][0],o=ir(a[0][0],a[0][a[0].length-1],s);var u=rr(a[0],s,o,void 0,n,i);n=u[0],i=u[1];break;case\"MultiPolygon\":n=a[0][0][0],i=a[0][0][0],o=ir(a[0][0][0],a[0][0][a[0][0].length-1],s),a.forEach(function(t){var e=rr(t[0],s,o,void 0,n,i);n=e[0],i=e[1]})}return c([r(n),r(i)])},t.rewind=function(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.reverse||!1,r=e.mutate||!1;if(!t)throw new Error(\"<geojson> is required\");if(\"boolean\"!=typeof n)throw new Error(\"<reverse> must be a boolean\");if(\"boolean\"!=typeof r)throw new Error(\"<mutate> must be a boolean\");!1===r&&(t=Gt(t));var i=[];switch(t.type){case\"GeometryCollection\":return A(t,function(t){sr(t,n)}),t;case\"FeatureCollection\":return O(t,function(t){O(sr(t,n),function(t){i.push(t)})}),c(i)}return sr(t,n)},t.isobands=function(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.zProperty||\"elevation\",i=n.commonProperties||{},s=n.breaksProperties||[];if(W(t,\"Point\",\"Input must contain Points\"),!e)throw new Error(\"breaks is required\");if(!Array.isArray(e))throw new Error(\"breaks is not an Array\");if(!I(i))throw new Error(\"commonProperties is not an Object\");if(!Array.isArray(s))throw new Error(\"breaksProperties is not an Array\");var a=cr(t,{zProperty:r,flip:!0}),u=function(t,e,n){for(var r=[],i=1;i<e.length;i++){var s=+e[i-1],a=+e[i],u=hr(t,s,a-s),c=function(t){var e=[],n=[];t.forEach(function(t){var r=mn(o([t]));n.push(r),e.push({ring:t,area:r})}),n.sort(function(t,e){return e-t});var r=[];return n.forEach(function(t){for(var n=0;n<e.length;n++)if(e[n].area===t){r.push(e[n].ring),e.splice(n,1);break}}),r}(u),h=function(t){for(var e=t.map(function(t){return{lrCoordinates:t,grouped:!1}}),n=[];!function(t){for(var e=0;e<t.length;e++)if(!1===t[e].grouped)return!1;return!0}(e);)for(var r=0;r<e.length;r++)if(!e[r].grouped){var i=[];i.push(e[r].lrCoordinates),e[r].grouped=!0;for(var s=o([e[r].lrCoordinates]),a=r+1;a<e.length;a++)if(!e[a].grouped){var u=o([e[a].lrCoordinates]);(function(t,e){for(var n=me(t),r=0;r<n.features.length;r++)if(!Pt(n.features[r],e))return!1;return!0})(u,s)&&(i.push(e[a].lrCoordinates),e[a].grouped=!0)}n.push(i)}return n}(c),l={};l.groupedRings=h,l[n]=s+\"-\"+a,r.push(l)}return r}(a,e,r);return c((u=function(t,e,n){var r=j(n),i=r[2]-r[0],o=r[3]-r[1],s=r[0],a=r[1],u=e[0].length-1,c=e.length-1,h=i/u,l=o/c,p=function(t){t[0]=t[0]*h+s,t[1]=t[1]*l+a};return t.forEach(function(t){t.groupedRings.forEach(function(t){t.forEach(function(t){t.forEach(p)})})}),t}(u,a,t)).map(function(t,e){if(s[e]&&!I(s[e]))throw new Error(\"Each mappedProperty is required to be an Object\");var n=Object.assign({},i,s[e]);return n[r]=t[r],p(t.groupedRings,n)}))},t.transformRotate=fr,t.transformScale=gr,t.transformTranslate=function(t,e,n,r){if(r=r||{},!I(r))throw new Error(\"options is invalid\");var i=r.units,o=r.zTranslation,s=r.mutate;if(!t)throw new Error(\"geojson is required\");if(void 0===e||null===e||isNaN(e))throw new Error(\"distance is required\");if(o&&\"number\"!=typeof o&&isNaN(o))throw new Error(\"zTranslation is not a number\");if(o=void 0!==o?o:0,0===e&&0===o)return t;if(void 0===n||null===n||isNaN(n))throw new Error(\"direction is required\");return e<0&&(e=-e,n=-n),!1!==s&&void 0!==s||(t=Gt(t)),S(t,function(t){var r=U(nr(t,e,n,{units:i}));t[0]=r[0],t[1]=r[1],o&&3===t.length&&(t[2]+=o)}),t},t.lineOffset=function(t,e,n){if(n=n||{},!I(n))throw new Error(\"options is invalid\");var r=n.units;if(!t)throw new Error(\"geojson is required\");if(void 0===e||null===e||isNaN(e))throw new Error(\"distance is required\");var i=K(t),o=t.properties;switch(i){case\"LineString\":return vr(t,e,r);case\"MultiLineString\":var s=[];return F(t,function(t){s.push(vr(t,e,r).geometry.coordinates)}),h(s,o);default:throw new Error(\"geometry \"+i+\" is not supported\")}},t.polygonize=function(t){var e=qa.fromGeoJson(t);e.deleteDangles(),e.deleteCutEdges();var n=[],r=[];return e.getEdgeRings().filter(function(t){return t.isValid()}).forEach(function(t){t.isHole()?n.push(t):r.push(t)}),n.forEach(function(t){Da.findEdgeRingContaining(t,r)&&r.push(t)}),c(r.map(function(t){return t.toPolygon()}))},t.booleanDisjoint=function(t,e){var n;return F(t,function(t){F(e,function(e){if(!1===n)return!1;n=function(t,e){switch(t.type){case\"Point\":switch(e.type){case\"Point\":return!function(t,e){return t[0]===e[0]&&t[1]===e[1]}(t.coordinates,e.coordinates);case\"LineString\":return!wr(e,t);case\"Polygon\":return!Pt(t,e)}break;case\"LineString\":switch(e.type){case\"Point\":return!wr(t,e);case\"LineString\":return!function(t,e){return nn(t,e).features.length>0}(t,e);case\"Polygon\":return!br(e,t)}break;case\"Polygon\":switch(e.type){case\"Point\":return!Pt(e,t);case\"LineString\":return!br(t,e);case\"Polygon\":return!function(t,e){for(var n=0;n<t.coordinates[0].length;n++)if(Pt(t.coordinates[0][n],e))return!0;for(var r=0;r<e.coordinates[0].length;r++)if(Pt(e.coordinates[0][r],t))return!0;return!1}(e,t)}}}(t.geometry,e.geometry)})}),n},t.booleanContains=function(t,e){var n=K(t),r=K(e),i=J(t),o=J(e),s=U(t),a=U(e);switch(n){case\"Point\":switch(r){case\"Point\":return Nr(s,a);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}case\"MultiPoint\":switch(r){case\"Point\":return function(t,e){var n,r=!1;for(n=0;n<t.coordinates.length;n++)if(Nr(t.coordinates[n],e.coordinates)){r=!0;break}return r}(i,o);case\"MultiPoint\":return function(t,e){for(var n=0;n<e.coordinates.length;n++){for(var r=!1,i=0;i<t.coordinates.length;i++)if(Nr(e.coordinates[n],t.coordinates[i])){r=!0;break}if(!r)return!1}return!0}(i,o);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}case\"LineString\":switch(r){case\"Point\":return Nn(o,i,{ignoreEndVertices:!0});case\"LineString\":return function(t,e){for(var n=!1,r=0;r<e.coordinates.length;r++)if(Nn({type:\"Point\",coordinates:e.coordinates[r]},t,{ignoreEndVertices:!0})&&(n=!0),!Nn({type:\"Point\",coordinates:e.coordinates[r]},t,{ignoreEndVertices:!1}))return!1;return n}(i,o);case\"MultiPoint\":return function(t,e){for(var n=!1,r=0;r<e.coordinates.length;r++)if(Nn(e.coordinates[r],t,{ignoreEndVertices:!0})&&(n=!0),!Nn(e.coordinates[r],t))return!1;return!!n}(i,o);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}case\"Polygon\":switch(r){case\"Point\":return Pt(o,i,{ignoreBoundary:!0});case\"LineString\":return function(t,e){var n=!1,r=0,i=j(t),o=j(e);if(!Ir(i,o))return!1;for(;r<e.coordinates.length-1;r++){var s=function(t,e){return[(t[0]+e[0])/2,(t[1]+e[1])/2]}(e.coordinates[r],e.coordinates[r+1]);if(Pt({type:\"Point\",coordinates:s},t,{ignoreBoundary:!0})){n=!0;break}}return n}(i,o);case\"Polygon\":return function(t,e){var n=j(t),r=j(e);if(!Ir(n,r))return!1;for(var i=0;i<e.coordinates[0].length;i++)if(!Pt(e.coordinates[0][i],t))return!1;return!0}(i,o);case\"MultiPoint\":return function(t,e){for(var n=0;n<e.coordinates.length;n++)if(!Pt(e.coordinates[n],t,{ignoreBoundary:!0}))return!1;return!0}(i,o);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}default:throw new Error(\"feature1 \"+n+\" geometry not supported\")}},t.booleanCrosses=function(t,e){var n=K(t),r=K(e),i=J(t),o=J(e);switch(n){case\"MultiPoint\":switch(r){case\"LineString\":return Cr(i,o);case\"Polygon\":return Mr(i,o);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}case\"LineString\":switch(r){case\"MultiPoint\":return Cr(o,i);case\"LineString\":return function(t,e){if(nn(t,e).features.length>0)for(var n=0;n<t.coordinates.length-1;n++)for(var r=0;r<e.coordinates.length-1;r++){var i=!0;if(0!==r&&r!==e.coordinates.length-2||(i=!1),Lr(t.coordinates[n],t.coordinates[n+1],e.coordinates[r],i))return!0}return!1}(i,o);case\"Polygon\":return Sr(i,o);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}case\"Polygon\":switch(r){case\"MultiPoint\":return Mr(o,i);case\"LineString\":return Sr(o,i);default:throw new Error(\"feature2 \"+r+\" geometry not supported\")}default:throw new Error(\"feature1 \"+n+\" geometry not supported\")}},t.booleanClockwise=or,t.booleanOverlap=Tr,t.booleanPointOnLine=Nn,t.booleanEqual=function(t,e){if(!t)throw new Error(\"feature1 is required\");if(!e)throw new Error(\"feature2 is required\");return K(t)===K(e)&&new ja({precision:6}).compare(te(t),te(e))},t.booleanWithin=Cn,t.clone=Gt,t.cleanCoords=te,t.clustersDbscan=function(t,e,n){if(\"object\"!=typeof(n=n||{}))throw new Error(\"options is invalid\");var r=n.minPoints,i=n.units;if(W(t,\"Point\",\"Input must contain Points\"),null===e||void 0===e)throw new Error(\"maxDistance is required\");if(!(Math.sign(e)>0))throw new Error(\"Invalid maxDistance\");if(!(void 0===r||null===r||Math.sign(r)>0))throw new Error(\"Invalid minPoints\");t=Gt(t),r=r||3;var o=new Ha.DBSCAN,s=-1;return o.run(T(t),E(e,i),r,qt).forEach(function(e){s++,e.forEach(function(e){var n=t.features[e];n.properties||(n.properties={}),n.properties.cluster=s,n.properties.dbscan=\"core\"})}),o.noise.forEach(function(e){var n=t.features[e];n.properties||(n.properties={}),n.properties.cluster?n.properties.dbscan=\"edge\":n.properties.dbscan=\"noise\"}),t},t.clustersKmeans=function(t,e){if(\"object\"!=typeof(e=e||{}))throw new Error(\"options is invalid\");var n=e.numberOfClusters,r=e.mutate;W(t,\"Point\",\"Input must contain Points\");var i=t.features.length;(n=n||Math.round(Math.sqrt(i/2)))>i&&(n=i),!1!==r&&void 0!==r||(t=Gt(t));var o=T(t),s=o.slice(0,n),a=eu(o,n,s),u={};return a.centroids.forEach(function(t,e){u[e]=t}),O(t,function(t,e){var n=a.idxs[e];t.properties.cluster=n,t.properties.centroid=u[n]}),t},t.pointToLineDistance=gn,t.booleanParallel=function(t,e){if(!t)throw new Error(\"line1 is required\");if(!e)throw new Error(\"line2 is required\");if(\"LineString\"!==Dr(t,\"line1\"))throw new Error(\"line1 must be a LineString\");if(\"LineString\"!==Dr(e,\"line2\"))throw new Error(\"line2 must be a LineString\");for(var n=en(te(t)).features,r=en(te(e)).features,i=0;i<n.length;i++){var o=n[i].geometry.coordinates;if(!r[i])break;if(!function(t,e){var n=m(sn(t[0],t[1])),r=m(sn(e[0],e[1]));return n===r}(o,r[i].geometry.coordinates))return!1}return!0},t.shortestPath=function(t,n,i){if(i=i||{},!I(i))throw new Error(\"options is invalid\");var o=i.resolution,s=i.minDistance,u=i.obstacles||c([]);if(!t)throw new Error(\"start is required\");if(!n)throw new Error(\"end is required\");if(o&&!b(o)||o<=0)throw new Error(\"options.resolution must be a number, greater than 0\");if(s)throw new Error(\"options.minDistance is not yet implemented\");var h=X(t),l=X(n);switch(t=r(h),n=r(l),K(u)){case\"FeatureCollection\":if(0===u.features.length)return a([h,l]);break;case\"Polygon\":u=c([e(J(u))]);break;default:throw new Error(\"invalid obstacles\")}var p=u;p.features.push(t),p.features.push(n);var f=j(gr(ce(j(p)),1.15));o||(o=qt([f[0],f[1]],[f[2],f[1]],i)/100);p.features.pop(),p.features.pop();for(var g=f[0],d=f[1],y=f[2],_=f[3],m=o/qt([g,d],[y,d],i)*(y-g),v=o/qt([g,d],[g,_],i)*(_-d),x=y-g,E=_-d,w=(x-Math.floor(x/m)*m)/2,N=[],C=[],S=[],M=[],L=1/0,P=1/0,O=_-(E-Math.floor(E/v)*v)/2,R=0;O>=d;){for(var T=[],A=[],D=g+w,F=0;D<=y;){var q=r([D,O]),G=function(t,e){for(var n=0;n<e.features.length;n++)if(Pt(t,e.features[n]))return!0;return!1}(q,u);T.push(G?0:1),A.push(D+\"|\"+O);var B=qt(q,t);!G&&B<L&&(L=B,S={x:F,y:R});var k=qt(q,n);!G&&k<P&&(P=k,M={x:F,y:R}),D+=m,F++}C.push(T),N.push(A),O-=v,R++}var z=new qr(C,{diagonal:!0}),U=z.grid[S.y][S.x],Y=z.grid[M.y][M.x],V=[h];return nu.search(z,U,Y).forEach(function(t){var e=N[t.x][t.y].split(\"|\");V.push([+e[0],+e[1]])}),V.push(l),te(a(V))},t.voronoi=function(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.bbox||[-180,-85,180,85];if(!t)throw new Error(\"points is required\");if(!Array.isArray(n))throw new Error(\"bbox is invalid\");return W(t,\"Point\",\"points\"),c(fu().x(function(t){return t.geometry.coordinates[0]}).y(function(t){return t.geometry.coordinates[1]}).extent([[n[0],n[1]],[n[2],n[3]]]).polygons(t.features).map(li))},t.ellipse=pi,t.centerMean=gi,t.centerMedian=function(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.counter||10;if(!b(n))throw new Error(\"counter must be a number\");var r=e.weight,i=gi(t,{weight:e.weight}),o=c([]);return O(t,function(t){o.features.push(ye(t,{weight:t.properties[r]}))}),o.properties={tolerance:e.tolerance,medianCandidates:[]},di(i.geometry.coordinates,[0,0],o,n)},t.standardDeviationalEllipse=function(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.steps||64,r=e.weight,i=e.properties||{};if(!b(n))throw new Error(\"steps must be a number\");if(!I(i))throw new Error(\"properties must be a number\");var o=T(t).length,s=gi(t,{weight:r}),a=0,u=0,h=0;O(t,function(t){var e=t.properties[r]||1,n=yi(U(t),U(s));a+=Math.pow(n.x,2)*e,u+=Math.pow(n.y,2)*e,h+=n.x*n.y*e});var l=a-u,p=Math.sqrt(Math.pow(l,2)+4*Math.pow(h,2)),f=2*h,g=Math.atan((l+p)/f),d=180*g/Math.PI,y=0,_=0,m=0;O(t,function(t){var e=t.properties[r]||1,n=yi(U(t),U(s));y+=Math.pow(n.x*Math.cos(g)-n.y*Math.sin(g),2)*e,_+=Math.pow(n.x*Math.sin(g)+n.y*Math.cos(g),2)*e,m+=e});var v=Math.sqrt(2*y/m),x=Math.sqrt(2*_/m),E=pi(s,v,x,{units:\"degrees\",angle:d,steps:n,properties:i}),w=Rt(t,c([E])),N={meanCenterCoordinates:U(s),semiMajorAxis:v,semiMinorAxis:x,numberOfFeatures:o,angle:d,percentageWithinEllipse:100*T(w).length/o};return E.properties.standardDeviationalEllipse=N,E},t.difference=function(t,n){var r=J(t),i=J(n),o=t.properties||{};if(r=Ui(r),i=Ui(i),!r)return null;if(!i)return e(r,o);var s=new bh,a=s.read(r),u=s.read(i),c=Cf.difference(a,u);return c.isEmpty()?null:e((new Ih).write(c),o)},t.buffer=function(t,e,n){var r=(n=n||{}).units,i=n.steps||64;if(!t)throw new Error(\"geojson is required\");if(\"object\"!=typeof n)throw new Error(\"options must be an object\");if(\"number\"!=typeof i)throw new Error(\"steps must be an number\");if(void 0===e)throw new Error(\"radius is required\");if(i<=0)throw new Error(\"steps must be greater than 0\");i=i||64,r=r||\"kilometers\";var o=[];switch(t.type){case\"GeometryCollection\":return A(t,function(t){var n=bo(t,e,r,i);n&&o.push(n)}),c(o);case\"FeatureCollection\":return O(t,function(t){var n=bo(t,e,r,i);n&&O(n,function(t){t&&o.push(t)})}),c(o)}return bo(t,e,r,i)},t.union=Mo,t.intersect=Lo,t.dissolve=function(t,e){if(e=e||{},!I(e))throw new Error(\"options is invalid\");var n=e.propertyName;W(t,\"Polygon\",\"dissolve\");var r=Gt(t),i=r.features,o=[];i.forEach(function(t,e){t.properties.origIndexPosition=e});var s=Qe();s.load(r);for(var u in i){var c=i[u],h=!1;if(s.search(c).features.forEach(function(t){c=i[u];var e=t.properties.origIndexPosition;if(o.length>0&&0!==e)if(e>o[o.length-1])e-=o.length;else{var r=Po(e,o);0!==r&&(e-=r)}if(e!==+u){var l=i[e];l&&c&&(void 0!==n&&l.properties[n]!==c.properties[n]||Tr(c,l)&&function(t,e){var n=a(T(t)),r=a(T(e));return nn(n,r).features.length>0}(c,l)&&(i[u]=Mo(c,l),o.push(t.properties.origIndexPosition),o.sort(function(t,e){return t-e}),s.remove(t),i.splice(e,1),c.properties.origIndexPosition=u,s.remove(c,function(t,e){return t.properties.origIndexPosition===e.properties.origIndexPosition}),h=!0))}}),h){if(!c)continue;c.properties.origIndexPosition=u,s.insert(c),u--}}return i.forEach(function(t){delete t.properties.origIndexPosition,delete t.bbox}),r},t.hexGrid=Oo,t.mask=function(t,e){var n=function(t){return o(t&&t.geometry.coordinates||[[[180,90],[-180,90],[-180,-90],[180,-90],[180,90]]])}(e),r=function(t){var e=[],n=[];return F(t,function(t){var r=t.geometry.coordinates,i=r[0],s=r.slice(1);e.push(o([i])),s.forEach(function(t){n.push(o([t]))})}),[c(e),c(n)]}(t),i=r[0],s=r[1];return function(t,e,n){var r=[];return r.push(t.geometry.coordinates[0]),F(e,function(t){r.push(t.geometry.coordinates[0])}),F(n,function(t){r.push(t.geometry.coordinates[0])}),o(r)}(n,i=Ro(i),s=Ro(s))},t.squareGrid=Ao,t.triangleGrid=Do,t.interpolate=function(t,e,n){if(\"object\"!=typeof(n=n||{}))throw new Error(\"options is invalid\");var r=n.gridType,i=n.property,o=n.weight;if(!t)throw new Error(\"points is required\");if(W(t,\"Point\",\"input must contain Points\"),!e)throw new Error(\"cellSize is required\");if(void 0!==o&&\"number\"!=typeof o)throw new Error(\"weight must be a number\");i=i||\"elevation\",r=r||\"square\",o=o||1;var s,a=j(t);switch(r){case\"point\":case\"points\":s=Ln(a,e,n);break;case\"square\":case\"squares\":s=Ao(a,e,n);break;case\"hex\":case\"hexes\":s=Oo(a,e,n);break;case\"triangle\":case\"triangles\":s=Do(a,e,n);break;default:throw new Error(\"invalid gridType\")}var u=[];return O(s,function(e){var s=0,a=0;O(t,function(t){var u,c=qt(\"point\"===r?e:ye(e),t,n);if(void 0!==i&&(u=t.properties[i]),void 0===u&&(u=t.geometry.coordinates[2]),void 0===u)throw new Error(\"zValue is missing\");0===c&&(s=u);var h=1/Math.pow(c,o);a+=h,s+=h*u});var c=Gt(e);c.properties[i]=s/a,u.push(c)}),c(u)},t.pointOnSurface=yn,t.polygonToLineString=kn,t.lineStringToPolygon=jn,t.inside=Pt,t.within=Rt,t.bezier=ue,t.nearest=Fe,t.pointOnLine=on,t.lineDistance=bn,t.radians2degrees=v,t.degrees2radians=x,t.distanceToDegrees=_,t.distanceToRadians=y,t.radiansToDistance=d,t.bearingToAngle=m,t.convertDistance=E,t.toMercator=cn,t.toWgs84=hn,t.randomPosition=_i,t.randomPoint=mi,t.randomPolygon=vi,t.randomLineString=xi,t.getCluster=wi,t.clusterEach=bi,t.clusterReduce=Ii,t.createBins=Ni,t.applyFilter=Ci,t.propertiesContainsFilter=Si,t.filterProperties=Mi,t.earthRadius=Fo,t.factors=qo,t.unitsFactors=Go,t.areaFactors=Bo,t.feature=e,t.geometry=n,t.point=r,t.points=i,t.polygon=o,t.polygons=s,t.lineString=a,t.lineStrings=u,t.featureCollection=c,t.multiLineString=h,t.multiPoint=l,t.multiPolygon=p,t.geometryCollection=f,t.round=g,t.radiansToLength=d,t.lengthToRadians=y,t.lengthToDegrees=_,t.bearingToAzimuth=m,t.radiansToDegrees=v,t.degreesToRadians=x,t.convertLength=E,t.convertArea=w,t.isNumber=b,t.isObject=I,t.validateBBox=N,t.validateId=C,t.getCoord=X,t.getCoords=U,t.containsNumber=Y,t.geojsonType=V,t.featureOf=H,t.collectionOf=W,t.getGeom=J,t.getGeomType=Z,t.getType=K,t.coordEach=S,t.coordReduce=M,t.propEach=L,t.propReduce=P,t.featureEach=O,t.featureReduce=R,t.coordAll=T,t.geomEach=A,t.geomReduce=D,t.flattenEach=F,t.flattenReduce=q,t.segmentEach=G,t.segmentReduce=B,t.lineEach=k,t.lineReduce=z,Object.defineProperty(t,\"__esModule\",{value:!0})});\n","(function (root, factory) {\n\n  // Node.\n  if(typeof module === 'object' && typeof module.exports === 'object') {\n    exports = module.exports = factory();\n  }\n\n  // Browser Global.\n  if(typeof window === \"object\") {\n    root.Terraformer = factory();\n  }\n\n}(this, function(){\n  var exports = {},\n      EarthRadius = 6378137,\n      DegreesPerRadian = 57.295779513082320,\n      RadiansPerDegree =  0.017453292519943,\n      MercatorCRS = {\n        \"type\": \"link\",\n        \"properties\": {\n          \"href\": \"http://spatialreference.org/ref/sr-org/6928/ogcwkt/\",\n          \"type\": \"ogcwkt\"\n        }\n      },\n      GeographicCRS = {\n        \"type\": \"link\",\n        \"properties\": {\n          \"href\": \"http://spatialreference.org/ref/epsg/4326/ogcwkt/\",\n          \"type\": \"ogcwkt\"\n        }\n      };\n\n  /*\n  Internal: isArray function\n  */\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  }\n\n  /*\n  Internal: safe warning\n  */\n  function warn() {\n    var args = Array.prototype.slice.apply(arguments);\n\n    if (typeof console !== undefined && console.warn) {\n      console.warn.apply(console, args);\n    }\n  }\n\n  /*\n  Internal: Extend one object with another.\n  */\n  function extend(destination, source) {\n    for (var k in source) {\n      if (source.hasOwnProperty(k)) {\n        destination[k] = source[k];\n      }\n    }\n    return destination;\n  }\n\n  /*\n  Public: Calculate an bounding box for a geojson object\n  */\n  function calculateBounds (geojson) {\n    if(geojson.type){\n      switch (geojson.type) {\n        case 'Point':\n          return [ geojson.coordinates[0], geojson.coordinates[1], geojson.coordinates[0], geojson.coordinates[1]];\n\n        case 'MultiPoint':\n          return calculateBoundsFromArray(geojson.coordinates);\n\n        case 'LineString':\n          return calculateBoundsFromArray(geojson.coordinates);\n\n        case 'MultiLineString':\n          return calculateBoundsFromNestedArrays(geojson.coordinates);\n\n        case 'Polygon':\n          return calculateBoundsFromNestedArrays(geojson.coordinates);\n\n        case 'MultiPolygon':\n          return calculateBoundsFromNestedArrayOfArrays(geojson.coordinates);\n\n        case 'Feature':\n          return geojson.geometry? calculateBounds(geojson.geometry) : null;\n\n        case 'FeatureCollection':\n          return calculateBoundsForFeatureCollection(geojson);\n\n        case 'GeometryCollection':\n          return calculateBoundsForGeometryCollection(geojson);\n\n        default:\n          throw new Error(\"Unknown type: \" + geojson.type);\n      }\n    }\n    return null;\n  }\n\n  /*\n  Internal: Calculate an bounding box from an nested array of positions\n  [\n    [\n      [ [lng, lat],[lng, lat],[lng, lat] ]\n    ]\n    [\n      [lng, lat],[lng, lat],[lng, lat]\n    ]\n    [\n      [lng, lat],[lng, lat],[lng, lat]\n    ]\n  ]\n  */\n  function calculateBoundsFromNestedArrays (array) {\n    var x1 = null, x2 = null, y1 = null, y2 = null;\n\n    for (var i = 0; i < array.length; i++) {\n      var inner = array[i];\n\n      for (var j = 0; j < inner.length; j++) {\n        var lonlat = inner[j];\n\n        var lon = lonlat[0];\n        var lat = lonlat[1];\n\n        if (x1 === null) {\n          x1 = lon;\n        } else if (lon < x1) {\n          x1 = lon;\n        }\n\n        if (x2 === null) {\n          x2 = lon;\n        } else if (lon > x2) {\n          x2 = lon;\n        }\n\n        if (y1 === null) {\n          y1 = lat;\n        } else if (lat < y1) {\n          y1 = lat;\n        }\n\n        if (y2 === null) {\n          y2 = lat;\n        } else if (lat > y2) {\n          y2 = lat;\n        }\n      }\n    }\n\n    return [x1, y1, x2, y2 ];\n  }\n\n  /*\n  Internal: Calculate a bounding box from an array of arrays of arrays\n  [\n    [ [lng, lat],[lng, lat],[lng, lat] ]\n    [ [lng, lat],[lng, lat],[lng, lat] ]\n    [ [lng, lat],[lng, lat],[lng, lat] ]\n  ]\n  */\n  function calculateBoundsFromNestedArrayOfArrays (array) {\n    var x1 = null, x2 = null, y1 = null, y2 = null;\n\n    for (var i = 0; i < array.length; i++) {\n      var inner = array[i];\n\n      for (var j = 0; j < inner.length; j++) {\n        var innerinner = inner[j];\n        for (var k = 0; k < innerinner.length; k++) {\n          var lonlat = innerinner[k];\n\n          var lon = lonlat[0];\n          var lat = lonlat[1];\n\n          if (x1 === null) {\n            x1 = lon;\n          } else if (lon < x1) {\n            x1 = lon;\n          }\n\n          if (x2 === null) {\n            x2 = lon;\n          } else if (lon > x2) {\n            x2 = lon;\n          }\n\n          if (y1 === null) {\n            y1 = lat;\n          } else if (lat < y1) {\n            y1 = lat;\n          }\n\n          if (y2 === null) {\n            y2 = lat;\n          } else if (lat > y2) {\n            y2 = lat;\n          }\n        }\n      }\n    }\n\n    return [x1, y1, x2, y2];\n  }\n\n  /*\n  Internal: Calculate a bounding box from an array of positions\n  [\n    [lng, lat],[lng, lat],[lng, lat]\n  ]\n  */\n  function calculateBoundsFromArray (array) {\n    var x1 = null, x2 = null, y1 = null, y2 = null;\n\n    for (var i = 0; i < array.length; i++) {\n      var lonlat = array[i];\n      var lon = lonlat[0];\n      var lat = lonlat[1];\n\n      if (x1 === null) {\n        x1 = lon;\n      } else if (lon < x1) {\n        x1 = lon;\n      }\n\n      if (x2 === null) {\n        x2 = lon;\n      } else if (lon > x2) {\n        x2 = lon;\n      }\n\n      if (y1 === null) {\n        y1 = lat;\n      } else if (lat < y1) {\n        y1 = lat;\n      }\n\n      if (y2 === null) {\n        y2 = lat;\n      } else if (lat > y2) {\n        y2 = lat;\n      }\n    }\n\n    return [x1, y1, x2, y2 ];\n  }\n\n  /*\n  Internal: Calculate an bounding box for a feature collection\n  */\n  function calculateBoundsForFeatureCollection(featureCollection){\n    var extents = [], extent;\n    for (var i = featureCollection.features.length - 1; i >= 0; i--) {\n      extent = calculateBounds(featureCollection.features[i].geometry);\n      extents.push([extent[0],extent[1]]);\n      extents.push([extent[2],extent[3]]);\n    }\n\n    return calculateBoundsFromArray(extents);\n  }\n\n  /*\n  Internal: Calculate an bounding box for a geometry collection\n  */\n  function calculateBoundsForGeometryCollection(geometryCollection){\n    var extents = [], extent;\n\n    for (var i = geometryCollection.geometries.length - 1; i >= 0; i--) {\n      extent = calculateBounds(geometryCollection.geometries[i]);\n      extents.push([extent[0],extent[1]]);\n      extents.push([extent[2],extent[3]]);\n    }\n\n    return calculateBoundsFromArray(extents);\n  }\n\n  function calculateEnvelope(geojson){\n    var bounds = calculateBounds(geojson);\n    return {\n      x: bounds[0],\n      y: bounds[1],\n      w: Math.abs(bounds[0] - bounds[2]),\n      h: Math.abs(bounds[1] - bounds[3])\n    };\n  }\n\n  /*\n  Internal: Convert radians to degrees. Used by spatial reference converters.\n  */\n  function radToDeg(rad) {\n    return rad * DegreesPerRadian;\n  }\n\n  /*\n  Internal: Convert degrees to radians. Used by spatial reference converters.\n  */\n  function degToRad(deg) {\n    return deg * RadiansPerDegree;\n  }\n\n  /*\n  Internal: Loop over each array in a geojson object and apply a function to it. Used by spatial reference converters.\n  */\n  function eachPosition(coordinates, func) {\n    for (var i = 0; i < coordinates.length; i++) {\n      // we found a number so lets convert this pair\n      if(typeof coordinates[i][0] === \"number\"){\n        coordinates[i] = func(coordinates[i]);\n      }\n      // we found an coordinates array it again and run THIS function against it\n      if(typeof coordinates[i] === \"object\"){\n        coordinates[i] = eachPosition(coordinates[i], func);\n      }\n    }\n    return coordinates;\n  }\n\n  /*\n  Public: Convert a GeoJSON Position object to Geographic (4326)\n  */\n  function positionToGeographic(position) {\n    var x = position[0];\n    var y = position[1];\n    return [radToDeg(x / EarthRadius) - (Math.floor((radToDeg(x / EarthRadius) + 180) / 360) * 360), radToDeg((Math.PI / 2) - (2 * Math.atan(Math.exp(-1.0 * y / EarthRadius))))];\n  }\n\n  /*\n  Public: Convert a GeoJSON Position object to Web Mercator (102100)\n  */\n  function positionToMercator(position) {\n    var lng = position[0];\n    var lat = Math.max(Math.min(position[1], 89.99999), -89.99999);\n    return [degToRad(lng) * EarthRadius, EarthRadius/2.0 * Math.log( (1.0 + Math.sin(degToRad(lat))) / (1.0 - Math.sin(degToRad(lat))) )];\n  }\n\n  /*\n  Public: Apply a function agaist all positions in a geojson object. Used by spatial reference converters.\n  */\n  function applyConverter(geojson, converter, noCrs){\n    if(geojson.type === \"Point\") {\n      geojson.coordinates = converter(geojson.coordinates);\n    } else if(geojson.type === \"Feature\") {\n      geojson.geometry = applyConverter(geojson.geometry, converter, true);\n    } else if(geojson.type === \"FeatureCollection\") {\n      for (var f = 0; f < geojson.features.length; f++) {\n        geojson.features[f] = applyConverter(geojson.features[f], converter, true);\n      }\n    } else if(geojson.type === \"GeometryCollection\") {\n      for (var g = 0; g < geojson.geometries.length; g++) {\n        geojson.geometries[g] = applyConverter(geojson.geometries[g], converter, true);\n      }\n    } else {\n      geojson.coordinates = eachPosition(geojson.coordinates, converter);\n    }\n\n    if(!noCrs){\n      if(converter === positionToMercator){\n        geojson.crs = MercatorCRS;\n      }\n    }\n\n    if(converter === positionToGeographic){\n      delete geojson.crs;\n    }\n\n    return geojson;\n  }\n\n  /*\n  Public: Convert a GeoJSON object to ESRI Web Mercator (102100)\n  */\n  function toMercator(geojson) {\n    return applyConverter(geojson, positionToMercator);\n  }\n\n  /*\n  Convert a GeoJSON object to Geographic coordinates (WSG84, 4326)\n  */\n  function toGeographic(geojson) {\n    return applyConverter(geojson, positionToGeographic);\n  }\n\n\n  /*\n  Internal: -1,0,1 comparison function\n  */\n  function cmp(a, b) {\n    if(a < b) {\n      return -1;\n    } else if(a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  /*\n  Internal: used for sorting\n  */\n  function compSort(p1, p2) {\n    if (p1[0] > p2[0]) {\n      return -1;\n    } else if (p1[0] < p2[0]) {\n      return 1;\n    } else if (p1[1] > p2[1]) {\n      return -1;\n    } else if (p1[1] < p2[1]) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n\n  /*\n  Internal: used to determine turn\n  */\n  function turn(p, q, r) {\n    // Returns -1, 0, 1 if p,q,r forms a right, straight, or left turn.\n    return cmp((q[0] - p[0]) * (r[1] - p[1]) - (r[0] - p[0]) * (q[1] - p[1]), 0);\n  }\n\n  /*\n  Internal: used to determine euclidean distance between two points\n  */\n  function euclideanDistance(p, q) {\n    // Returns the squared Euclidean distance between p and q.\n    var dx = q[0] - p[0];\n    var dy = q[1] - p[1];\n\n    return dx * dx + dy * dy;\n  }\n\n  function nextHullPoint(points, p) {\n    // Returns the next point on the convex hull in CCW from p.\n    var q = p;\n    for(var r in points) {\n      var t = turn(p, q, points[r]);\n      if(t === -1 || t === 0 && euclideanDistance(p, points[r]) > euclideanDistance(p, q)) {\n        q = points[r];\n      }\n    }\n    return q;\n  }\n\n  function convexHull(points) {\n    // implementation of the Jarvis March algorithm\n    // adapted from http://tixxit.wordpress.com/2009/12/09/jarvis-march/\n\n    if(points.length === 0) {\n      return [];\n    } else if(points.length === 1) {\n      return points;\n    }\n\n    // Returns the points on the convex hull of points in CCW order.\n    var hull = [points.sort(compSort)[0]];\n\n    for(var p = 0; p < hull.length; p++) {\n      var q = nextHullPoint(points, hull[p]);\n\n      if(q !== hull[0]) {\n        hull.push(q);\n      }\n    }\n\n    return hull;\n  }\n\n  function isConvex(points) {\n    var ltz;\n\n    for (var i = 0; i < points.length - 3; i++) {\n      var p1 = points[i];\n      var p2 = points[i + 1];\n      var p3 = points[i + 2];\n      var v = [p2[0] - p1[0], p2[1] - p1[1]];\n\n      // p3.x * v.y - p3.y * v.x + v.x * p1.y - v.y * p1.x\n      var res = p3[0] * v[1] - p3[1] * v[0] + v[0] * p1[1] - v[1] * p1[0];\n\n      if (i === 0) {\n        if (res < 0) {\n          ltz = true;\n        } else {\n          ltz = false;\n        }\n      } else {\n        if (ltz && (res > 0) || !ltz && (res < 0)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function coordinatesContainPoint(coordinates, point) {\n    var contains = false;\n    for(var i = -1, l = coordinates.length, j = l - 1; ++i < l; j = i) {\n      if (((coordinates[i][1] <= point[1] && point[1] < coordinates[j][1]) ||\n           (coordinates[j][1] <= point[1] && point[1] < coordinates[i][1])) &&\n          (point[0] < (coordinates[j][0] - coordinates[i][0]) * (point[1] - coordinates[i][1]) / (coordinates[j][1] - coordinates[i][1]) + coordinates[i][0])) {\n        contains = !contains;\n      }\n    }\n    return contains;\n  }\n\n  function polygonContainsPoint(polygon, point) {\n    if (polygon && polygon.length) {\n      if (polygon.length === 1) { // polygon with no holes\n        return coordinatesContainPoint(polygon[0], point);\n      } else { // polygon with holes\n        if (coordinatesContainPoint(polygon[0], point)) {\n          for (var i = 1; i < polygon.length; i++) {\n            if (coordinatesContainPoint(polygon[i], point)) {\n              return false; // found in hole\n            }\n          }\n\n          return true;\n        } else {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n  }\n\n  function edgeIntersectsEdge(a1, a2, b1, b2) {\n    var ua_t = (b2[0] - b1[0]) * (a1[1] - b1[1]) - (b2[1] - b1[1]) * (a1[0] - b1[0]);\n    var ub_t = (a2[0] - a1[0]) * (a1[1] - b1[1]) - (a2[1] - a1[1]) * (a1[0] - b1[0]);\n    var u_b  = (b2[1] - b1[1]) * (a2[0] - a1[0]) - (b2[0] - b1[0]) * (a2[1] - a1[1]);\n\n    if ( u_b !== 0 ) {\n      var ua = ua_t / u_b;\n      var ub = ub_t / u_b;\n\n      if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function arraysIntersectArrays(a, b) {\n    if (isNumber(a[0][0])) {\n      if (isNumber(b[0][0])) {\n        for (var i = 0; i < a.length - 1; i++) {\n          for (var j = 0; j < b.length - 1; j++) {\n            if (edgeIntersectsEdge(a[i], a[i + 1], b[j], b[j + 1])) {\n              return true;\n            }\n          }\n        }\n      } else {\n        for (var k = 0; k < b.length; k++) {\n          if (arraysIntersectArrays(a, b[k])) {\n            return true;\n          }\n        }\n      }\n    } else {\n      for (var l = 0; l < a.length; l++) {\n        if (arraysIntersectArrays(a[l], b)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /*\n  Internal: Returns a copy of coordinates for s closed polygon\n  */\n  function closedPolygon(coordinates) {\n    var outer = [ ];\n\n    for (var i = 0; i < coordinates.length; i++) {\n      var inner = coordinates[i].slice();\n      if (pointsEqual(inner[0], inner[inner.length - 1]) === false) {\n        inner.push(inner[0]);\n      }\n\n      outer.push(inner);\n    }\n\n    return outer;\n  }\n\n  function pointsEqual(a, b) {\n    for (var i = 0; i < a.length; i++) {\n\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function coordinatesEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    var na = a.slice().sort(compSort);\n    var nb = b.slice().sort(compSort);\n\n    for (var i = 0; i < na.length; i++) {\n      if (na[i].length !== nb[i].length) {\n        return false;\n      }\n      for (var j = 0; j < na.length; j++) {\n        if (na[i][j] !== nb[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /*\n  Internal: An array of variables that will be excluded form JSON objects.\n  */\n  var excludeFromJSON = [\"length\"];\n\n  /*\n  Internal: Base GeoJSON Primitive\n  */\n  function Primitive(geojson){\n    if(geojson){\n      switch (geojson.type) {\n      case 'Point':\n        return new Point(geojson);\n\n      case 'MultiPoint':\n        return new MultiPoint(geojson);\n\n      case 'LineString':\n        return new LineString(geojson);\n\n      case 'MultiLineString':\n        return new MultiLineString(geojson);\n\n      case 'Polygon':\n        return new Polygon(geojson);\n\n      case 'MultiPolygon':\n        return new MultiPolygon(geojson);\n\n      case 'Feature':\n        return new Feature(geojson);\n\n      case 'FeatureCollection':\n        return new FeatureCollection(geojson);\n\n      case 'GeometryCollection':\n        return new GeometryCollection(geojson);\n\n      default:\n        throw new Error(\"Unknown type: \" + geojson.type);\n      }\n    }\n  }\n\n  Primitive.prototype.toMercator = function(){\n    return toMercator(this);\n  };\n\n  Primitive.prototype.toGeographic = function(){\n    return toGeographic(this);\n  };\n\n  Primitive.prototype.envelope = function(){\n    return calculateEnvelope(this);\n  };\n\n  Primitive.prototype.bbox = function(){\n    return calculateBounds(this);\n  };\n\n  Primitive.prototype.convexHull = function(){\n    var coordinates = [ ], i, j;\n    if (this.type === 'Point') {\n      return null;\n    } else if (this.type === 'LineString' || this.type === 'MultiPoint') {\n      if (this.coordinates && this.coordinates.length >= 3) {\n        coordinates = this.coordinates;\n      } else {\n        return null;\n      }\n    } else if (this.type === 'Polygon' || this.type === 'MultiLineString') {\n      if (this.coordinates && this.coordinates.length > 0) {\n        for (i = 0; i < this.coordinates.length; i++) {\n          coordinates = coordinates.concat(this.coordinates[i]);\n        }\n        if(coordinates.length < 3){\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else if (this.type === 'MultiPolygon') {\n      if (this.coordinates && this.coordinates.length > 0) {\n        for (i = 0; i < this.coordinates.length; i++) {\n          for (j = 0; j < this.coordinates[i].length; j++) {\n            coordinates = coordinates.concat(this.coordinates[i][j]);\n          }\n        }\n        if(coordinates.length < 3){\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else if(this.type === \"Feature\"){\n      var primitive = new Primitive(this.geometry);\n      return primitive.convexHull();\n    }\n\n    return new Polygon({\n      type: 'Polygon',\n      coordinates: closedPolygon([convexHull(coordinates)])\n    });\n  };\n\n  Primitive.prototype.toJSON = function(){\n    var obj = {};\n    for (var key in this) {\n      if (this.hasOwnProperty(key) && excludeFromJSON.indexOf(key) === -1) {\n        obj[key] = this[key];\n      }\n    }\n    obj.bbox = calculateBounds(this);\n    return obj;\n  };\n\n  Primitive.prototype.contains = function(primitive){\n    return new Primitive(primitive).within(this);\n  };\n\n  Primitive.prototype.within = function(primitive) {\n    var coordinates, i, contains;\n\n    // if we are passed a feature, use the polygon inside instead\n    if (primitive.type === 'Feature') {\n      primitive = primitive.geometry;\n    }\n\n    // point.within(point) :: equality\n    if (primitive.type === \"Point\") {\n      if (this.type === \"Point\") {\n        return pointsEqual(this.coordinates, primitive.coordinates);\n\n      }\n    }\n\n    // point.within(multilinestring)\n    if (primitive.type === \"MultiLineString\") {\n      if (this.type === \"Point\") {\n        for (i = 0; i < primitive.coordinates.length; i++) {\n          var linestring = { type: \"LineString\", coordinates: primitive.coordinates[i] };\n\n          if (this.within(linestring)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    // point.within(linestring), point.within(multipoint)\n    if (primitive.type === \"LineString\" || primitive.type === \"MultiPoint\") {\n      if (this.type === \"Point\") {\n        for (i = 0; i < primitive.coordinates.length; i++) {\n          if (this.coordinates.length !== primitive.coordinates[i].length) {\n            return false;\n          }\n\n          if (pointsEqual(this.coordinates, primitive.coordinates[i])) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if (primitive.type === \"Polygon\") {\n      // polygon.within(polygon)\n      if (this.type === \"Polygon\") {\n        // check for equal polygons\n        if (primitive.coordinates.length === this.coordinates.length) {\n          for (i = 0; i < this.coordinates.length; i++) {\n            if (coordinatesEqual(this.coordinates[i], primitive.coordinates[i])) {\n              return true;\n            }\n          }\n        }\n\n        if (this.coordinates.length && polygonContainsPoint(primitive.coordinates, this.coordinates[0][0])) {\n          return !arraysIntersectArrays(closedPolygon(this.coordinates), closedPolygon(primitive.coordinates));\n        } else {\n          return false;\n        }\n\n      // point.within(polygon)\n      } else if (this.type === \"Point\") {\n        return polygonContainsPoint(primitive.coordinates, this.coordinates);\n\n      // linestring/multipoint withing polygon\n      } else if (this.type === \"LineString\" || this.type === \"MultiPoint\") {\n        if (!this.coordinates || this.coordinates.length === 0) {\n          return false;\n        }\n\n        for (i = 0; i < this.coordinates.length; i++) {\n          if (polygonContainsPoint(primitive.coordinates, this.coordinates[i]) === false) {\n            return false;\n          }\n        }\n\n        return true;\n\n      // multilinestring.within(polygon)\n      } else if (this.type === \"MultiLineString\") {\n        for (i = 0; i < this.coordinates.length; i++) {\n          var ls = new LineString(this.coordinates[i]);\n\n          if (ls.within(primitive) === false) {\n            contains++;\n            return false;\n          }\n        }\n\n        return true;\n\n      // multipolygon.within(polygon)\n      } else if (this.type === \"MultiPolygon\") {\n        for (i = 0; i < this.coordinates.length; i++) {\n          var p1 = new Primitive({ type: \"Polygon\", coordinates: this.coordinates[i] });\n\n          if (p1.within(primitive) === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n    }\n\n    if (primitive.type === \"MultiPolygon\") {\n      // point.within(multipolygon)\n      if (this.type === \"Point\") {\n        if (primitive.coordinates.length) {\n          for (i = 0; i < primitive.coordinates.length; i++) {\n            coordinates = primitive.coordinates[i];\n            if (polygonContainsPoint(coordinates, this.coordinates) && arraysIntersectArrays([this.coordinates], primitive.coordinates) === false) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      // polygon.within(multipolygon)\n      } else if (this.type === \"Polygon\") {\n        for (i = 0; i < this.coordinates.length; i++) {\n          if (primitive.coordinates[i].length === this.coordinates.length) {\n            for (j = 0; j < this.coordinates.length; j++) {\n              if (coordinatesEqual(this.coordinates[j], primitive.coordinates[i][j])) {\n                return true;\n              }\n            }\n          }\n        }\n\n        if (arraysIntersectArrays(this.coordinates, primitive.coordinates) === false) {\n          if (primitive.coordinates.length) {\n            for (i = 0; i < primitive.coordinates.length; i++) {\n              coordinates = primitive.coordinates[i];\n              if (polygonContainsPoint(coordinates, this.coordinates[0][0]) === false) {\n                contains = false;\n              } else {\n                contains = true;\n              }\n            }\n\n            return contains;\n          }\n        }\n\n      // linestring.within(multipolygon), multipoint.within(multipolygon)\n      } else if (this.type === \"LineString\" || this.type === \"MultiPoint\") {\n        for (i = 0; i < primitive.coordinates.length; i++) {\n          var p = { type: \"Polygon\", coordinates: primitive.coordinates[i] };\n\n          if (this.within(p)) {\n            return true;\n          }\n\n          return false;\n        }\n\n      // multilinestring.within(multipolygon)\n      } else if (this.type === \"MultiLineString\") {\n        for (i = 0; i < this.coordinates.length; i++) {\n          var lines = new LineString(this.coordinates[i]);\n\n          if (lines.within(primitive) === false) {\n            return false;\n          }\n        }\n\n        return true;\n\n      // multipolygon.within(multipolygon)\n      } else if (this.type === \"MultiPolygon\") {\n        for (i = 0; i < primitive.coordinates.length; i++) {\n          var mpoly = { type: \"Polygon\", coordinates: primitive.coordinates[i] };\n\n          if (this.within(mpoly) === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n\n    // default to false\n    return false;\n  };\n\n  Primitive.prototype.intersects = function(primitive) {\n    // if we are passed a feature, use the polygon inside instead\n    if (primitive.type === 'Feature') {\n      primitive = primitive.geometry;\n    }\n\n    var p = new Primitive(primitive);\n    if (this.within(primitive) || p.within(this)) {\n      return true;\n    }\n\n\n    if (this.type !== 'Point' && this.type !== 'MultiPoint' &&\n        primitive.type !== 'Point' && primitive.type !== 'MultiPoint') {\n      return arraysIntersectArrays(this.coordinates, primitive.coordinates);\n    } else if (this.type === 'Feature') {\n      // in the case of a Feature, use the internal primitive for intersection\n      var inner = new Primitive(this.geometry);\n      return inner.intersects(primitive);\n    }\n\n    warn(\"Type \" + this.type + \" to \" + primitive.type + \" intersection is not supported by intersects\");\n    return false;\n  };\n\n\n  /*\n  GeoJSON Point Class\n    new Point();\n    new Point(x,y,z,wtf);\n    new Point([x,y,z,wtf]);\n    new Point([x,y]);\n    new Point({\n      type: \"Point\",\n      coordinates: [x,y]\n    });\n  */\n  function Point(input){\n    var args = Array.prototype.slice.call(arguments);\n\n    if(input && input.type === \"Point\" && input.coordinates){\n      extend(this, input);\n    } else if(input && isArray(input)) {\n      this.coordinates = input;\n    } else if(args.length >= 2) {\n      this.coordinates = args;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.Point\";\n    }\n\n    this.type = \"Point\";\n  }\n\n  Point.prototype = new Primitive();\n  Point.prototype.constructor = Point;\n\n  /*\n  GeoJSON MultiPoint Class\n      new MultiPoint();\n      new MultiPoint([[x,y], [x1,y1]]);\n      new MultiPoint({\n        type: \"MultiPoint\",\n        coordinates: [x,y]\n      });\n  */\n  function MultiPoint(input){\n    if(input && input.type === \"MultiPoint\" && input.coordinates){\n      extend(this, input);\n    } else if(isArray(input)) {\n      this.coordinates = input;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.MultiPoint\";\n    }\n\n    this.type = \"MultiPoint\";\n  }\n\n  MultiPoint.prototype = new Primitive();\n  MultiPoint.prototype.constructor = MultiPoint;\n  MultiPoint.prototype.forEach = function(func){\n    for (var i = 0; i < this.coordinates.length; i++) {\n      func.apply(this, [this.coordinates[i], i, this.coordinates]);\n    }\n    return this;\n  };\n  MultiPoint.prototype.addPoint = function(point){\n    this.coordinates.push(point);\n    return this;\n  };\n  MultiPoint.prototype.insertPoint = function(point, index){\n    this.coordinates.splice(index, 0, point);\n    return this;\n  };\n  MultiPoint.prototype.removePoint = function(remove){\n    if(typeof remove === \"number\"){\n      this.coordinates.splice(remove, 1);\n    } else {\n      this.coordinates.splice(this.coordinates.indexOf(remove), 1);\n    }\n    return this;\n  };\n  MultiPoint.prototype.get = function(i){\n    return new Point(this.coordinates[i]);\n  };\n\n  /*\n  GeoJSON LineString Class\n      new LineString();\n      new LineString([[x,y], [x1,y1]]);\n      new LineString({\n        type: \"LineString\",\n        coordinates: [x,y]\n      });\n  */\n  function LineString(input){\n    if(input && input.type === \"LineString\" && input.coordinates){\n      extend(this, input);\n    } else if(isArray(input)) {\n      this.coordinates = input;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.LineString\";\n    }\n\n    this.type = \"LineString\";\n  }\n\n  LineString.prototype = new Primitive();\n  LineString.prototype.constructor = LineString;\n  LineString.prototype.addVertex = function(point){\n    this.coordinates.push(point);\n    return this;\n  };\n  LineString.prototype.insertVertex = function(point, index){\n    this.coordinates.splice(index, 0, point);\n    return this;\n  };\n  LineString.prototype.removeVertex = function(remove){\n    this.coordinates.splice(remove, 1);\n    return this;\n  };\n\n  /*\n  GeoJSON MultiLineString Class\n      new MultiLineString();\n      new MultiLineString([ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ]);\n      new MultiLineString({\n        type: \"MultiLineString\",\n        coordinates: [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ]\n      });\n  */\n  function MultiLineString(input){\n    if(input && input.type === \"MultiLineString\" && input.coordinates){\n      extend(this, input);\n    } else if(isArray(input)) {\n      this.coordinates = input;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.MultiLineString\";\n    }\n\n    this.type = \"MultiLineString\";\n  }\n\n  MultiLineString.prototype = new Primitive();\n  MultiLineString.prototype.constructor = MultiLineString;\n  MultiLineString.prototype.forEach = function(func){\n    for (var i = 0; i < this.coordinates.length; i++) {\n      func.apply(this, [this.coordinates[i], i, this.coordinates ]);\n    }\n  };\n  MultiLineString.prototype.get = function(i){\n    return new LineString(this.coordinates[i]);\n  };\n\n  /*\n  GeoJSON Polygon Class\n      new Polygon();\n      new Polygon([ [[x,y], [x1,y1], [x2,y2]] ]);\n      new Polygon({\n        type: \"Polygon\",\n        coordinates: [ [[x,y], [x1,y1], [x2,y2]] ]\n      });\n  */\n  function Polygon(input){\n    if(input && input.type === \"Polygon\" && input.coordinates){\n      extend(this, input);\n    } else if(isArray(input)) {\n      this.coordinates = input;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.Polygon\";\n    }\n\n    this.type = \"Polygon\";\n  }\n\n  Polygon.prototype = new Primitive();\n  Polygon.prototype.constructor = Polygon;\n  Polygon.prototype.addVertex = function(point){\n    this.insertVertex(point, this.coordinates[0].length - 1);\n    return this;\n  };\n  Polygon.prototype.insertVertex = function(point, index){\n    this.coordinates[0].splice(index, 0, point);\n    return this;\n  };\n  Polygon.prototype.removeVertex = function(remove){\n    this.coordinates[0].splice(remove, 1);\n    return this;\n  };\n  Polygon.prototype.close = function() {\n    this.coordinates = closedPolygon(this.coordinates);\n  };\n  Polygon.prototype.hasHoles = function() {\n    return this.coordinates.length > 1;\n  };\n  Polygon.prototype.holes = function() {\n    holes = [];\n    if (this.hasHoles()) {\n      for (var i = 1; i < this.coordinates.length; i++) {\n        holes.push(new Polygon([this.coordinates[i]]));\n      }\n    }\n    return holes;\n  };\n\n  /*\n  GeoJSON MultiPolygon Class\n      new MultiPolygon();\n      new MultiPolygon([ [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ] ]);\n      new MultiPolygon({\n        type: \"MultiPolygon\",\n        coordinates: [ [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ] ]\n      });\n  */\n  function MultiPolygon(input){\n    if(input && input.type === \"MultiPolygon\" && input.coordinates){\n      extend(this, input);\n    } else if(isArray(input)) {\n      this.coordinates = input;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.MultiPolygon\";\n    }\n\n    this.type = \"MultiPolygon\";\n  }\n\n  MultiPolygon.prototype = new Primitive();\n  MultiPolygon.prototype.constructor = MultiPolygon;\n  MultiPolygon.prototype.forEach = function(func){\n    for (var i = 0; i < this.coordinates.length; i++) {\n      func.apply(this, [this.coordinates[i], i, this.coordinates ]);\n    }\n  };\n  MultiPolygon.prototype.get = function(i){\n    return new Polygon(this.coordinates[i]);\n  };\n  MultiPolygon.prototype.close = function(){\n    var outer = [];\n    this.forEach(function(polygon){\n      outer.push(closedPolygon(polygon));\n    });\n    this.coordinates = outer;\n    return this;\n  };\n\n  /*\n  GeoJSON Feature Class\n      new Feature();\n      new Feature({\n        type: \"Feature\",\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [ [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ] ]\n        }\n      });\n      new Feature({\n        type: \"Polygon\",\n        coordinates: [ [ [[x,y], [x1,y1]], [[x2,y2], [x3,y3]] ] ]\n      });\n  */\n  function Feature(input){\n    if(input && input.type === \"Feature\"){\n      extend(this, input);\n    } else if(input && input.type && input.coordinates) {\n      this.geometry = input;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.Feature\";\n    }\n\n    this.type = \"Feature\";\n  }\n\n  Feature.prototype = new Primitive();\n  Feature.prototype.constructor = Feature;\n\n  /*\n  GeoJSON FeatureCollection Class\n      new FeatureCollection();\n      new FeatureCollection([feature, feature1]);\n      new FeatureCollection({\n        type: \"FeatureCollection\",\n        coordinates: [feature, feature1]\n      });\n  */\n  function FeatureCollection(input){\n    if(input && input.type === \"FeatureCollection\" && input.features){\n      extend(this, input);\n    } else if(isArray(input)) {\n      this.features = input;\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.FeatureCollection\";\n    }\n\n    this.type = \"FeatureCollection\";\n  }\n\n  FeatureCollection.prototype = new Primitive();\n  FeatureCollection.prototype.constructor = FeatureCollection;\n  FeatureCollection.prototype.forEach = function(func){\n    for (var i = 0; i < this.features.length; i++) {\n      func.apply(this, [this.features[i], i, this.features]);\n    }\n  };\n  FeatureCollection.prototype.get = function(id){\n    var found;\n    this.forEach(function(feature){\n      if(feature.id === id){\n        found = feature;\n      }\n    });\n    return new Feature(found);\n  };\n\n  /*\n  GeoJSON GeometryCollection Class\n      new GeometryCollection();\n      new GeometryCollection([geometry, geometry1]);\n      new GeometryCollection({\n        type: \"GeometryCollection\",\n        coordinates: [geometry, geometry1]\n      });\n  */\n  function GeometryCollection(input){\n    if(input && input.type === \"GeometryCollection\" && input.geometries){\n      extend(this, input);\n    } else if(isArray(input)) {\n      this.geometries = input;\n    } else if(input.coordinates && input.type){\n      this.type = \"GeometryCollection\";\n      this.geometries = [input];\n    } else {\n      throw \"Terraformer: invalid input for Terraformer.GeometryCollection\";\n    }\n\n    this.type = \"GeometryCollection\";\n  }\n\n  GeometryCollection.prototype = new Primitive();\n  GeometryCollection.prototype.constructor = GeometryCollection;\n  GeometryCollection.prototype.forEach = function(func){\n    for (var i = 0; i < this.geometries.length; i++) {\n      func.apply(this, [this.geometries[i], i, this.geometries]);\n    }\n  };\n  GeometryCollection.prototype.get = function(i){\n    return new Primitive(this.geometries[i]);\n  };\n\n  function createCircle(center, radius, interpolate){\n    var mercatorPosition = positionToMercator(center);\n    var steps = interpolate || 64;\n    var polygon = {\n      type: \"Polygon\",\n      coordinates: [[]]\n    };\n    for(var i=1; i<=steps; i++) {\n      var radians = i * (360/steps) * Math.PI / 180;\n      polygon.coordinates[0].push([mercatorPosition[0] + radius * Math.cos(radians), mercatorPosition[1] + radius * Math.sin(radians)]);\n    }\n    polygon.coordinates = closedPolygon(polygon.coordinates);\n\n    return toGeographic(polygon);\n  }\n\n  function Circle (center, radius, interpolate) {\n    var steps = interpolate || 64;\n    var rad = radius || 250;\n\n    if(!center || center.length < 2 || !rad || !steps) {\n      throw new Error(\"Terraformer: missing parameter for Terraformer.Circle\");\n    }\n\n    extend(this, new Feature({\n      type: \"Feature\",\n      geometry: createCircle(center, rad, steps),\n      properties: {\n        radius: rad,\n        center: center,\n        steps: steps\n      }\n    }));\n  }\n\n  Circle.prototype = new Primitive();\n  Circle.prototype.constructor = Circle;\n  Circle.prototype.recalculate = function(){\n    this.geometry = createCircle(this.properties.center, this.properties.radius, this.properties.steps);\n    return this;\n  };\n  Circle.prototype.center = function(coordinates){\n    if(coordinates){\n      this.properties.center = coordinates;\n      this.recalculate();\n    }\n    return this.properties.center;\n  };\n  Circle.prototype.radius = function(radius){\n    if(radius){\n      this.properties.radius = radius;\n      this.recalculate();\n    }\n    return this.properties.radius;\n  };\n  Circle.prototype.steps = function(steps){\n    if(steps){\n      this.properties.steps = steps;\n      this.recalculate();\n    }\n    return this.properties.steps;\n  };\n\n  Circle.prototype.toJSON = function() {\n    var output = Primitive.prototype.toJSON.call(this);\n    return output;\n  };\n\n  exports.Primitive = Primitive;\n  exports.Point = Point;\n  exports.MultiPoint = MultiPoint;\n  exports.LineString = LineString;\n  exports.MultiLineString = MultiLineString;\n  exports.Polygon = Polygon;\n  exports.MultiPolygon = MultiPolygon;\n  exports.Feature = Feature;\n  exports.FeatureCollection = FeatureCollection;\n  exports.GeometryCollection = GeometryCollection;\n  exports.Circle = Circle;\n\n  exports.toMercator = toMercator;\n  exports.toGeographic = toGeographic;\n\n  exports.Tools = {};\n  exports.Tools.positionToMercator = positionToMercator;\n  exports.Tools.positionToGeographic = positionToGeographic;\n  exports.Tools.applyConverter = applyConverter;\n  exports.Tools.toMercator = toMercator;\n  exports.Tools.toGeographic = toGeographic;\n  exports.Tools.createCircle = createCircle;\n\n  exports.Tools.calculateBounds = calculateBounds;\n  exports.Tools.calculateEnvelope = calculateEnvelope;\n\n  exports.Tools.coordinatesContainPoint = coordinatesContainPoint;\n  exports.Tools.polygonContainsPoint = polygonContainsPoint;\n  exports.Tools.arraysIntersectArrays = arraysIntersectArrays;\n  exports.Tools.coordinatesContainPoint = coordinatesContainPoint;\n  exports.Tools.coordinatesEqual = coordinatesEqual;\n  exports.Tools.convexHull = convexHull;\n  exports.Tools.isConvex = isConvex;\n\n  exports.MercatorCRS = MercatorCRS;\n  exports.GeographicCRS = GeographicCRS;\n\n  return exports;\n}));\n","/* globals Terraformer */\n(function (root, factory) {\n\n  // Node.\n  if(typeof module === 'object' && typeof module.exports === 'object') {\n    exports = module.exports = factory(require('terraformer'));\n  }\n\n  // Browser Global.\n  if(typeof root.navigator === \"object\") {\n    if (!root.Terraformer){\n      throw new Error(\"Terraformer.ArcGIS requires the core Terraformer library. https://github.com/esri/Terraformer\");\n    }\n    root.Terraformer.ArcGIS = factory(root.Terraformer);\n  }\n\n}(this, function(Terraformer) {\n  var exports = {};\n\n  // https://github.com/Esri/terraformer-arcgis-parser/issues/10\n  function decompressGeometry(str) {\n    var xDiffPrev = 0;\n    var yDiffPrev = 0;\n    var points = [];\n    var x, y;\n    var strings;\n    var coefficient;\n\n    // Split the string into an array on the + and - characters\n    strings = str.match(/((\\+|\\-)[^\\+\\-]+)/g);\n\n    // The first value is the coefficient in base 32\n    coefficient = parseInt(strings[0], 32);\n\n    for (var j = 1; j < strings.length; j += 2) {\n      // j is the offset for the x value\n      // Convert the value from base 32 and add the previous x value\n      x = (parseInt(strings[j], 32) + xDiffPrev);\n      xDiffPrev = x;\n\n      // j+1 is the offset for the y value\n      // Convert the value from base 32 and add the previous y value\n      y = (parseInt(strings[j + 1], 32) + yDiffPrev);\n      yDiffPrev = y;\n\n      points.push([x / coefficient, y / coefficient]);\n    }\n\n    return points;\n  }\n\n  // checks if the first and last points of a ring are equal and closes the ring\n  function closeRing(coordinates) {\n    if (!pointsEqual(coordinates[0], coordinates[coordinates.length - 1])) {\n      coordinates.push(coordinates[0]);\n    }\n    return coordinates;\n  }\n\n  // checks if 2 x,y points are equal\n  function pointsEqual(a, b) {\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // shallow object clone for feature properties and attributes\n  // from http://jsperf.com/cloning-an-object/2\n  function clone(obj) {\n    var target = {};\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        target[i] = obj[i];\n      }\n    }\n    return target;\n  }\n\n  // determine if polygon ring coordinates are clockwise. clockwise signifies outer ring, counter-clockwise an inner ring\n  // or hole. this logic was found at http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-\n  // points-are-in-clockwise-order\n  function ringIsClockwise(ringToTest) {\n    var total = 0,i = 0;\n    var rLength = ringToTest.length;\n    var pt1 = ringToTest[i];\n    var pt2;\n    for (i; i < rLength - 1; i++) {\n      pt2 = ringToTest[i + 1];\n      total += (pt2[0] - pt1[0]) * (pt2[1] + pt1[1]);\n      pt1 = pt2;\n    }\n    return (total >= 0);\n  }\n\n  // This function ensures that rings are oriented in the right directions\n  // outer rings are clockwise, holes are counterclockwise\n  function orientRings(poly){\n    var output = [];\n    var polygon = poly.slice(0);\n    var outerRing = closeRing(polygon.shift().slice(0));\n    if(outerRing.length >= 4){\n      if(!ringIsClockwise(outerRing)){\n        outerRing.reverse();\n      }\n\n      output.push(outerRing);\n\n      for (var i = 0; i < polygon.length; i++) {\n        var hole = closeRing(polygon[i].slice(0));\n        if(hole.length >= 4){\n          if(ringIsClockwise(hole)){\n            hole.reverse();\n          }\n          output.push(hole);\n        }\n      }\n    }\n\n    return output;\n  }\n\n  // This function flattens holes in multipolygons to one array of polygons\n  // [\n  //   [\n  //     [ array of outer coordinates ]\n  //     [ hole coordinates ]\n  //     [ hole coordinates ]\n  //   ],\n  //   [\n  //     [ array of outer coordinates ]\n  //     [ hole coordinates ]\n  //     [ hole coordinates ]\n  //   ],\n  // ]\n  // becomes\n  // [\n  //   [ array of outer coordinates ]\n  //   [ hole coordinates ]\n  //   [ hole coordinates ]\n  //   [ array of outer coordinates ]\n  //   [ hole coordinates ]\n  //   [ hole coordinates ]\n  // ]\n  function flattenMultiPolygonRings(rings){\n    var output = [];\n    for (var i = 0; i < rings.length; i++) {\n      var polygon = orientRings(rings[i]);\n      for (var x = polygon.length - 1; x >= 0; x--) {\n        var ring = polygon[x].slice(0);\n        output.push(ring);\n      }\n    }\n    return output;\n  }\n\n  function coordinatesContainCoordinates(outer, inner){\n    var intersects = Terraformer.Tools.arraysIntersectArrays(outer, inner);\n    var contains = Terraformer.Tools.coordinatesContainPoint(outer, inner[0]);\n    if(!intersects && contains){\n      return true;\n    }\n    return false;\n  }\n\n  // do any polygons in this array contain any other polygons in this array?\n  // used for checking for holes in arcgis rings\n  function convertRingsToGeoJSON(rings){\n    var outerRings = [];\n    var holes = [];\n    var x; // iterator\n    var outerRing; // current outer ring being evaluated\n    var hole; // current hole being evaluated\n\n    // for each ring\n    for (var r = 0; r < rings.length; r++) {\n      var ring = closeRing(rings[r].slice(0));\n      if(ring.length < 4){\n        continue;\n      }\n      // is this ring an outer ring? is it clockwise?\n      if(ringIsClockwise(ring)){\n        var polygon = [ ring.slice().reverse() ]; // wind outer rings counterclockwise for RFC 7946 compliance\n        outerRings.push(polygon); // push to outer rings\n      } else {\n        holes.push(ring.slice().reverse()); // wind inner rings clockwise for RFC 7946 compliance\n      }\n    }\n\n    var uncontainedHoles = [];\n\n    // while there are holes left...\n    while(holes.length){\n      // pop a hole off out stack\n      hole = holes.pop();\n\n      // loop over all outer rings and see if they contain our hole.\n      var contained = false;\n      for (x = outerRings.length - 1; x >= 0; x--) {\n        outerRing = outerRings[x][0];\n        if(coordinatesContainCoordinates(outerRing, hole)){\n          // the hole is contained push it into our polygon\n          outerRings[x].push(hole);\n          contained = true;\n          break;\n        }\n      }\n\n      // ring is not contained in any outer ring\n      // sometimes this happens https://github.com/Esri/esri-leaflet/issues/320\n      if(!contained){\n        uncontainedHoles.push(hole);\n      }\n    }\n\n    // if we couldn't match any holes using contains we can now try intersects...\n    while(uncontainedHoles.length){\n      // pop a hole off out stack\n      hole = uncontainedHoles.pop();\n\n      // loop over all outer rings and see if any intersect our hole.\n      var intersects = false;\n      for (x = outerRings.length - 1; x >= 0; x--) {\n        outerRing = outerRings[x][0];\n        if(Terraformer.Tools.arraysIntersectArrays(outerRing, hole)){\n          // the hole intersects the outer ring push it into our polygon\n          outerRings[x].push(hole);\n          intersects = true;\n          break;\n        }\n      }\n\n      // hole does not intersect ANY outer ring at this point\n      // make it an outer ring.\n      if(!intersects) {\n        outerRings.push([hole.reverse()]);\n      }\n    }\n\n    if(outerRings.length === 1){\n      return {\n        type: 'Polygon',\n        coordinates: outerRings[0]\n      };\n    } else {\n      return {\n        type: 'MultiPolygon',\n        coordinates: outerRings\n      };\n    }\n  }\n\n  // ArcGIS -> GeoJSON\n  function parse(arcgis, options){\n    var geojson = {};\n\n    options = options || {};\n    options.idAttribute = options.idAttribute || undefined;\n\n    if (arcgis.spatialReference && (arcgis.spatialReference.wkid === 3857 || arcgis.spatialReference.wkid === 102100)) {\n      geojson.crs = Terraformer.MercatorCRS;\n    }\n\n    if(typeof arcgis.x === 'number' && typeof arcgis.y === 'number'){\n      geojson.type = \"Point\";\n      geojson.coordinates = [arcgis.x, arcgis.y];\n      if (arcgis.z || arcgis.m){\n        geojson.coordinates.push(arcgis.z);\n      }\n      if (arcgis.m){\n        geojson.coordinates.push(arcgis.m);\n      }\n    }\n\n    if(arcgis.points){\n      geojson.type = \"MultiPoint\";\n      geojson.coordinates = arcgis.points.slice(0);\n    }\n\n    if(arcgis.paths) {\n      if(arcgis.paths.length === 1){\n        geojson.type = \"LineString\";\n        geojson.coordinates = arcgis.paths[0].slice(0);\n      } else {\n        geojson.type = \"MultiLineString\";\n        geojson.coordinates = arcgis.paths.slice(0);\n      }\n    }\n\n    if(arcgis.rings) {\n      geojson = convertRingsToGeoJSON(arcgis.rings.slice(0));\n    }\n\n    if(\n      typeof arcgis.xmin === \"number\" &&\n      typeof arcgis.ymin === \"number\" &&\n      typeof arcgis.xmax === \"number\" &&\n      typeof arcgis.ymax === \"number\"\n    ) {\n      geojson.type = \"Polygon\";\n      geojson.coordinates = [[\n        [arcgis.xmax, arcgis.ymax],\n        [arcgis.xmin, arcgis.ymax],\n        [arcgis.xmin, arcgis.ymin],\n        [arcgis.xmax, arcgis.ymin],\n        [arcgis.xmax, arcgis.ymax]\n      ]];\n    }\n\n    if(arcgis.compressedGeometry || arcgis.geometry || arcgis.attributes) {\n      geojson.type = \"Feature\";\n\n      if(arcgis.compressedGeometry){\n        arcgis.geometry = {\n          paths: [\n            decompressGeometry(arcgis.compressedGeometry)\n          ]\n        };\n      }\n\n      geojson.geometry = (arcgis.geometry) ? parse(arcgis.geometry) : null;\n      geojson.properties = (arcgis.attributes) ? clone(arcgis.attributes) : null;\n      if(arcgis.attributes) {\n        geojson.id =  arcgis.attributes[options.idAttribute] || arcgis.attributes.OBJECTID || arcgis.attributes.FID;\n      }\n    }\n\n    return new Terraformer.Primitive(geojson);\n  }\n\n  // GeoJSON -> ArcGIS\n  function convert(geojson, options){\n    var spatialReference;\n\n    options = options || {};\n    var idAttribute = options.idAttribute || \"OBJECTID\";\n\n    if(options.sr){\n      spatialReference = { wkid: options.sr };\n    } else if (geojson && geojson.crs && geojson.crs.properties.name != \"urn:ogc:def:crs:OGC:1.3:CRS84\") {\n      spatialReference = null;\n    } else {\n      spatialReference = { wkid: 4326 };\n    }\n\n    var result = {};\n    var i;\n\n    switch(geojson.type){\n    case \"Point\":\n      result.x = geojson.coordinates[0];\n      result.y = geojson.coordinates[1];\n      if(geojson.coordinates[2]) {\n        result.z = geojson.coordinates[2];\n      }\n      if(geojson.coordinates[3]) {\n        result.m = geojson.coordinates[3];\n      }\n      result.spatialReference = spatialReference;\n      break;\n    case \"MultiPoint\":\n      result.points = geojson.coordinates.slice(0);\n      result.spatialReference = spatialReference;\n      break;\n    case \"LineString\":\n      result.paths = [geojson.coordinates.slice(0)];\n      result.spatialReference = spatialReference;\n      break;\n    case \"MultiLineString\":\n      result.paths = geojson.coordinates.slice(0);\n      result.spatialReference = spatialReference;\n      break;\n    case \"Polygon\":\n      result.rings = orientRings(geojson.coordinates.slice(0));\n      result.spatialReference = spatialReference;\n      break;\n    case \"MultiPolygon\":\n      result.rings = flattenMultiPolygonRings(geojson.coordinates.slice(0));\n      result.spatialReference = spatialReference;\n      break;\n    case \"Feature\":\n      if(geojson.geometry) {\n        result.geometry = convert(geojson.geometry, options);\n      }\n      result.attributes = (geojson.properties) ? clone(geojson.properties) : {};\n      if(geojson.id) {\n        result.attributes[idAttribute] = geojson.id;\n      }\n      break;\n    case \"FeatureCollection\":\n      result = [];\n      for (i = 0; i < geojson.features.length; i++){\n        result.push(convert(geojson.features[i], options));\n      }\n      break;\n    case \"GeometryCollection\":\n      result = [];\n      for (i = 0; i < geojson.geometries.length; i++){\n        result.push(convert(geojson.geometries[i], options));\n      }\n      break;\n    }\n\n    return result;\n  }\n\n  function parseCompressedGeometry(string){\n    return new Terraformer.LineString(decompressGeometry(string));\n  }\n\n  exports.parse   = parse;\n  exports.convert = convert;\n  exports.toGeoJSON = parse;\n  exports.fromGeoJSON = convert;\n  exports.parseCompressedGeometry = parseCompressedGeometry;\n\n  return exports;\n}));\n","'use strict';\r\nconst moment = require('moment');\r\nconst turf = require('@turf/turf');\r\nconst arcGIS = require('terraformer-arcgis-parser');\r\nexport default class DataManager {\r\n  constructor() {}\r\n  \r\n  buildData(location, controller){\r\n    // -------------------------------------------------------------------------\r\n    // NOTE: Fetching all the data sets.\r\n    // -------------------------------------------------------------------------\r\n    let council = new Promise((resolve, reject) => {\r\n\r\n      let url = \"https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/CouncilDistricts/FeatureServer/0/query?where=&objectIds=&time=&geometry=\" + location.location.x + \"%2C\" + location.location.y + \"&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=name&returnGeometry=false&returnCentroid=false&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnDistinctValues=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=\";\r\n      // console.log(url);\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        let councilInfo = {\"id\": \"council\", \"data\": null};\r\n        // console.log(data);\r\n        switch (data.features[0].attributes.Name) {\r\n          case \"District 1\":\r\n            councilInfo.data = 1;\r\n            break;\r\n          case \"District 2\":\r\n            councilInfo.data = 2;\r\n            break;\r\n          case \"District 3\":\r\n            councilInfo.data = 3;\r\n            break;\r\n          case \"District 4\":\r\n            councilInfo.data = 4;\r\n            break;\r\n          case \"District 5\":\r\n            councilInfo.data = 5;\r\n            break;\r\n          case \"District 6\":\r\n            councilInfo.data = 6;\r\n            break;\r\n          case \"District 7\":\r\n            councilInfo.data = 7;\r\n            break;\r\n          default:\r\n\r\n        }\r\n        resolve(councilInfo);\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let districtManagers = new Promise((resolve, reject) => {\r\n      let url = \"/rest/district-managers?_format=json\";\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"districtManagers\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let districtInspectors = new Promise((resolve, reject) => {\r\n      let url = \"/rest/district-inspectors?_format=json\";\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"districtInspectors\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let councilMembers = new Promise((resolve, reject) => {\r\n      let url = \"/rest/council-members?_format=json\";\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"councilMembers\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let neighborhoods = new Promise((resolve, reject) => {\r\n      let url = \"https://gis.detroitmi.gov/arcgis/rest/services/DoIT/Neighborhoods17/MapServer/1/query?where=&text=&objectIds=&time=&geometry=+\" + location.location.x + \"%2C\" + location.location.y + \"+&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelIntersects&relationParam=&outFields=&returnGeometry=false&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=4326&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&resultOffset=&resultRecordCount=&f=json\";\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"neighborhood\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let assessorsData = new Promise((resolve, reject) => {\r\n      let url = \"https://apis.detroitmi.gov/assessments/parcel/\" + location.attributes.User_fld + \"/\";\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"assessors-data\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let permitData = new Promise((resolve, reject) => {\r\n      let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/building_permits_dev/FeatureServer/0/query?where=parcel_number%3D%27${location.attributes.User_fld}%27&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=4326&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=permit_issue_date&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=2&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"permit-data\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let rentalData = new Promise((resolve, reject) => {\r\n      let url = `https://gis.detroitmi.gov/arcgis/rest/services/OpenData/RentalStatuses/FeatureServer/0/query?where=parcel_id+%3D+%27${location.attributes.User_fld}%27+and+date+<>+null&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"rental-data\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let rentalCertData = new Promise((resolve, reject) => {\r\n      let url = `https://gis.detroitmi.gov/arcgis/rest/services/OpenData/ResidentialInspections/FeatureServer/0/query?where=parcel_id+%3D+%27${location.attributes.User_fld}%27+and+date+<>+null+and+result+%3D+%27OK%27&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"rental-cert-data\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let blightData = new Promise((resolve, reject) => {\r\n      let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/Blight_Violations_(DAH)/FeatureServer/0/query?where=parcelno%3D%27${location.attributes.User_fld}%27&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=violation_date&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=2&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"blight-data\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let salesHistoryData = new Promise((resolve, reject) => {\r\n      let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/Property_Sales/FeatureServer/0/query?where=PARCEL_NO%3D%27${location.attributes.User_fld}%27&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=4326&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=SALE_DATE&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=2&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"sales-data\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let demosData = new Promise((resolve, reject) => {\r\n      let point = turf.point([location.location.x, location.location.y]);\r\n      let buffer = turf.buffer(point, 1, {units: 'miles'});\r\n      let simplePolygon = turf.simplify(buffer.geometry, {tolerance: 0.005, highQuality: false});\r\n      let arcsimplePolygon = arcGIS.convert(simplePolygon);\r\n      let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/Demolitions_under_Contract/FeatureServer/0/query?where=demolish_by_date+%3E%3D+%27${controller.defaultSettings.startDate}%27+and+demolish_by_date+%3C+%27${controller.defaultSettings.endDate}%27+and+parcel_id+%3C%3E+%27${location.attributes.User_fld}%27&objectIds=&time=&geometry=${encodeURI(JSON.stringify(arcsimplePolygon))}&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=4326&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&resultOffset=&resultRecordCount=3&f=json`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"demos-data\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let demoStatus = new Promise((resolve, reject) => {\r\n      let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/Demolitions_under_Contract/FeatureServer/0/query?where=parcel_id+%3D+%27${location.attributes.User_fld}%27&objectIds=&time=&geometry=&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=4326&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=demolish_by_date&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=1&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"demo-status\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let pSchools = new Promise((resolve, reject) => {\r\n      let point = turf.point([location.location.x, location.location.y]);\r\n      let buffer = turf.buffer(point, 1, {units: 'miles'});\r\n      let simplePolygon = turf.simplify(buffer.geometry, {tolerance: 0.005, highQuality: false});\r\n      let arcsimplePolygon = arcGIS.convert(simplePolygon);\r\n      let url = \"https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/Schools2017/FeatureServer/0/query?where=1%3D1&text=&objectIds=&time=&geometry=\"+ encodeURI(JSON.stringify(arcsimplePolygon))+\"&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=4326&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&resultOffset=&resultRecordCount=&f=json\";\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\" : \"schools\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let npo = new Promise((resolve, reject) => {\r\n      let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/npo_ago/FeatureServer/0/query?where=&objectIds=&time=&geometry=${location.location.x}%2C${location.location.y}&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=*&returnGeometry=true&returnCentroid=false&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=4326&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnDistinctValues=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=json&token=`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\" : \"npo\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let improveDet = new Promise((resolve, reject) => {\r\n      let point = turf.point([location.location.x, location.location.y]);\r\n      let buffer = turf.buffer(point, 300, {units: 'meters'});\r\n      let simplePolygon = turf.simplify(buffer.geometry, {tolerance: 0.005, highQuality: false});\r\n      let arcsimplePolygon = arcGIS.convert(simplePolygon);\r\n      let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/improve_detroit_issues/FeatureServer/0/query?where=status+%3C%3E+%27Closed%27+and+status+%3C%3E+%27Archived%27&objectIds=&time=&geometry=${encodeURI(JSON.stringify(arcsimplePolygon))}&geometryType=esriGeometryPolygon&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=4326&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&resultOffset=&resultRecordCount=3&f=json`;\r\n      return fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\": \"improve-det\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let recycling = new Promise((resolve, reject) => {\r\n      let url = \"https://gis.detroitmi.gov/arcgis/rest/services/DPW/2019Services/MapServer/0/query?where=&text=&objectIds=&time=&geometry=\" + location.location.x + \"%2C+\" + location.location.y + \"&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelWithin&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&resultOffset=&resultRecordCount=&f=json\";\r\n      fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        let todaysMonth =  moment().month() + 1;\r\n        let todaysYear = moment().year();\r\n        let url = `https://apis.detroitmi.gov/waste_schedule/details/${data.features[0].attributes.FID}/year/${todaysYear}/month/${todaysMonth}/`;\r\n        return fetch(url)\r\n        .then((resp) => resp.json()) // Transform the data into json\r\n        .then(function(data) {\r\n          resolve({\"id\": \"recycling\", \"data\": data});\r\n        });\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    let historicDistrict = new Promise((resolve, reject) => {\r\n      let url = \"https://services2.arcgis.com/qvkbeam7Wirps6zC/ArcGIS/rest/services/Detroit_Local_Historic_Districts/FeatureServer/0/query?where=&text=&objectIds=&time=&geometry=\" + location.location.x + \"%2C+\" + location.location.y + \"&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelWithin&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&resultOffset=&resultRecordCount=&f=json\";\r\n      fetch(url)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function(data) {\r\n        resolve({\"id\" : \"historicDistrict\", \"data\": data});\r\n      }).catch( err => {\r\n        // console.log(err);\r\n      });\r\n    });\r\n    // ,districtManagers,districtInspectors,councilMembers\r\n    let filters = controller.defaultSettings.filters.split(',');\r\n    let callList = [];\r\n    filters.forEach(f => {\r\n      console.log(f);\r\n      switch (f) {\r\n        case 'council':\r\n          callList.push(council);\r\n          break;\r\n\r\n        case 'neighborhood':\r\n          callList.push(neighborhoods);\r\n          break;\r\n\r\n        case 'assessors-data':\r\n          if(location.attributes.User_fld != null && location.attributes.User_fld != ''){\r\n            callList.push(assessorsData);\r\n          }\r\n          break;\r\n\r\n        case 'permit-data':\r\n          if(location.attributes.User_fld != null && location.attributes.User_fld != ''){\r\n            callList.push(permitData);\r\n          }\r\n          break;\r\n\r\n        case 'blight-data':\r\n          if(location.attributes.User_fld != null && location.attributes.User_fld != ''){\r\n            callList.push(blightData);\r\n          }\r\n          break;\r\n\r\n        case 'salesHistoryData':\r\n          if(location.attributes.User_fld != null && location.attributes.User_fld != ''){\r\n            callList.push(salesHistoryData);\r\n          }\r\n          break;\r\n\r\n        case 'demosData':\r\n          callList.push(demosData);\r\n          break;\r\n\r\n        case 'npo':\r\n          callList.push(npo);\r\n          break;\r\n\r\n        case 'improve-det':\r\n          callList.push(improveDet);\r\n          break;\r\n\r\n        case 'recycling':\r\n          callList.push(recycling);\r\n          break;\r\n\r\n        case 'rentalData':\r\n          if(location.attributes.User_fld != null && location.attributes.User_fld != ''){\r\n            callList.push(rentalData);\r\n          }\r\n          break;\r\n\r\n        case 'rentalCertData':\r\n          callList.push(rentalCertData);\r\n          break;\r\n\r\n        case 'demoStatus':\r\n          if(location.attributes.User_fld != null && location.attributes.User_fld != ''){\r\n            callList.push(demoStatus);\r\n          }\r\n          break;\r\n\r\n        case 'historicDistrict':\r\n          callList.push(historicDistrict);\r\n          break;\r\n\r\n        case 'districtManagers':\r\n          callList.push(districtManagers);\r\n          break;\r\n\r\n        case 'districtInspectors':\r\n          callList.push(districtInspectors);\r\n          break;\r\n\r\n        case 'councilMembers':\r\n          callList.push(councilMembers);\r\n          break;\r\n      \r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    Promise.all(callList).then(values => {\r\n      let dataSets = {};\r\n      for (let key in values) {\r\n        if(values[key] != null) {\r\n          dataSets[values[key].id] = values[key];\r\n        }else{\r\n          initialLoadChecker = false;\r\n        }\r\n      }\r\n      dataSets['title'] = location.address;\r\n      if(filters.includes('council')){\r\n        let councilData = controller.buildCouncilData(dataSets, controller);\r\n        dataSets.councilData = {id: 'councilData', data: councilData};\r\n      }\r\n      controller.panel.creatPanel(dataSets, controller);\r\n    }).catch(reason => {\r\n      // console.log(reason);\r\n    });\r\n    // if(location.attributes.User_fld != null && location.attributes.User_fld != ''){\r\n    //   Promise.all([council,neighborhoods,assessorsData,permitData,blightData,salesHistoryData,demosData,npo,improveDet,recycling,rentalData,rentalCertData,demoStatus,historicDistrict,districtManagers,districtInspectors,councilMembers]).then(values => {\r\n    //     let dataSets = {};\r\n    //     for (let key in values) {\r\n    //       if(values[key] != null) {\r\n    //         dataSets[values[key].id] = values[key];\r\n    //       }else{\r\n    //         initialLoadChecker = false;\r\n    //       }\r\n    //     }\r\n    //     dataSets['title'] = location.address;\r\n    //     controller.buildCouncilData(dataSets, controller);\r\n    //   }).catch(reason => {\r\n    //     // console.log(reason);\r\n    //   });\r\n    // }else{\r\n    //   Promise.all([council,neighborhoods,demosData,npo,improveDet,recycling,historicDistrict,districtManagers,districtInspectors,councilMembers]).then(values => {\r\n    //     let dataSets = {};\r\n    //     for (let key in values) {\r\n    //       if(values[key] != null) {\r\n    //         dataSets[values[key].id] = values[key];\r\n    //       }else{\r\n    //         initialLoadChecker = false;\r\n    //       }\r\n    //     }\r\n    //     dataSets['title'] = location.address;\r\n    //     controller.buildCouncilData(dataSets, controller);\r\n    //   }).catch(reason => {\r\n    //     // console.log(reason);\r\n    //   });\r\n    // }\r\n    \r\n  }\r\n}\r\n","'use strict';\r\nexport default class Geocoder {\r\n  constructor(container, controller) {\r\n    this.form = null;\r\n    this.controller = controller;\r\n    \r\n    this.user = null;\r\n    this.init(document.getElementById(container), this);\r\n  }\r\n\r\n  init(container, geocoder){\r\n    \r\n    let form = document.createElement('form');\r\n    let label = document.createElement('label');\r\n    let input = document.createElement('input');\r\n    let suggestions = document.createElement('ul');\r\n    let list = document.createElement('datalist');\r\n    let icon = document.createElement('i');\r\n    form.addEventListener('submit', (ev) => {\r\n        this.submit(ev, geocoder);\r\n    });\r\n    icon.className = 'fas fa-map-marker-alt';\r\n    label.innerText = \"My Home Info:\";\r\n    label.setAttribute(\"for\", \"geocoder-input\"); \r\n    input.type = 'text';\r\n    input.setAttribute('list','addresses-list');\r\n    input.placeholder = 'Enter address';\r\n    input.setAttribute('id', 'geocoder-input');\r\n    input.setAttribute('autocomplete', 'off');\r\n    input.addEventListener('keyup', (ev)=>{\r\n        this.inputChange(ev, geocoder);\r\n    });\r\n    list.setAttribute('id','addresses-list');\r\n    \r\n\r\n    form.appendChild(label);\r\n    form.appendChild(input);\r\n    form.appendChild(icon);\r\n    // form.appendChild(suggestions);\r\n    form.appendChild(list);\r\n    container.appendChild(form);\r\n    this.form = form;\r\n  }\r\n\r\n  writeUserData(userId, name, pass) {\r\n    firebase.database().ref('users/' + userId).set({\r\n      username: name,\r\n      password: pass\r\n    });\r\n  }\r\n\r\n  supplementGeocoder(address, geocoder, type){\r\n    let tempAddr = address.split(\",\");\r\n    tempAddr = tempAddr[0];\r\n    tempAddr = tempAddr.split(\" \");\r\n    let newTempAddr = '';\r\n    let size = tempAddr.length;\r\n    tempAddr.forEach(function(item, index) {\r\n      newTempAddr += item;\r\n      ((index < size) && (index + 1) !== size) ? newTempAddr += '+': 0;\r\n    });\r\n    let url = `https://gis.detroitmi.gov/arcgis/rest/services/DoIT/CompositeGeocoder/GeocodeServer/findAddressCandidates?Street=&City=&ZIP=&SingleLine=${newTempAddr}&category=&outFields=User_fld&maxLocations=4&outSR=4326&searchExtent=&location=&distance=&magicKey=&f=json`;\r\n    \r\n    try {\r\n        fetch(url)\r\n        .then((resp) => resp.json()) // Transform the data into json\r\n        .then(function(data) {\r\n            // console.log(data);\r\n            if(type === 'suggestions'){\r\n                data.candidates.forEach((item)=>{\r\n                    let sugg = document.createElement('option');\r\n                    if(item.attributes.User_fld === ''){\r\n                        sugg.value = item.address;\r\n                        sugg.setAttribute('data-parsel', 'no-parcel');\r\n                    }else{\r\n                        sugg.value = `${item.address} RECOMMENDED`;\r\n                        sugg.setAttribute('data-parsel', item.attributes.User_fld);\r\n                    }\r\n                    \r\n                    sugg.onclick = (ev) => {\r\n                        geocoder.selectSuggestion(ev, geocoder);\r\n                    }\r\n                    geocoder.form.childNodes[3].appendChild(sugg);\r\n                });\r\n            }else{\r\n                let url = `https://services2.arcgis.com/qvkbeam7Wirps6zC/arcgis/rest/services/City_of_Detroit_Boundary/FeatureServer/0/query?where=&objectIds=&time=&geometry=${data.candidates[0].location.x}%2C+${data.candidates[0].location.y}&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=false&outFields=4326&returnGeometry=true&returnCentroid=false&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnDistinctValues=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=geojson&token=`;\r\n                try {\r\n                    fetch(url)\r\n                    .then((resp) => resp.json()) // Transform the data into json\r\n                    .then(function(city) {\r\n                        if(city.features.length){\r\n                            geocoder.controller.panel.createErrorPanel(address, false);\r\n                            let parcel = null;\r\n                            let location;\r\n                            data.candidates.forEach((item) => {\r\n                                if(item.attributes.User_fld !== ''){\r\n                                    if(geocoder.controller.checkParcelValid(item.attributes.User_fld)){\r\n                                        parcel = item;\r\n                                    }\r\n                                }\r\n                            });\r\n                            (parcel == null) ? location = data.candidates[0].location : location = null; \r\n                            if(parcel === null){\r\n                                geocoder.needGeocode(address, geocoder, location);\r\n                                geocoder.clearSuggestions(geocoder);\r\n                                geocoder.controller.panel.loaderToggle(true);\r\n                                geocoder.controller.panel.clearPanel();\r\n                                geocoder.controller.dataManager.buildData(data.candidates[0], geocoder.controller);\r\n                            }else{\r\n                                geocoder.needGeocode(address, geocoder, location);\r\n                                geocoder.clearSuggestions(geocoder);\r\n                                geocoder.controller.panel.loaderToggle(true);\r\n                                geocoder.controller.panel.clearPanel();\r\n                                geocoder.controller.dataManager.buildData(parcel, geocoder.controller);\r\n                            }\r\n                        }else{\r\n                            geocoder.controller.panel.createErrorPanel(address, true);\r\n                        }\r\n                    });\r\n                }catch (error) {\r\n                    geocoder.controller.panel.createErrorPanel(address, true);\r\n                }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        geocoder.controller.panel.createErrorPanel(address, true);\r\n    }\r\n  }\r\n\r\n  selectSuggestion(ev, geocoder){\r\n    let selection = null;\r\n    if(ev.target.tagName === 'SPAN'){\r\n        selection = ev.target.parentNode;\r\n    }else{\r\n        selection = ev.target;\r\n    }\r\n    if(selection.attributes[0].value === 'no-parcel'){\r\n        geocoder.clearSuggestions(geocoder);\r\n        geocoder.supplementGeocoder(selection.innerText, geocoder, 'submit');\r\n    }else{\r\n        geocoder.supplementGeocoder(selection.innerText, geocoder, 'submit');\r\n    }\r\n  }\r\n\r\n  inputChange (ev, geocoder){\r\n    switch (ev.key) {\r\n        case 'Enter':\r\n            (ev.target.value != '' && ev.target.value != undefined) ? geocoder.supplementGeocoder(ev.target.value, geocoder, 'submit') : 0;\r\n            break;\r\n    \r\n        case 'ArrowDown':\r\n\r\n            break;\r\n\r\n        case 'ArrowUp':\r\n\r\n            break;\r\n\r\n        case 'ArrowRight':\r\n\r\n            break;\r\n\r\n        case 'ArrowLeft':\r\n\r\n            break;\r\n\r\n        case undefined:\r\n            (ev.target.value != '' && ev.target.value != undefined) ? geocoder.supplementGeocoder(ev.target.value, geocoder, 'submit') : 0;\r\n            break;\r\n\r\n        default:\r\n            geocoder.clearSuggestions(geocoder);\r\n            geocoder.supplementGeocoder(ev.target.value, geocoder, 'suggestions');\r\n            break;\r\n    }\r\n  }\r\n\r\n  clearSuggestions(geocoder){\r\n    while (geocoder.form.childNodes[3].firstChild) {\r\n        geocoder.form.childNodes[3].removeChild(geocoder.form.childNodes[3].firstChild);\r\n    }\r\n  }\r\n\r\n  needGeocode(address, geocoder, location){\r\n    fetch('https://us-central1-detroit-iet.cloudfunctions.net/getToken')\r\n    .then((resp) => resp.json()) // Transform the data into json\r\n    .then(function(data) {\r\n        let params = [\r\n            {\r\n              \"attributes\" : {\r\n                \"user_input\" : address\r\n              },\r\n              \"geometry\" : {\r\n                \"x\" : 0,\r\n                \"y\" : 0\r\n              }\r\n            }\r\n        ];\r\n        if(location != null){\r\n            params[0].geometry.x = location.x;\r\n            params[0].geometry.y = location.y;\r\n        }\r\n        let request = new Request(`https://services2.arcgis.com/qvkbeam7Wirps6zC/ArcGIS/rest/services/addressvalidator/FeatureServer/0/addFeatures?token=${data.access_token}&features=${encodeURIComponent(JSON.stringify(params))}&f=json`, {\r\n            method: 'POST',\r\n            body: '',\r\n            headers: new Headers(),\r\n            mode: 'cors',\r\n            cache: 'default'\r\n        });\r\n        fetch(request)\r\n        .then((res) => {\r\n            // console.log(res);\r\n        });\r\n    });\r\n  }\r\n\r\n  submit(ev, geocoder){\r\n      ev.preventDefault();\r\n      geocoder.supplementGeocoder(ev.target['0'].value, geocoder, 'submit');\r\n  }\r\n}","'use strict';\r\nimport Panel from './panel.class.js';\r\nimport DataManager from './data-manager.class.js';\r\nimport Geocoder from './geocoder.class.js';\r\nconst moment = require('moment');\r\nexport default class Controller {\r\n  constructor() {\r\n    this.defaultSettings = {};\r\n    this.panel = new Panel();\r\n    this.dataManager = new DataManager();\r\n    this.geocoder = new Geocoder('geocoder', this);\r\n    this.initialLoad(this);\r\n  }\r\n  initialLoad(controller){\r\n    controller.defaultSettings.startDate = moment().format('YYYY-MM-DD');\r\n    controller.defaultSettings.endDate = moment().add(5,'months').format('YYYY-MM-DD');\r\n    controller.defaultSettings.filters = document.getElementById('local-services-filters').value;\r\n  }\r\n\r\n  checkParcelValid(parcel){\r\n    return /\\d/.test(parcel);\r\n  }\r\n\r\n  closeAlert(ev){\r\n    (ev.target.parentNode.parentNode.id === 'alert-overlay') ? document.getElementById('alert-overlay').className = '': document.getElementById('drill-down-overlay').className = '';\r\n  }\r\n\r\n  buildCouncilData(data, _controller){\r\n    let councilData = {\r\n      district: `District ${data.council.data}`,\r\n      districtURL: null,\r\n      council:{\r\n        name: null,\r\n        url: null,\r\n        phone: null\r\n      },\r\n      dmanager:{\r\n        name: null,\r\n        url: `/departments/department-of-neighborhoods/district-${data.council.data}#block-views-block-contacts-special-block-1`,\r\n        phone: null\r\n      },\r\n      ddmanager: {\r\n        name: null,\r\n        url: `/departments/department-of-neighborhoods/district-${data.council.data}#block-views-block-contacts-special-block-1`,\r\n        phone: null\r\n      },\r\n      bliaision:{\r\n        name: null,\r\n        email: null\r\n      },\r\n      enforcement: {\r\n        name: null,\r\n        phone: null\r\n      }\r\n    };\r\n    switch (data.council.data) {\r\n      case 1:\r\n        councilData.districtURL = `/taxonomy/term/1276`;\r\n        data.councilMembers.data.forEach((item)=>{\r\n          if(item.tid == '1276'){\r\n            councilData.council.name = item.field_organization_head_name;\r\n            councilData.council.url = `/taxonomy/term/1276`;\r\n            councilData.council.phone = item.field_phone;\r\n          }\r\n        });\r\n        data.districtManagers.data.forEach((item)=>{\r\n          if(item.field_contact_position.includes('District 1 Manager')){\r\n            councilData.dmanager.name = item.title;\r\n            councilData.dmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 1 Deputy Manager')){\r\n            councilData.ddmanager.name = item.title;\r\n            councilData.ddmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 1 Business Liaison')){\r\n            councilData.bliaision.name = item.title;\r\n            councilData.bliaision.email = item.field_email_address;\r\n          }\r\n        });\r\n        data.districtInspectors.data.forEach((item)=>{\r\n          if(item.field_responsibilities.includes('District 1')){\r\n            councilData.enforcement.name = item.title;\r\n            councilData.enforcement.phone = item.field_telephone;\r\n          }\r\n        });\r\n        break;\r\n        \r\n      case 2:\r\n        councilData.districtURL = `/taxonomy/term/1476`;\r\n        data.councilMembers.data.forEach((item)=>{\r\n          if(item.tid == '1476'){\r\n            councilData.council.name = item.field_organization_head_name;\r\n            councilData.council.url = `/taxonomy/term/1476`;\r\n            councilData.council.phone = item.field_phone;\r\n          }\r\n        });\r\n        data.districtManagers.data.forEach((item)=>{\r\n          if(item.field_contact_position.includes('District 2 Manager')){\r\n            councilData.dmanager.name = item.title;\r\n            councilData.dmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 2 Deputy Manager')){\r\n            councilData.ddmanager.name = item.title;\r\n            councilData.ddmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 2 Business Liaison')){\r\n            councilData.bliaision.name = item.title;\r\n            councilData.bliaision.email = item.field_email_address;\r\n          }\r\n        });\r\n        data.districtInspectors.data.forEach((item)=>{\r\n          if(item.field_responsibilities.includes('District 2')){\r\n            councilData.enforcement.name = item.title;\r\n            councilData.enforcement.phone = item.field_telephone;\r\n          }\r\n        });\r\n        break;\r\n        \r\n      case 3:\r\n        councilData.districtURL = `/taxonomy/term/1481`;\r\n        data.councilMembers.data.forEach((item)=>{\r\n          if(item.tid == '1481'){\r\n            councilData.council.name = item.field_organization_head_name;\r\n            councilData.council.url = `/taxonomy/term/1481`;\r\n            councilData.council.phone = item.field_phone;\r\n          }\r\n        });\r\n        data.districtManagers.data.forEach((item)=>{\r\n          if(item.field_contact_position.includes('District 3 Manager')){\r\n            councilData.dmanager.name = item.title;\r\n            councilData.dmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 3 Deputy Manager')){\r\n            councilData.ddmanager.name = item.title;\r\n            councilData.ddmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 3 Business Liaison')){\r\n            councilData.bliaision.name = item.title;\r\n            councilData.bliaision.email = item.field_email_address;\r\n          }\r\n        });\r\n        data.districtInspectors.data.forEach((item)=>{\r\n          if(item.field_responsibilities.includes('District 3')){\r\n            councilData.enforcement.name = item.title;\r\n            councilData.enforcement.phone = item.field_telephone;\r\n          }\r\n        });\r\n        break;\r\n        \r\n      case 4:\r\n        councilData.districtURL = `/taxonomy/term/1486`;\r\n        data.councilMembers.data.forEach((item)=>{\r\n          if(item.tid == '1486'){\r\n            councilData.council.name = item.field_organization_head_name;\r\n            councilData.council.url = `/taxonomy/term/1486`;\r\n            councilData.council.phone = item.field_phone;\r\n          }\r\n        });\r\n        data.districtManagers.data.forEach((item)=>{\r\n          if(item.field_contact_position.includes('District 4 Manager')){\r\n            councilData.dmanager.name = item.title;\r\n            councilData.dmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 4 Deputy Manager')){\r\n            councilData.ddmanager.name = item.title;\r\n            councilData.ddmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 4 Business Liaison')){\r\n            councilData.bliaision.name = item.title;\r\n            councilData.bliaision.email = item.field_email_address;\r\n          }\r\n        });\r\n        data.districtInspectors.data.forEach((item)=>{\r\n          if(item.field_responsibilities.includes('District 4')){\r\n            councilData.enforcement.name = item.title;\r\n            councilData.enforcement.phone = item.field_telephone;\r\n          }\r\n        });\r\n        break;\r\n        \r\n      case 5:\r\n          councilData.districtURL = `/taxonomy/term/1346`;\r\n          data.councilMembers.data.forEach((item)=>{\r\n            if(item.tid == '1346'){\r\n              councilData.council.name = item.field_organization_head_name;\r\n              councilData.council.url = `/taxonomy/term/1346`;\r\n              councilData.council.phone = item.field_phone;\r\n            }\r\n          });\r\n          data.districtManagers.data.forEach((item)=>{\r\n            if(item.field_contact_position.includes('District 5 Manager')){\r\n              councilData.dmanager.name = item.title;\r\n              councilData.dmanager.phone = item.field_telephone;\r\n            }\r\n            if(item.field_contact_position.includes('District 5 Deputy Manager')){\r\n              councilData.ddmanager.name = item.title;\r\n              councilData.ddmanager.phone = item.field_telephone;\r\n            }\r\n            if(item.field_contact_position.includes('District 5 Business Liaison')){\r\n              councilData.bliaision.name = item.title;\r\n              councilData.bliaision.email = item.field_email_address;\r\n            }\r\n          });\r\n          data.districtInspectors.data.forEach((item)=>{\r\n            if(item.field_responsibilities.includes('District 5')){\r\n              councilData.enforcement.name = item.title;\r\n              councilData.enforcement.phone = item.field_telephone;\r\n            }\r\n        });\r\n        break;\r\n        \r\n      case 6:\r\n        console.log('loading council 6');\r\n        councilData.districtURL = `/taxonomy/term/1491`;\r\n        data.councilMembers.data.forEach((item)=>{\r\n          if(item.tid == '1491'){\r\n            let cleanPhone = item.field_phone.replace('Office: ','');\r\n            cleanPhone = cleanPhone.replace(/ /g,'-');\r\n            cleanPhone = cleanPhone.replace(/[()]/g,'');\r\n            councilData.council.name = item.field_organization_head_name;\r\n            councilData.council.url = `/taxonomy/term/1491`;\r\n            councilData.council.phone = `<a href=\"tel:${cleanPhone}\">${item.field_phone}</a>`;\r\n          }\r\n        });\r\n        data.districtManagers.data.forEach((item)=>{\r\n          if(item.field_contact_position.includes('District 6 Manager')){\r\n            let cleanPhone = item.field_telephone.replace(/ /g,'-');\r\n            cleanPhone = cleanPhone.replace(/[()]/g,'');\r\n            councilData.dmanager.name = item.title;\r\n            councilData.dmanager.phone = `<a href=\"tel:${cleanPhone}\">${item.field_telephone}</a>`;\r\n          }\r\n          if(item.field_contact_position.includes('District 6 Deputy Manager')){\r\n            let cleanPhone = item.field_telephone.replace(/ /g,'-');\r\n            cleanPhone = cleanPhone.replace(/[()]/g,'');\r\n            councilData.ddmanager.name = item.title;\r\n            councilData.ddmanager.phone = `<a href=\"tel:${cleanPhone}\">${item.field_telephone}</a>`;\r\n          }\r\n          if(item.field_contact_position.includes('District 6 Business Liaison')){\r\n            councilData.bliaision.name = item.title;\r\n            councilData.bliaision.email = item.field_email_address;\r\n          }\r\n        });\r\n        data.districtInspectors.data.forEach((item)=>{\r\n          if(item.field_responsibilities.includes('District 6')){\r\n            let cleanPhone = item.field_telephone.replace(/ /g,'-');\r\n            cleanPhone = cleanPhone.replace(/[()]/g,'');\r\n            councilData.enforcement.name = item.title;\r\n            councilData.enforcement.phone = `<a href=\"tel:${cleanPhone}\">${item.field_telephone}</a>`;\r\n          }\r\n        });\r\n        break;\r\n\r\n      case 7:\r\n        councilData.districtURL = `/taxonomy/term/1511`;\r\n        data.councilMembers.data.forEach((item)=>{\r\n          if(item.tid == '1511'){\r\n            councilData.council.name = item.field_organization_head_name;\r\n            councilData.council.url = `/taxonomy/term/1511`;\r\n            councilData.council.phone = item.field_phone;\r\n          }\r\n        });\r\n        data.districtManagers.data.forEach((item)=>{\r\n          if(item.field_contact_position.includes('District 7 Manager')){\r\n            councilData.dmanager.name = item.title;\r\n            councilData.dmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 7 Deputy Manager')){\r\n            councilData.ddmanager.name = item.title;\r\n            councilData.ddmanager.phone = item.field_telephone;\r\n          }\r\n          if(item.field_contact_position.includes('District 7 Business Liaison')){\r\n            councilData.bliaision.name = item.title;\r\n            councilData.bliaision.email = item.field_email_address;\r\n          }\r\n        });\r\n        data.districtInspectors.data.forEach((item)=>{\r\n          if(item.field_responsibilities.includes('District 7')){\r\n            councilData.enforcement.name = item.title;\r\n            councilData.enforcement.phone = item.field_telephone;\r\n          }\r\n        });\r\n        break;\r\n    \r\n      default:\r\n        console.log('not inside city');\r\n        break;\r\n    }\r\n    return councilData;\r\n  }\r\n}","'use strict';\r\nimport Controller from './js/controller.class';\r\nimport './scss/styles.scss';\r\n(function(){\r\n  let controller = new Controller();\r\n  document.getElementById('close-services-btn').addEventListener('click', function(){\r\n    document.getElementById('local-services-results').className = '';\r\n  });\r\n})(window);\r\n"]}